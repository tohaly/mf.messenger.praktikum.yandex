!function(e){var t={};function s(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(n,a,function(t){return e[t]}.bind(null,a));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=3)}([function(e,t,s){e.exports=s.p+"images/chat-card__img.png"},function(e,t,s){e.exports=s.p+"images/example-user-img.jpg"},function(e,t,s){},function(e,t,s){"use strict";s.r(t);s(2);class n{constructor(e,t,s){this._pathname=e,this._blockClass=t,this._block=null,this._props=s}navigate(e){this.match(e)&&(this._pathname=e,this.render())}leave(){this._block&&this._block.hide()}match(e){return t=e,s=this._pathname,t===s;var t,s}render(){if(!this._block)return this._block=new this._blockClass,void((e,t)=>{const s=document.querySelector(e);s.appendChild(t.getContent())})(this._props.rootQuery,this._block);this._block.show()}}class a{constructor(e){if(this._handleHashChange=()=>{const e=window.location.hash;this._onRoute(e)},a.__instance)return a.__instance;this.routes=[],this.history=window.history,this._currentRoute=null,this._rootQuery=e,this._defaultPath,this.isProtect=!0,a.__instance=this,window.addEventListener("hashchange",this._handleHashChange)}use(e,t){const s=new n(e,t,{rootQuery:this._rootQuery});return this.routes.push(s),this}useDefault(e,t){const s=new n(e,t,{rootQuery:this._rootQuery});return this._defaultPath=e,this.routes.push(s),this}useProtect(e,t){const s=new n(e,t,{rootQuery:this._rootQuery,protect:!0});return this.routes.push(s),this}start(){window.onpopstate=(e=>{this._onRoute(e.currentTarget.location.hash)}).bind(this),this._onRoute(window.location.hash)}_onRoute(e){const t=this.getRoute(e);t?t._props.protect&&this.isProtect?this.go(this._defaultPath):(this._currentRoute&&this._currentRoute!==t&&this._currentRoute.leave(),this._currentRoute=t,t.render()):this.go("#/notfound")}go(e){this.history.pushState({},"",e),this._onRoute(e)}back(){this.history.back()}forward(){this.history.forward()}getRoute(e){return this.routes.find(t=>t._pathname.match(e))}}const r=new a("#main-content");r.isProtect=!localStorage.getItem("login");var i=r;const o=new Event("changeAuthorization"),l=new Proxy({login:""},{get:(e,t)=>e[t],set:(e,t,s)=>(e[t]=s,localStorage.setItem("login",s),document.dispatchEvent(o),!0)});class h{constructor(){this.listeners={}}on(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}off(e,t){if(!this.listeners[e])throw new Error("Нет события: "+e);this.listeners[e]=this.listeners[e].filter(e=>e!==t)}emit(e,...t){if(!this.listeners[e])throw new Error("Нет события: "+e);this.listeners[e].forEach((function(e){e(...t)}))}}class u{constructor(e="div",t={}){this.EVENTS={INIT:"init",FLOW_CDM:"flow:component-did-mount",FLOW_CDU:"flow:component-did-update",FLOW_RENDER:"flow:render"},this._element=null,this._meta=null,this.setProps=e=>{e&&(this.lastActiveElement=document.activeElement,Object.assign(this.props,e))},this._makePropsProxy=e=>new Proxy(e,{get(e,t){const s=e[t];return"function"==typeof s?s.bind(e):s},set:(e,t,s)=>(e[t]=s,this.eventBus().emit(this.EVENTS.FLOW_CDU,Object.assign({},e),e),!0),deleteProperty(){throw new Error("No access")}});const s=new h;this._meta={tagName:e,props:t},this.props=this._makePropsProxy(t),this.lastActiveElement,this.eventBus=()=>s,this._registerEvents(s),s.emit(this.EVENTS.INIT),this.setProps=this.setProps.bind(this)}_registerEvents(e){e.on(this.EVENTS.INIT,this.init.bind(this)),e.on(this.EVENTS.FLOW_CDM,this._componentDidMount.bind(this)),e.on(this.EVENTS.FLOW_RENDER,this._render.bind(this)),e.on(this.EVENTS.FLOW_CDU,this._componentDidUpdate.bind(this))}_createResources(){const{tagName:e}=this._meta;this._element=this._createDocumentElement(e)}init(){this._createResources(),this.eventBus().emit(this.EVENTS.FLOW_CDM)}_componentDidMount(){this.componentDidMount(),this.eventBus().emit(this.EVENTS.FLOW_RENDER)}componentDidMount(){}_componentDidUpdate(e,t){this.componentDidUpdate()&&(this._render(),this.eventBus().emit(this.EVENTS.FLOW_RENDER))}componentDidUpdate(){return!0}get element(){return this._element}_render(){const e=this.render();this._element.innerHTML=e,this._setLastFocusInput()}render(){}getContent(){return this.element}_createDocumentElement(e){return document.createElement(e)}_setLastFocusInput(){const e=this.lastActiveElement;if(e&&"INPUT"===e.tagName){const t=e.classList[2];document.querySelector("."+t).focus()}}show(){this.getContent().style.display="block"}hide(){this.getContent().style.display="none"}}class c{constructor(e){this._TEMPLATE_REGEXP=/\{\%(.*?)\%\}/gi,this._REGEXP_CTX=/\(\)\(\%(.*?)\%\)/gi,this._template=e}compile(e){return this._compileTemplate(e)}_compileTemplate(e){let t=this._template,s=null;const n=this._TEMPLATE_REGEXP;for(;s=n.exec(t);)if(s[1]){const n=s[1].trim(),a=this.get(e,n);if("function"==typeof a){window[n]=a,t=t.replace(new RegExp(s[0],"gi"),`window.${n}()`);const e=this._REGEXP_CTX.exec(t);e&&(t=t.replace(e[0],`.${e[1].trim()}()`))}t=t.replace(new RegExp(s[0],"gi"),a)}return t}get(e,t,s){const n=t.split(".");let a=e;for(const e of n){const t=a[e];if(!t)return s;a=t}return a||s}getNode(e){const t=document.createElement("div");return t.insertAdjacentHTML("beforeend",this.compile(e).trim()),t.firstChild}}const d=new c('\n    <img\n      src="{% link %}"\n      alt="{% alt %}"\n      class="{% className %}"\n    />\n');class p extends u{constructor(e){super("div",e)}render(){return d.compile({link:this.props.link,alt:this.props.alt,className:this.props.className})}}const _=new c('\n    <button {% disabled %} class="button {% className %}" >{% text %}</button>\n');class m extends u{constructor(e){super("div",e)}render(){const{text:e,className:t,isDisabled:s}=this.props;return _.compile({text:e,className:t,disabled:s?"disabled":""})}}const g=new c('\n  <div \n    data-chatId="{% chatId %}" \n    class="{% activeSelector %} chat-card"\n    >\n    {% chatAvatar %}\n    <div class="chat-card__content">\n      <h2 class="chat-card__title">{% title %}</h2>\n      <p class="chat-card__text">\n        {% text %}\n      </p>\n    </div>\n  </div>\n');class v extends u{constructor(e){super("div",e)}render(){const{chatId:e,text:t,title:s,chatAvatar:n,isActiveChat:a}=this.props,r=a?"chat-card_active":" ";return g.compile({chatAvatar:n.render(),activeSelector:r,title:s,text:t,chatId:e})}}const w=(e,t)=>{e.login=t,localStorage.setItem("login",t)},f=e=>{e.login="",localStorage.removeItem("login")};class b{constructor(){this.ERROR_NEED_METHOD="Need to specify a method",this.METHODS={GET:"GET",POST:"POST",PUT:"PUT"},this.queryStringify=this.queryStringify.bind(this),this.request=this.request.bind(this)}getDeepParams(e,t){return Object.keys(t).reduce((s,n,a,r)=>{const i=t[n];let o=`${e}[${n}]=${i}`;return"object"==typeof i&&(o=this.getDeepParams(`${e}[${n}]`,i)),`${s}${o}${a<r.length-1?"&":""}`},"")}queryStringify(e){if("object"!=typeof e)throw new Error("Data not object");const t=Object.keys(e);return t.reduce((s,n,a)=>{const r=e[n];let i=`${n}=${r}`;return"object"==typeof r&&(i=this.getDeepParams(n,r)),`${s}${i}${a<t.length-1?"&":""}`},"")}get(e,t={}){return this.request(e,Object.assign(Object.assign({},t),{method:this.METHODS.GET}))}post(e,t={}){return this.request(e,Object.assign(Object.assign({},t),{method:this.METHODS.POST}))}put(e,t={}){return this.request(e,Object.assign(Object.assign({},t),{method:this.METHODS.PUT}))}request(e,t={}){const{headers:s={},method:n,body:a,timeout:r=5e3}=t;return new Promise(function(t,i){if(!n)return void i(this.ERROR_NEED_METHOD);const o=new XMLHttpRequest,l=n===this.METHODS.GET;o.open(n,l&&a?`${e}${this.queryStringify(a)}`:e),o.withCredentials=!0,Object.keys(s).forEach(e=>{o.setRequestHeader(e,s[e])}),o.onload=()=>t(o),o.onabort=i,o.onerror=i,o.timeout=r,o.ontimeout=i,l||!a?o.send():o.send(a)}.bind(this))}}class S{constructor(){this._baseUrl="https://ya-praktikum.tech/api/v2",this._http=new b}getResponse(e){return 200===e.status?e:Promise.reject(e)}getResponseWithParse(e){return 200===e.status?JSON.parse(e.response):Promise.reject(e)}}class E extends S{constructor(){super(),this._url=this._baseUrl+"/auth/"}signup(e){const t={headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return this._http.post(this._url+"signup",t).then(e=>this.getResponse(e))}signin(e){const t={headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return this._http.post(this._url+"signin",t).then(e=>this.getResponse(e))}logout(){return this._http.request(this._url+"logout",{headers:{"Content-Type":"application/json"},method:"POST"}).then(e=>this.getResponse(e))}getUserInfo(){return this._http.get(this._url+"user").then(e=>this.getResponseWithParse(e))}}const C=new c('\n  <button class="button header__button {% className %}">{% text %}</button>\n');class y extends u{constructor(e){super("div",e)}render(){return C.compile({text:this.props.text,className:this.props.className})}}const P=new c('\n  <header class="header">\n    <div class="header__logo-link">\n      <div class="header__logo-img"></div>\n      <h1 class="header__title">Simple chat</h1>   \n    </div>\n    <nav class="header__menu">\n      {% buttons %}      \n    </nav>\n  </header>\n');const N=new c('\n    <div class="form__input-wrapper">\n      <input\n      class="input auth__input {% className %}"\n      {% attributes %}\n      name="{% name %}"\n      {% value %}     \n      />\n      <span class="auth__error"></span>\n    </div>\n  ');class x extends u{constructor(e){super("div",e)}render(){const{attributes:e,name:t,className:s="",value:n=" "}=this.props;return N.compile({attributes:e,name:t,value:n,className:s})}}const k=new c('\n  <div class="\n    message \n    {% className %}"\n    >\n      {% avatar %}\n    <div class="message__content">\n      <h3 class="message__sender">{% userName %}</h3>\n      <time class="message__time">\n        {% time %}\n      </time>\n      <p class="message__text">\n        {% text %}\n      </p>\n    </div>    \n  </div>\n');class I extends u{constructor(e){super("div",e)}render(){const{avatar:e,text:t,time:s,isOwn:n,userName:a}=this.props,r=n?"message_reverse":" ";return k.compile({avatar:e,text:t,time:s,className:r,userName:a})}}const M=new c('<h2 class="page-title auth__title">{% text %}</h2>');class L extends u{constructor(e){super("div",e)}render(){return M.compile({className:this.props.className,text:this.props.text})}}const T=new c('\n<span\n  class="auth__server-message {% activeClass %}">\n    {% text %}\n  </span>\n');class V extends u{constructor(e){super("div",e),this.ERR_CLASS_NAME="auth__server-message_show_err",this.MESSAGE_CLASS_NAME="auth__server-message_show_message"}render(){const{text:e,isError:t}=this.props,s=e?t?this.ERR_CLASS_NAME:this.MESSAGE_CLASS_NAME:" ";return T.compile({activeClass:s,text:e})}}const D=new c('\n<section class="popup popup_is-open">\n  <div class="popup__content">\n    <form class="popup__form" name="signin" novalidate>\n      {% titleInput %}\n      {% serverError %}\n      {% buttonSubmit %}\n      {% buttonCancel %}\n    </form>\n  </div>\n</section>\n');class A extends u{constructor(e){super("div",e)}render(){const{titleInput:e,buttonSubmit:t,buttonCancel:s,errorText:n=""}=this.props;return D.compile({titleInput:e,buttonSubmit:t,buttonCancel:s,serverError:new V({text:n,isError:!0}).render()})}}const q=new c('\n<div class="loader {% className %}">\n  <div class="loader__item"></div>\n  <p class="loader__text">Загрузка, подождите...</p>\n</div>\n');class R extends u{constructor(e){super("div",e)}render(){const{isLoad:e}=this.props,t=e?"loader_is-active":" ";return q.compile({className:t})}}const O='\n  <div class="error">\n    <h1 class="error__title">{% errorCode %}</h1>\n    <p class="error__subtitle">{% errorTitle %}</p>\n    <div class="error__img"></div>\n    <a class="link error__link">back to main</a>\n  </div>\n',B=new c(O);const U=new c(O);const j=["Gurnard whitetip reef shark píntano grunter rock","Barbeled houndshark striped burrfish kahawai beluga sturgeon","Whale shark luminous hake minnow golden loach","Chinook salmon, javelin porcupinefish!"," Atlantic herring, dorab mosquitofish loweye","Black sea bass. Lined sole central mudminnow.","kokopu trahira sockeye salmon?"," Remora skilfish golden trout ling longnose","Old World knifefish livebearer bullhead.","Gurnard whitetip reef shark píntano grunter rock","Barbeled houndshark striped burrfish kahawai beluga sturgeon","Whale shark luminous hake minnow golden loach","Chinook salmon, javelin porcupinefish!"," Atlantic herring, dorab mosquitofish loweye","Black sea bass. Lined sole central mudminnow.","kokopu trahira sockeye salmon?"," Remora skilfish golden trout ling longnose","Old World knifefish livebearer bullhead."],F="https://ya-praktikum.tech",$="Authorization error you will be redirected",W="An authorization error occurred",G="Registration error",H="An unexpected error occurred";var z=s(0),Q=s.n(z);const Z=new c('\n    <div class="root">\n      <main class="main-content">\n        <section class="aside-panel">\n          <div class="aside-panel__card-list">\n            <div class="aside-panel__add">+</div>\n            {% chatCards %}\n          </div>\n        </section>\n        <section class="messages-window">\n          <div\n            class="messages-window__start-container {% messagesClassNameStartContainer %}"\n          >\n            <p class="messages-window__start-container-text">\n              select or create a chat to start communicate\n            </p>\n          </div>\n          <div class="messages-window__container {% messagesClassNameContainer %}">\n            <div class="messages-window__list">\n              {% messages %}\n            </div>\n            <div class="control-panel">\n              <form class="control-panel__form">\n                <input\n                  type="text"\n                  class="input control-panel__input"\n                  placeholder="Start to write..."\n                />\n                <button class="control-panel__send-button"></button>\n              </form>\n              </div>\n            </div>\n          </div>\n          {% popup %}\n        </section>\n        {% loader %}\n      </main>\n    </div>\n  '),X=new class extends S{constructor(){super(),this._url=this._baseUrl+"/chats/"}createChat(e){const t={headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return this._http.post(this._url,t).then(e=>this.getResponse(e))}getChats(){return this._http.get(this._url).then(e=>this.getResponseWithParse(e))}avatar(e){const t={body:e};return this._http.put(this._url+"avatar",t).then(e=>this.getResponse(e))}},J=new E;const K=(e,t)=>{if(e.validity.tooShort)t(!0,"Min password length 8 characters");else if(!e.validity.valid){if(!/[A-Z]/g.test(e.value))return void t(!0,"Need two letters in different registers");if(!/[a-z]/g.test(e.value))return void t(!0,"Need two letters in different registers");if(/[\W_]/g.test(e.value))return void t(!0,"Password must contain latin letters and numbers");if(!/[\d]/g.test(e.value))return void t(!0,"Password must contain at least one number")}},Y=(e,t)=>{(e.validity.tooLong||e.validity.tooShort)&&t(!0,"Must be from 2 to 20 characters")},ee=(e,t)=>{e.validity.valid||t(!0,"Incorrect email")},te=(e,t)=>{e.validity.valid||t(!0,"Phone must start with 8 or 7 and have 11 numbs")},se=[{attributes:'\n        type="text"\n        placeholder="login"\n        minlength="2"\n        maxlength="20"\n        required\n      ',name:"login",className:"auth__input_login",handleBlur:Y},{attributes:'\n        type="password"\n        placeholder="password"\n        pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n        minlength="8"\n        autocomplete="on"\n        required\n      ',name:"password",className:"auth__input_password",handleBlur:K}];class ne{constructor(e){this._FIELD_REQUIRED="This is felid required",this._toggleError=(e,t="")=>{const s=event.target.nextElementSibling;e?(s.classList.add("auth__error_active"),s.textContent=t):(s.classList.remove("auth__error_active"),s.textContent=t)},this.handleBlur=()=>{event.target.validity.valueMissing?this._toggleError(!0,this._FIELD_REQUIRED):this._customValidate(event.target,this._toggleError)},this.handleFocus=()=>{this._toggleError(!1)},this._customValidate=e}}class ae{constructor(e,t,s=(()=>!0)){this.formIsValid=()=>{this._form.checkValidity()&&this._customValidator()?this._toggleButton(!0):this._toggleButton(!1)},this._form=e,this._button=t,this._customValidator=s}saveValue(e,t){t[e.name]=e.value}_toggleButton(e){e?this._button.removeAttribute("disabled"):this._button.setAttribute("disabled","true")}}const re=new c('\n  <div class="rot">\n  <main class="main-content">\n    <div class="auth-with-container">\n      <div class="auth">\n        {% title %}\n        <form class="auth__form auth__form_signin">\n          {% inputs %}          \n          {% serverMessage %}\n          {% button %}\n          <a href="#" class="link auth__link auth__link_signin"\n            > {% altText %} </a\n          >\n          </form>          \n        </div>\n      </div>\n      {% loader %}\n    </main>\n  </div>\n  '),ie=new E;const oe=[{attributes:'\n        type="text" \n        placeholder="First name" \n        minlength="2"\n        maxlength="20"\n        required\n        ',className:"auth__input_first-name",name:"first_name",handleBlur:Y},{attributes:'\n        type="text" \n        placeholder="Second name" \n        minlength="2"\n        maxlength="20"\n        required\n        ',className:"auth__input_second-name",name:"second_name",handleBlur:Y},{attributes:'\n        type="email" \n        placeholder="email" \n        pattern="^.{1,}@([-0-9A-Za-z]{1,}\\.){1,3}[-A-Za-z]{2,}$"\n        required\n        ',className:"auth__input_email",name:"email",handleBlur:ee},{attributes:'\n        type="text"\n        placeholder="login" \n        minlength="2"\n        maxlength="20"\n        required\n      ',className:"auth__input_login",name:"login",handleBlur:Y},{attributes:'\n        type="password" \n        placeholder="password" \n        pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n        minlength="8"\n        autocomplete="on"\n        required\n      ',className:"auth__input_password",name:"password",handleBlur:K},{attributes:'\n        type="phone" \n        placeholder="Phone" \n        pattern="^(7|8)\\d{10}$"\n        maxlength="11"\n        autocomplete="on"\n        required\n      ',className:"auth__input_phone",name:"phone",handleBlur:te}],le=new c('\n  <div class="root">\n  <main class="main-content">\n    <div class="auth-with-container">\n      <div class="auth">\n        {% title %}\n        <form class="auth__form auth__form_signup">\n          {% inputs %}                \n        </form>   \n        {% serverMessage %}\n        {% button %}\n        <a href="№" class="link auth__link {% altLinkClassName %}"\n          >{% altText %}</a\n        >         \n      </div>\n    </div>\n  </main>\n  {% loader %}\n  </div>\n  '),he=new E;const ue={userInfo:[{attributes:'\n          type="text" \n          placeholder="First name" \n          minlength="2"\n          maxlength="20"\n          required\n          ',className:"auth__input_user auth__input_user_first-name",name:"first_name",handleBlur:Y},{attributes:'\n          type="text" \n          placeholder="Second name" \n          minlength="2"\n          maxlength="20"\n          required\n          ',className:"auth__input_user auth__input_user_second-name",name:"second_name",handleBlur:Y},{attributes:'\n          type="email" \n          placeholder="email" \n          pattern="^.{1,}@([-0-9A-Za-z]{1,}\\.){1,3}[-A-Za-z]{2,}$"\n          required\n          ',className:"auth__input_user auth__input_user_first-email",name:"email",handleBlur:ee},{attributes:'\n          type="text"\n          placeholder="login" \n          minlength="2"\n          maxlength="20"\n          required\n        ',name:"login",className:"auth__input_user auth__input_user_login",handleBlur:Y},{attributes:'\n          type="text"\n          placeholder="Display name" \n          minlength="2"\n          maxlength="20"\n          required\n        ',className:"auth__input_user auth__input_user_display-name",name:"display_name",handleBlur:Y},{attributes:'\n          type="phone" \n          placeholder="Phone" \n          pattern="^(7|8)\\d{10}$"\n          maxlength="11"\n          autocomplete="on"\n          required\n        ',className:"auth__input_user auth__input_user_phone",name:"phone",handleBlur:te}],avatar:[{attributes:'\n      type="file"\n      required\n    ',name:"avatar",className:"auth__input_avatar"}],password:[{attributes:'\n      type="password"\n      placeholder="old password"\n      pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n      minlength="8"\n      autocomplete="on"\n      required\n    ',name:"oldPassword",className:"auth__input_password auth__input_password_old",handleBlur:K},{attributes:'\n      type="password"\n      placeholder="new password"\n      pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n      minlength="8"\n      autocomplete="on"\n      required\n    ',name:"newPassword",className:"auth__input_password auth__input_password_new"}]};var ce=s(1),de=s.n(ce);const pe=new c('\n  <div class="root">\n    <main class="main-content">\n      <div class="auth-user-settings">\n        {% title %}\n        <div class="auth-user-settings__container">\n            <form \n              class="auth__form auth__form_avatar" \n              novalidate="true"\n            >\n            {% avatar %}\n            {% inputAvatar %}\n            {% avatarServerMessage %}\n            \n            {% buttonAvatar %}\n            </form>\n          <div class="auth auth_user-settings ">\n            <form class="auth__form auth__form_user-info auth_right-margin" novalidate="true">\n              {% inputsUserInfo %}\n              {% userInfoServerMessage %}\n              {% buttonUserInfo %}\n            </form>\n            <form class="auth__form auth__form_password" novalidate="true">\n              {% inputsUserPassword %}  \n              {% passwordServerMessage %}\n              {% buttonPassword %}          \n            </form>\n          </div>\n        </div>\n        <span class="auth__error auth__error_server">Server error</span>      \n      </div>\n      {% loader %}\n  </main>\n</div>\n  '),_e=new E,me=new class extends S{constructor(){super(),this._url=this._baseUrl+"/user/"}avatar(e){const t={body:e};return this._http.put(this._url+"profile/avatar",t).then(e=>this.getResponseWithParse(e))}profile(e){const t={headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return this._http.put(this._url+"profile",t).then(e=>this.getResponseWithParse(e))}changePassword(e){const t={headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return this._http.put(this._url+"password",t).then(e=>this.getResponse(e))}};(e=>{const t=localStorage.getItem("login");!!t&&(e.login=t)})(l),document.querySelector("#header").appendChild((new class extends u{constructor(){super("div",{buttons:null})}logout(){(new E).logout().then(()=>{f(l)}).then(()=>{i.go("#/signin")}).catch(()=>{i.go("#/error")})}headerClickEvents(e){e.preventDefault();const t=/header__button_(.*)/gi.exec(e.target.classList[2])[1];"logout"!==t?i.go("#/"+t):this.logout()}headerLogoClickHeader(){i.go("#/")}setButtons(){l.login?this.setProps({buttons:[new y({text:"Settings",className:"header__button_settings"}),new y({text:l.login+" ❌",className:"header__button_logout"})].map(e=>e.render()).join("")}):this.setProps({buttons:[new y({text:"Signin",className:"header__button_signin"}),new y({text:"Signup",className:"header__button_signup"})].map(e=>e.render()).join("")})}componentDidMount(){this.setButtons(),document.addEventListener("changeAuthorization",()=>{this.setButtons()},!1),this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{this.element.querySelectorAll(".header__button").forEach(e=>{e.onclick=this.headerClickEvents.bind(this)}),this.element.querySelector(".header__logo-link").onclick=this.headerLogoClickHeader})}render(){const{buttons:e}=this.props;return P.compile({buttons:e})}}).getContent()),i.useProtect("#/",class extends u{constructor(){super("div",{chatCards:null,message:new I({avatar:new p({link:Q.a,alt:"User avatar",className:"message__avatar"}),text:"Why didn't he come and talk to me himself?"}).render(),messages:"",popup:!1,isLoad:!1}),this.inputElement,this.sendButton,this.popupInputValue,this.chatsCard,this.chats,this.activeChatId,this.messages=[],this.userAvatar,this.userName,this.chatListContainer,this.scrollTopChats,this.handleInput=this.handleInput.bind(this),this.handleClickSendMessage=this.handleClickSendMessage.bind(this),this.handleClickSendMessage=this.handleClickSendMessage.bind(this),this.handleGetActiveChat=this.handleGetActiveChat.bind(this),this.handleClosePopup=this.handleClosePopup.bind(this),this.handleCreateChat=this.handleCreateChat.bind(this),this.handleLoadAvatar=this.handleLoadAvatar.bind(this),this.handleOnChangePopupInput=this.handleOnChangePopupInput.bind(this),this.getUserDataFromServer=this.getUserDataFromServer.bind(this)}_popupTemplate(e,t){return new A({titleInput:new x({attributes:e?'\n    type="text"\n    placeholder="Chat title"\n    minlength="2"\n    maxlength="20"\n    required\n  ':'\n    type="file"\n    required\n  ',name:e?"title":"avatar",className:"popup__input "+(e?"popup__input_create":"popup__input_load")}).render(),buttonSubmit:new m({text:e?"Create":"Load",className:"popup__button  "+(e?"popup__button_create":"popup__button_load"),disabled:!0}).render(),buttonCancel:new m({text:"Cancel",className:"popup__button popup__button_cancel",disabled:!1}).render(),errorText:t}).render()}_placeholderChatTemplate(e){return`<p class="aside-panel__empty">${e}</p>`}parseDate(e){return`${e.toLocaleString("ru",{hour:"numeric",month:"long",minute:"numeric",day:"numeric"})}, ${e.getFullYear()}`}getUserDataFromServer(){J.getUserInfo().then(({avatar:e,display_name:t})=>{this.userAvatar=`${F}${e}`,this.userName=t})}initChats(){return this.setProps({isLoad:!0}),X.getChats().then(e=>{this.chats=e}).then(()=>{this.setProps({chatCards:this.getChatCards()})}).then(()=>{this.getUserDataFromServer()}).catch(e=>{const{status:t}=e;500===t&&i.go("#/error"),401===t&&(f(l),i.go("#/signin")),this.setProps({chatCards:this._placeholderChatTemplate("An error occurred while loading the chat")})}).finally(()=>{this.setProps({isLoad:!1})})}_setLoader(e){return new R({isLoad:e}).render()}getChatCards(){return this.chats.map(({id:e,title:t,avatar:s})=>new v({chatAvatar:new p({link:s?`${F}${s}`:Q.a,alt:t,className:"chat-card__img"}),title:t,text:"Sometime the text will appear here...",chatId:e,isActiveChat:this.activeChatId==e}).render()).join("")}getMessages(){const e=((e,t)=>{const s=e-.5+Math.random()*(t-e+1);return Math.round(s)})(0,16);return j.map((t,s)=>{if(s>=e){const e=s%2;return new I({avatar:new p({link:s%2?this.userAvatar:Q.a,alt:e?this.userName:"SuperMegaGiper",className:"message__avatar"}).render(),text:t,time:this.parseDate(new Date),isOwn:!!e,userName:e?this.userName:"SuperMegaGiper"}).render()}}).join("")}handleInput(){const e=this.sendButton,t=this.inputElement.value,s=t.match(/\s*/)[0];t&&t!==s?e.classList.add("control-panel__send-button_active"):e.classList.remove("control-panel__send-button_active")}sendMessage(){event.preventDefault();const e=this.element.querySelector(".messages-window__list"),t=this.inputElement,s=t.value;t.parentNode.reset(),this.sendButton.classList.remove("control-panel__send-button_active");const n=new I({avatar:new p({link:this.userAvatar,alt:l.login,className:"message__avatar"}).render(),text:s,time:this.parseDate(new Date),isOwn:!0,userName:this.userName}).render();e.insertAdjacentHTML("beforeend",n.trim()),e.scrollTop=Math.ceil(e.scrollHeight-e.clientHeight)}handleClickSendMessage(){this.sendMessage()}handleKeyDownSendMessage(e){"Enter"===e.code&&this.sendMessage()}handleGetPopup(e){this.setProps({popup:this._popupTemplate(e)})}handleClosePopup(){this.setProps({popup:!1})}handleCreateChat(e){e.preventDefault(),this.setProps({isLoad:!0}),X.createChat({title:this.popupInputValue}).then(()=>{this.chats=[...this.chats,{title:this.popupInputValue}]}).then(()=>{this.initChats().then(()=>{this.setProps({chatCards:this.getChatCards()})})}).then(()=>{this.setProps({popup:!1})}).catch(e=>{const{status:t}=e;if(500===t&&i.go("#/error"),401===t)return this.setProps({popup:this._popupTemplate(!0,$)}),void setTimeout(()=>{f(l),i.go("#/signin")},2e3);this.setProps({popup:this._popupTemplate(!0,"An error occurred when creating the chat")})}).finally(()=>{this.setProps({isLoad:!1})})}handleLoadAvatar(e){e.preventDefault();const t=this.element.querySelector(".popup__input_load"),s=new FormData;s.append("avatar",t.files[0]),s.append("chatId",this.activeChatId),this.setProps({isLoad:!0}),X.avatar(s).then(()=>{this.setProps({chatCards:this.getChatCards()})}).then(()=>this.handleClosePopup()).then(()=>this.initChats()).catch(e=>{const{status:t}=e;if(500===t&&i.go("#/error"),401===t)return this.setProps({popup:this._popupTemplate(!1,$)}),void setTimeout(()=>{f(l),i.go("#/signin")},2e3);this.setProps({popup:this._popupTemplate(!1,"An error occurred when uploading the image")})}).finally(()=>{this.setProps({isLoad:!1})})}handleOnChangePopupInput(e){this.popupInputValue=e.target.value}handleGetActiveChat(e){const t=e.currentTarget;t.classList.contains("chat-card")&&(this.scrollTopChats=this.chatListContainer.scrollTop,this.activeChatId=t.dataset.chatid,this.setProps({chatCards:this.getChatCards(),messages:this.getMessages()}))}componentDidMount(){document.addEventListener("changeAuthorization",()=>{l.login||(this.chats=[],this.setProps({messages:""}),this.setProps({chatCards:""}))},!1),this.initChats(),this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:e,handleInput:t,handleClickSendMessage:s,props:n,handleGetActiveChat:a,handleGetPopup:r,scrollTopChats:i,handleClosePopup:o,handleCreateChat:l,handleLoadAvatar:h,handleOnChangePopupInput:u}=this,c=e.querySelector(".aside-panel__add"),d=e.querySelector(".messages-window__list");if(this.chatListContainer=e.querySelector(".aside-panel__card-list"),this.chatsCard=e.querySelectorAll(".chat-card"),this.inputElement=e.querySelector(".control-panel__input"),this.sendButton=e.querySelector(".control-panel__send-button"),this.inputElement.oninput=t,this.sendButton.onclick=s,this.sendButton.onkeydown=s,this.chatsCard.forEach(e=>{const t=e.querySelector(".chat-card__img");e.onclick=a,t.onclick=r.bind(this,!1)}),d.scrollTop=Math.ceil(d.scrollHeight-d.clientHeight),this.chatListContainer.scrollTop=i,c.onclick=r.bind(this,!0),n.popup){const t=e.querySelector(".popup"),s=t.querySelector(".popup__button_cancel"),n=t.querySelector("button"),a=t.querySelector(".popup__input_create");s.onclick=o,n.onclick=n.classList.contains("popup__button_create")?l:h,a&&(a.oninput=u)}})}show(){super.show(),this.initChats(),this.setProps({popup:!1})}render(){const{messages:e,handleInput:t,handleClickButton:s,popup:n,chatCards:a,isLoad:r}=this.props,i=e?" messages-window__start-container_hidden":" ",o=e?" ":"messages-window__container_hidden";return Z.compile({chatCards:a||this._placeholderChatTemplate("It's still quiet here..."),messages:e,handleInput:t,handleClickButton:s,popup:n||" ",messagesClassNameContainer:o,messagesClassNameStartContainer:i,loader:this._setLoader(r)})}}).useDefault("#/signin",class extends u{constructor(){super("div",{title:new L({text:"Signup"}).render(),serverMessage:new V({text:""}).render(),button:new m({text:"Signin",className:"auth__button",isDisabled:!0}).render(),altLinkClassName:"auth__link_signin",altText:"don't have an account?",isLoad:!1}),this.inputsValue,this.validate=[],this.form,this.isServerMessageSet=!1,this._clearError=this._clearError.bind(this)}_getInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],se.map(({name:e,attributes:t,handleBlur:s,className:n})=>{const a=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new ne(s)),new x({attributes:t,name:e,value:a,className:n}).render()}).join("")}_getInputsValue(){this.form.saveValue(event.target,this.inputsValue)}_setLoader(e){return new R({isLoad:e}).render()}_clearError(){this.isServerMessageSet&&this.setProps({serverMessage:new V({text:"",isError:!1}).render()}),this.isServerMessageSet=!1}handleSigninClick(){event.preventDefault(),this.setProps({isLoad:!0}),ie.signin(this.inputsValue).then(()=>{w(l,this.inputsValue.login)}).then(()=>{i.go("#/")}).catch(e=>{const{status:t,responseText:s=W}=e;500===t&&i.go("#/error"),this.setProps({serverMessage:new V({text:s,isError:!0}).render()}),this.isServerMessageSet=!0}).finally(()=>{this.inputsValue={},this.setProps({isLoad:!1})})}goSignup(){event.preventDefault(),i.go("#/signup")}show(){super.show(),this._clearError(),this.eventBus().emit(this.EVENTS.FLOW_CDU)}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:e,validate:t,_clearError:s,_getInputsValue:n,handleSigninClick:a,goSignup:r}=this,i=e.querySelector("form"),o=e.querySelector(".auth__button"),l=e.querySelectorAll(".input"),h=e.querySelector(".auth__link_signin");this.form=new ae(i,o),l.forEach((e,n)=>{e.onfocus=t[n].handleFocus,e.onblur=t[n].handleBlur,e.onclick=s}),i.onchange=n.bind(this),i.oninput=this.form.formIsValid,o.onclick=a.bind(this),h.onclick=r})}render(){const{title:e,serverMessage:t,isLoad:s,button:n,altLinkClassName:a,altText:r}=this.props;return re.compile({title:e,inputs:this._getInputs(),serverMessage:t,button:n,altLinkClassName:a,altText:r,loader:this._setLoader(s)})}}).use("#/signup",class extends u{constructor(){super("div",{title:new L({text:"Signup"}),serverMessage:new V({text:"",isError:!1}).render(),button:new m({text:"Signup",className:"auth__button",isDisabled:!0}),altLinkClassName:"auth__link_signup",altText:"already have an account?",isLoad:!1}),this.inputsValue,this.validate=[],this.form,this.isServerMessageSet=!1}_getInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],oe.map(({name:e,attributes:t,handleBlur:s,className:n})=>{const a=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new ne(s)),new x({attributes:t,name:e,value:a,className:n}).render()}).join("")}_clearError(){this.isServerMessageSet&&this.setProps({serverMessage:new V({text:"",isError:!1}).render()}),this.isServerMessageSet=!1}_setLoader(e){return new R({isLoad:e}).render()}handleSigninClick(e){e.preventDefault(),this.setProps({isLoad:!0}),he.signup(this.inputsValue).then(()=>{w(l,this.inputsValue.login)}).then(()=>{i.go("#/")}).catch(e=>{const{status:t,responseText:s=G}=e;500===t&&i.go("#/error"),this.setProps({serverMessage:new V({text:s,isError:!0}).render()}),this.isServerMessageSet=!0}).finally(()=>{this.inputsValue={},this.setProps({isLoad:!1})})}_getInputsValue(e){this.form.saveValue(e.target,this.inputsValue)}goSignin(){event.preventDefault(),i.go("#/signin")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:e,validate:t,_clearError:s,_getInputsValue:n,handleSigninClick:a,goSignin:r}=this,i=e.querySelector("form"),o=e.querySelector(".auth__button"),l=e.querySelectorAll(".input"),h=e.querySelector(".auth__link_signup");this.form=new ae(i,o),l.forEach((e,n)=>{e.onfocus=t[n].handleFocus,e.onblur=t[n].handleBlur,e.onclick=s.bind(this)}),i.onchange=n.bind(this),i.oninput=this.form.formIsValid,o.onclick=a.bind(this),h.onclick=r})}show(){super.show(),this._clearError(),this.eventBus().emit(this.EVENTS.FLOW_CDU)}render(){const{title:e,serverMessage:t,isLoad:s,button:n,altLinkClassName:a,altText:r}=this.props;return le.compile({title:e.render(),inputs:this._getInputs(),serverMessage:t,button:n.render(),altLinkClassName:a,altText:r,loader:this._setLoader(s)})}}).use("#/settings",class extends u{constructor(){super("div",{title:new L({text:"User settings"}).render(),avatar:new p({link:de.a,alt:"User avatar",className:"auth-user-settings__img"}).render(),avatarServerMessage:new V({text:"",isError:!1}).render(),userInfoServerMessage:new V({text:"",isError:!1}).render(),passwordServerMessage:new V({text:"",isError:!1}).render(),inputAvatar:new x({attributes:ue.avatar[0].attributes,name:ue.avatar[0].name,className:"auth__input auth__input_avatar"}).render(),buttonAvatar:new m({text:"Load avatar",className:"auth__button auth__button_avatar",isDisabled:!0}).render(),buttonUserInfo:new m({text:"Save user info",className:"auth__button auth__button_user-setting",isDisabled:!0}).render(),buttonPassword:new m({text:"Change",className:"auth__button auth__button_password",isDisabled:!0}).render(),isLoad:!1}),this.inputsValueInfo,this.inputsValuePassword={},this.validateInfo=[],this.validatePassword=[],this.formInfo,this.formPassword,this.isServerMessageSet=!1,this._errCatcher=this._errCatcher.bind(this),this._clearErrors=this._clearErrors.bind(this),this._getInputsValueInfo=this._getInputsValueInfo.bind(this),this.handleChangeUserInfo=this.handleChangeUserInfo.bind(this),this._getInputsValuePassword=this._getInputsValuePassword.bind(this),this.handleChangePassword=this.handleChangePassword.bind(this),this.handleLoadAvatar=this.handleLoadAvatar.bind(this),this.handleBlurPassword=this.handleBlurPassword.bind(this),this.customValidatePassword=this.customValidatePassword.bind(this)}_setServerMessage(e,t="",s=!1){this.setProps({[e]:new V({text:t,isError:s}).render()}),t&&(this.isServerMessageSet=!0)}_errCatcher(e,t){const{status:s,responseText:n=H}=e;if(500===s&&i.go("#/error"),401===s)return this._setServerMessage(t,$,!0),void setTimeout(()=>{f(l),i.go("#/signin")},2e3);this._setServerMessage(t,n,!0)}_setLoader(e){return new R({isLoad:e}).render()}_clearErrors(){this.isServerMessageSet&&(this._setServerMessage("avatarServerMessage"),this._setServerMessage("userInfoServerMessage"),this._setServerMessage("passwordServerMessage"),this.isServerMessageSet=!1)}getUserInfoInputs(){return this.inputsValueInfo=this.inputsValueInfo||{},this.validateInfo=this.validateInfo||[],ue.userInfo.map(({name:e,attributes:t,className:s,handleBlur:n})=>{const a=this.inputsValueInfo[e]?`value="${this.inputsValueInfo[e]}"`:" ";return this.validateInfo.push(new ne(n)),new x({attributes:t,name:e,value:a,className:s}).render()}).join("")}getPasswordInputs(){return this.inputsValuePassword=this.inputsValuePassword||{},this.validatePassword=this.validatePassword||[],ue.password.map(({name:e,attributes:t,className:s})=>{const n=this.inputsValuePassword[e]?`value="${this.inputsValuePassword[e]}"`:" ";return this.validatePassword.push(new ne(this.handleBlurPassword)),new x({attributes:t,name:e,value:n,className:s}).render()}).join("")}_getInputsValueInfo(e){this.formInfo.saveValue(e.target,this.inputsValueInfo)}_getInputsValuePassword(e){this.formPassword.saveValue(e.target,this.inputsValuePassword)}customValidatePassword(){const{newPassword:e,oldPassword:t}=this.inputsValuePassword;return e!==t}handleBlurPassword(e,t){const{newPassword:s,oldPassword:n}=this.inputsValuePassword;K(e,t),s!==n||t(!0,"Passwords must not match")}handleChangePassword(){event.preventDefault(),this.setProps({isLoad:!0}),me.changePassword(this.inputsValuePassword).then(()=>{this.inputsValuePassword={}}).then(()=>{this._setServerMessage("passwordServerMessage","Success!",!1)}).catch(e=>{this._errCatcher(e,"passwordServerMessage")}).finally(()=>{this.inputsValuePassword={},this.setProps({isLoad:!1})})}handleChangeUserInfo(){event.preventDefault(),this.setProps({isLoad:!0}),me.profile(this.inputsValueInfo).then(()=>this._setServerMessage("userInfoServerMessage","Success!",!1)).catch(e=>{this._errCatcher(e,"userInfoServerMessage")}).finally(()=>{this.setProps({isLoad:!1})})}handleLoadAvatar(){event.preventDefault();const e=this.element.querySelector(".auth__input_avatar"),t=new FormData;t.append("avatar",e.files[0]),this.setProps({isLoad:!0}),me.avatar(t).then(({avatar:e,login:t})=>{this.setProps({avatar:new p({link:`${F}${e}`,alt:t,className:"auth-user-settings__img"}).render()})}).catch(e=>{this._errCatcher(e,"avatarServerMessage")}).finally(()=>{this.setProps({isLoad:!1})})}componentDidMount(){this.setProps({isLoad:!0}),_e.getUserInfo().then(({first_name:e,second_name:t,email:s,login:n,phone:a,avatar:r,display_name:i})=>(this.inputsValueInfo={first_name:e,second_name:t,email:s,login:n,phone:a,display_name:i},{avatar:r,login:n})).then(({avatar:e,login:t})=>{e?this.setProps({avatar:new p({link:`${F}${e}`,alt:t,className:"auth-user-settings__img"}).render()}):this.eventBus().emit(this.EVENTS.FLOW_CDU)}).catch(e=>{this._errCatcher(e,"userInfoServerMessage")}).finally(()=>{this.setProps({isLoad:!1})}),this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:e,validateInfo:t,validatePassword:s,customValidatePassword:n,_getInputsValueInfo:a,_clearErrors:r,handleChangeUserInfo:i,_getInputsValuePassword:o,handleChangePassword:l,handleLoadAvatar:h}=this,u=e.querySelector(".auth__form_user-info"),c=e.querySelector(".auth__button_user-setting"),d=e.querySelectorAll(".auth__input_user"),p=e.querySelector(".auth__form_password"),_=e.querySelector(".auth__button_password"),m=e.querySelectorAll(".auth__input_password"),g=e.querySelector(".auth__form_avatar"),v=e.querySelector(".auth__button_avatar"),w=e.querySelector(".auth__input_avatar"),f=new ae(g,v);this.formInfo=new ae(u,c),d.forEach((e,s)=>{e.onfocus=t[s].handleFocus,e.onblur=t[s].handleBlur,e.onclick=r}),this.formPassword=new ae(p,_,n),m.forEach((e,t)=>{e.onfocus=s[t].handleFocus,e.onblur=s[t].handleBlur,e.onclick=r}),u.oninput=this.formInfo.formIsValid,u.onchange=a,c.onclick=i,p.oninput=this.formPassword.formIsValid,p.onchange=o,_.onclick=l,g.onchange=f.formIsValid,v.onclick=h,w.onclick=r})}show(){super.show(),this._clearErrors()}render(){const{title:e,avatar:t,inputAvatar:s,buttonAvatar:n,buttonUserInfo:a,buttonPassword:r,userInfoServerMessage:i,passwordServerMessage:o,avatarServerMessage:l,isLoad:h}=this.props;return pe.compile({title:e,avatar:t,inputAvatar:s,buttonAvatar:n,inputsUserInfo:this.getUserInfoInputs(),buttonUserInfo:a,inputsUserPassword:this.getPasswordInputs(),buttonPassword:r,userInfoServerMessage:i,passwordServerMessage:o,avatarServerMessage:l,loader:this._setLoader(h)})}}).use("#/error",class extends u{constructor(){super("div")}goMain(){i.go("#/")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{this.element.querySelector(".error__link").onclick=this.goMain.bind(this)})}render(){return B.compile({errorCode:"Error 500",errorTitle:"Problems with server"})}}).use("#/notfound",class extends u{constructor(){super("div")}goMain(){i.go("#/")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{this.element.querySelector(".error__link").onclick=this.goMain.bind(this)})}render(){return U.compile({errorCode:"Error 404",errorTitle:"Not found"})}}).start();document.addEventListener("changeAuthorization",(function(){if(!l.login)return i.go("#/signin"),void(i.isProtect=!0);i.isProtect=!1,i.go("#/")}),!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2ltYWdlcy9jaGF0LWNhcmRfX2ltZy5wbmciLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2ltYWdlcy9leGFtcGxlLXVzZXItaW1nLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9yb3V0aW5nL1JvdXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL2lzRXF1YWwvaXNFcXVhbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9yZW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWwvcm91dGluZy9Sb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3JvdXRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvYXV0aG9yaXphdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9FdmVudC1idXMvRXZlbnQtYnVzLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL0Jsb2NrL0Jsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL1NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUvc2ltcGxlLXRlbXBsYXRlLWVuZ2luZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9BdmF0YXIvdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQXZhdGFyL0F2YXRhci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b24vdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9DaGF0Q2FyZC90ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9DaGF0Q2FyZC9DaGF0Q2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9hdXRoSGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9IVFRQL0hUVFAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL0FQSS9iYXNlQXBpLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9BUEkvYXV0aEFwaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyQnV0dG9uL3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXJCdXR0b24vSGVhZGVyQnV0dG9uLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0hlYWRlci90ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0lucHV0L3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0lucHV0L0lucHV0LnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL01lc3NhZ2UvdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWVzc2FnZS9NZXNzYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL1RpdGxlL3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL1RpdGxlL1RpdGxlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL1NlcnZlck1lc3NhZ2UvdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvU2VydmVyTWVzc2FnZS9TZXJ2ZXJNZXNzYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL1BvcHVwL3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL1BvcHVwL1BvcHVwLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0xvYWRlci90ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Mb2FkZXIvTG9hZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9FcnJvclBhZ2VzL2Vycm9yLXRlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9FcnJvclBhZ2VzL1NlcnZlckVycm9yLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9FcnJvclBhZ2VzL05vdEZvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy90ZXN0TWVzc2FnZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvTWFpblBhZ2UvTWFpblBhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3BhZ2VzL01haW5QYWdlL21haW4tcGFnZS10ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvQVBJL2NoYXRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3BhZ2VzL1NpZ25pblBhZ2Uvc2lnbmluLXRlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy91dGlsL3ZhbGlkYXRvcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3BhZ2VzL1NpZ25pblBhZ2UvaW5wdXRQcm9wcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9JbnB1dC9JbnB1dFZhbGlkYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9mb3JtLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9TaWduaW5QYWdlL1NpZ25pblBhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3BhZ2VzL1NpZ251cFBhZ2UvaW5wdXRQcm9wcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvU2lnbnVwUGFnZS9TaWdudXBQYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9TaWdudXBQYWdlL3NpZ251cC10ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnZXMvVXNlclNldHRpbmdzL2lucHV0c1Byb3BzLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9Vc2VyU2V0dGluZ3MvVXNlclNldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9wYWdlcy9Vc2VyU2V0dGluZ3MvdXNlci1zZXR0aW5ncy10ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvQVBJL3VzZUFwaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWwvSFRUUC9yYW5kb21OdW1iZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJwYXRobmFtZSIsInZpZXciLCJwcm9wcyIsInRoaXMiLCJfcGF0aG5hbWUiLCJfYmxvY2tDbGFzcyIsIl9ibG9jayIsIl9wcm9wcyIsIm1hdGNoIiwicmVuZGVyIiwiaGlkZSIsImxocyIsInJocyIsInF1ZXJ5IiwiYmxvY2siLCJyb290IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJnZXRDb250ZW50Iiwicm9vdFF1ZXJ5Iiwic2hvdyIsIl9oYW5kbGVIYXNoQ2hhbmdlIiwicGF0aCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsIl9vblJvdXRlIiwiX19pbnN0YW5jZSIsInJvdXRlcyIsImhpc3RvcnkiLCJfY3VycmVudFJvdXRlIiwiX3Jvb3RRdWVyeSIsIl9kZWZhdWx0UGF0aCIsImlzUHJvdGVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyb3V0ZSIsInB1c2giLCJwcm90ZWN0Iiwib25wb3BzdGF0ZSIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImdldFJvdXRlIiwiZ28iLCJsZWF2ZSIsInB1c2hTdGF0ZSIsImJhY2siLCJmb3J3YXJkIiwiZmluZCIsInJvdXRlciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjaGFuZ2VFdmVudCIsIkV2ZW50IiwiYXV0aG9yaXphdGlvbiIsIlByb3h5IiwibG9naW4iLCJ0YXJnZXQiLCJwcm9wIiwic2V0Iiwic2V0SXRlbSIsImRpc3BhdGNoRXZlbnQiLCJFdmVudEJ1cyIsImxpc3RlbmVycyIsImNhbGxiYWNrIiwiRXJyb3IiLCJmaWx0ZXIiLCJsaXN0ZW5lciIsImFyZ3MiLCJmb3JFYWNoIiwidGFnTmFtZSIsIkVWRU5UUyIsIklOSVQiLCJGTE9XX0NETSIsIkZMT1dfQ0RVIiwiRkxPV19SRU5ERVIiLCJfZWxlbWVudCIsIl9tZXRhIiwic2V0UHJvcHMiLCJuZXh0UHJvcHMiLCJsYXN0QWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJhc3NpZ24iLCJfbWFrZVByb3BzUHJveHkiLCJldmVudEJ1cyIsImVtaXQiLCJfcmVnaXN0ZXJFdmVudHMiLCJvbiIsImluaXQiLCJfY29tcG9uZW50RGlkTW91bnQiLCJfcmVuZGVyIiwiX2NvbXBvbmVudERpZFVwZGF0ZSIsIl9jcmVhdGVEb2N1bWVudEVsZW1lbnQiLCJfY3JlYXRlUmVzb3VyY2VzIiwiY29tcG9uZW50RGlkTW91bnQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaW5uZXJIVE1MIiwiX3NldExhc3RGb2N1c0lucHV0IiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJmb2N1cyIsInN0eWxlIiwiZGlzcGxheSIsIlNpbXBsZVRlbXBsYXRlRW5naW5lIiwidGVtcGxhdGUiLCJfVEVNUExBVEVfUkVHRVhQIiwiX1JFR0VYUF9DVFgiLCJfdGVtcGxhdGUiLCJjdHgiLCJfY29tcGlsZVRlbXBsYXRlIiwidG1wbCIsInJlZ0V4cCIsImV4ZWMiLCJ0bXBsVmFsdWUiLCJ0cmltIiwiZGF0YSIsInJlcGxhY2UiLCJSZWdFeHAiLCJrZXlDdHgiLCJvYmoiLCJkZWZhdWx0VmFsdWUiLCJrZXlzIiwic3BsaXQiLCJyZXN1bHQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJjb21waWxlIiwiZmlyc3RDaGlsZCIsInN1cGVyIiwibGluayIsImFsdCIsInRleHQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWQiLCJjaGF0Q2FyZCIsImNoYXRJZCIsInRpdGxlIiwiY2hhdEF2YXRhciIsImlzQWN0aXZlQ2hhdCIsImFjdGl2ZVNlbGVjdG9yIiwic2V0TG9naW4iLCJsb2dvdXRIZWxwZXIiLCJyZW1vdmVJdGVtIiwiSFRUUCIsIkVSUk9SX05FRURfTUVUSE9EIiwiTUVUSE9EUyIsIkdFVCIsIlBPU1QiLCJQVVQiLCJxdWVyeVN0cmluZ2lmeSIsInJlcXVlc3QiLCJrZXlOYW1lIiwicmVkdWNlIiwiaW5kZXgiLCJhcnIiLCJwYXJhbXMiLCJnZXREZWVwUGFyYW1zIiwibGVuZ3RoIiwicGFyYW0iLCJ1cmwiLCJvcHRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImlzR2V0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInNlbmQiLCJfYmFzZVVybCIsIl9odHRwIiwicmVzIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2UiLCJfdXJsIiwic3RyaW5naWZ5IiwicG9zdCIsInRoZW4iLCJnZXRSZXNwb25zZSIsImdldFJlc3BvbnNlV2l0aFBhcnNlIiwidG1wbEJ1dHRvbiIsImF0dHJpYnV0ZXMiLCJhdmF0YXIiLCJ0aW1lIiwiaXNPd24iLCJ1c2VyTmFtZSIsInNlcnZlck1lc3NhZ2UiLCJFUlJfQ0xBU1NfTkFNRSIsIk1FU1NBR0VfQ0xBU1NfTkFNRSIsImlzRXJyb3IiLCJhY3RpdmVDbGFzcyIsInRpdGxlSW5wdXQiLCJidXR0b25TdWJtaXQiLCJidXR0b25DYW5jZWwiLCJlcnJvclRleHQiLCJzZXJ2ZXJFcnJvciIsImxvYWRlciIsImlzTG9hZCIsInRlbXBsYXRlRW5naW5lIiwidGVzdE1lc3NhZ2VzIiwiQVZBVEFSX1VSTCIsIkFVVEhfRVJSX0FORF9SRURJUkVDVCIsIkFVVEhfRVJSIiwiUkVHSVNUUkFUSU9OX0VSUk9SIiwiVU5FWFBFQ1RFRF9FUlJPUiIsIm1haW5QYWdlIiwiY2hhdEFwaSIsInB1dCIsImF1dGhBcGkiLCJwYXNzd29yZFZhbGlkYXRvciIsInZhbGlkaXR5IiwidG9vU2hvcnQiLCJ2YWxpZCIsInRlc3QiLCJzaW1wbGVUZXh0VmFsaWRhdG9yIiwidG9vTG9uZyIsImVtYWlsVmFsaWRhdG9yIiwicGhvbmVWYWxpZGF0b3IiLCJpbnB1dHNQcm9wcyIsImhhbmRsZUJsdXIiLCJJbnB1dFZhbGlkYXRlIiwiY3VzdG9tVmFsaWRhdGUiLCJfRklFTERfUkVRVUlSRUQiLCJfdG9nZ2xlRXJyb3IiLCJpc0FjdGl2ZSIsIm1lc3NhZ2UiLCJlcnIiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJhZGQiLCJ0ZXh0Q29udGVudCIsInJlbW92ZSIsInZhbHVlTWlzc2luZyIsIl9jdXN0b21WYWxpZGF0ZSIsImhhbmRsZUZvY3VzIiwiRm9ybSIsImZvcm0iLCJidXR0b24iLCJjdXN0b21WYWxpZGF0b3IiLCJmb3JtSXNWYWxpZCIsIl9mb3JtIiwiY2hlY2tWYWxpZGl0eSIsIl9jdXN0b21WYWxpZGF0b3IiLCJfdG9nZ2xlQnV0dG9uIiwiX2J1dHRvbiIsImlucHV0IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2lnbmluUGFnZVRlbXBsYXRlIiwic2lnbnVwVGVtcGxhdGVQYWdlIiwidXNlckluZm8iLCJwYXNzd29yZCIsInVzZXJTZXR0aW5nc1RlbXBsYXRlUGFnZSIsInVzZXJBcGkiLCJpc0FscmVhZHlMb2dpbiIsImJ1dHRvbnMiLCJsb2dvdXQiLCJjYXRjaCIsInByZXZlbnREZWZhdWx0IiwibWFwIiwiaXRlbSIsImpvaW4iLCJzZXRCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsIm9uY2xpY2siLCJoZWFkZXJDbGlja0V2ZW50cyIsImhlYWRlckxvZ29DbGlja0hlYWRlciIsInVzZVByb3RlY3QiLCJjaGF0Q2FyZHMiLCJtZXNzYWdlcyIsInBvcHVwIiwiaW5wdXRFbGVtZW50Iiwic2VuZEJ1dHRvbiIsInBvcHVwSW5wdXRWYWx1ZSIsImNoYXRzQ2FyZCIsImNoYXRzIiwiYWN0aXZlQ2hhdElkIiwidXNlckF2YXRhciIsImNoYXRMaXN0Q29udGFpbmVyIiwic2Nyb2xsVG9wQ2hhdHMiLCJoYW5kbGVJbnB1dCIsImhhbmRsZUNsaWNrU2VuZE1lc3NhZ2UiLCJoYW5kbGVHZXRBY3RpdmVDaGF0IiwiaGFuZGxlQ2xvc2VQb3B1cCIsImhhbmRsZUNyZWF0ZUNoYXQiLCJoYW5kbGVMb2FkQXZhdGFyIiwiaGFuZGxlT25DaGFuZ2VQb3B1cElucHV0IiwiZ2V0VXNlckRhdGFGcm9tU2VydmVyIiwiaXNDcmVhdGVDaGF0IiwiZGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiaG91ciIsIm1vbnRoIiwibWludXRlIiwiZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRVc2VySW5mbyIsImRpc3BsYXlfbmFtZSIsImdldENoYXRzIiwiZ2V0Q2hhdENhcmRzIiwiX3BsYWNlaG9sZGVyQ2hhdFRlbXBsYXRlIiwiZmluYWxseSIsImlkIiwicmFuZG9tIiwibWluIiwibWF4IiwicmFuZCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbU51bWJlciIsImlzRXZlbiIsInBhcnNlRGF0ZSIsIkRhdGUiLCJzcGFjZXMiLCJtZXNzYWdlc0xpc3QiLCJwYXJlbnROb2RlIiwicmVzZXQiLCJzY3JvbGxUb3AiLCJjZWlsIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2VuZE1lc3NhZ2UiLCJjb2RlIiwiX3BvcHVwVGVtcGxhdGUiLCJjcmVhdGVDaGF0IiwiaW5pdENoYXRzIiwic2V0VGltZW91dCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJmaWxlcyIsImN1cnJlbnRFbGVtZW50IiwiY29udGFpbnMiLCJkYXRhc2V0IiwiY2hhdGlkIiwiZ2V0TWVzc2FnZXMiLCJoYW5kbGVHZXRQb3B1cCIsImFkZENoYXRCdXR0b24iLCJtZXNzYWdlc0NvbnRhaW5lciIsIm9uaW5wdXQiLCJvbmtleWRvd24iLCJwb3B1cENhbmNlbEJ1dHRvbiIsInN1Ym1pdEJ1dHRvbiIsImhhbmRsZUNsaWNrQnV0dG9uIiwibWVzc2FnZXNDbGFzc05hbWVTdGFydENvbnRhaW5lciIsIm1lc3NhZ2VzQ2xhc3NOYW1lQ29udGFpbmVyIiwiX3NldExvYWRlciIsInVzZURlZmF1bHQiLCJhbHRMaW5rQ2xhc3NOYW1lIiwiYWx0VGV4dCIsImlucHV0c1ZhbHVlIiwidmFsaWRhdGUiLCJpc1NlcnZlck1lc3NhZ2VTZXQiLCJfY2xlYXJFcnJvciIsInNhdmVWYWx1ZSIsInNpZ25pbiIsInJlc3BvbnNlVGV4dCIsIl9nZXRJbnB1dHNWYWx1ZSIsImhhbmRsZVNpZ25pbkNsaWNrIiwiZ29TaWdudXAiLCJmb3JtQ29udGFpbmVyIiwiZm9ybUJ1dHRvbiIsImlucHV0cyIsImFsdEJ1dHRvbiIsIm9uZm9jdXMiLCJvbmJsdXIiLCJvbmNoYW5nZSIsIl9nZXRJbnB1dHMiLCJ1c2UiLCJzaWdudXAiLCJnb1NpZ25pbiIsImF2YXRhclNlcnZlck1lc3NhZ2UiLCJ1c2VySW5mb1NlcnZlck1lc3NhZ2UiLCJwYXNzd29yZFNlcnZlck1lc3NhZ2UiLCJpbnB1dEF2YXRhciIsImJ1dHRvbkF2YXRhciIsImJ1dHRvblVzZXJJbmZvIiwiYnV0dG9uUGFzc3dvcmQiLCJpbnB1dHNWYWx1ZUluZm8iLCJpbnB1dHNWYWx1ZVBhc3N3b3JkIiwidmFsaWRhdGVJbmZvIiwidmFsaWRhdGVQYXNzd29yZCIsImZvcm1JbmZvIiwiZm9ybVBhc3N3b3JkIiwiX2VyckNhdGNoZXIiLCJfY2xlYXJFcnJvcnMiLCJfZ2V0SW5wdXRzVmFsdWVJbmZvIiwiaGFuZGxlQ2hhbmdlVXNlckluZm8iLCJfZ2V0SW5wdXRzVmFsdWVQYXNzd29yZCIsImhhbmRsZUNoYW5nZVBhc3N3b3JkIiwiaGFuZGxlQmx1clBhc3N3b3JkIiwiY3VzdG9tVmFsaWRhdGVQYXNzd29yZCIsImVycm9yUHJvcHNOYW1lIiwiX3NldFNlcnZlck1lc3NhZ2UiLCJuZXdQYXNzd29yZCIsIm9sZFBhc3N3b3JkIiwiY2hhbmdlUGFzc3dvcmQiLCJwcm9maWxlIiwiZmlyc3RfbmFtZSIsInNlY29uZF9uYW1lIiwiZW1haWwiLCJwaG9uZSIsImZvcm1Db250YWluZXJJbmZvIiwiZm9ybUJ1dHRvbkluZm8iLCJpbnB1dHNVc2VySW5mbyIsImZvcm1Db250YWluZXJQYXNzd29yZCIsImZvcm1CdXR0b25QYXNzd29yZCIsImlucHV0c1Bhc3N3b3JkIiwiZm9ybUNvbnRhaW5lckF2YXRhciIsImZvcm1CdXR0b25BdmF0YXIiLCJmb3JtQXZhdGFyIiwiZ2V0VXNlckluZm9JbnB1dHMiLCJpbnB1dHNVc2VyUGFzc3dvcmQiLCJnZXRQYXNzd29yZElucHV0cyIsImdvTWFpbiIsImVycm9yQ29kZSIsImVycm9yVGl0bGUiLCJzdGFydCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVW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eEIsY0FDRTNQLE1BQU0sT0FHUixTQUNFLEVBQU94RixHQUFHLE1BR1osb0JBQ0V4QyxLQUFLaUYsV0FBV0csR0FBR3BGLEtBQUtvRSxPQUFPSSxZQUFhLEtBQ1p4RSxLQUFLaUcsUUFBUW5GLGNBQWMsZ0JBQ3BEcVEsUUFBVW5SLEtBQUt5YSxPQUFPcGIsS0FBS1csUUFJcEMsU0FDRSxPQUFPa04sRUFBZXBGLFFBQVEsQ0FDNUI0UyxVQUFXLFlBQ1hDLFdBQVksNEJvQkhmaEQsSUFBSSxhbkJoQlAsY0FBdUIsRUFDckIsY0FDRTNQLE1BQU0sT0FHUixTQUNFLEVBQU94RixHQUFHLE1BR1osb0JBQ0V4QyxLQUFLaUYsV0FBV0csR0FBR3BGLEtBQUtvRSxPQUFPSSxZQUFhLEtBQ1p4RSxLQUFLaUcsUUFBUW5GLGNBQWMsZ0JBQ3BEcVEsUUFBVW5SLEtBQUt5YSxPQUFPcGIsS0FBS1csUUFJcEMsU0FDRSxPQUFPLEVBQWU4SCxRQUFRLENBQzVCNFMsVUFBVyxZQUNYQyxXQUFZLGlCbUJGZkMsUUFZSC9aLFNBQVNtQixpQkFBaUIsdUJBVkwsV0FDbkIsSUFBS21CLEVBQWNFLE1BR2pCLE9BRkEsRUFBT2IsR0FBRyxpQkFDVixFQUFPVCxXQUFZLEdBR3JCLEVBQU9BLFdBQVksRUFDbkIsRUFBT1MsR0FBRyxTQUdtRCIsImZpbGUiOiJtYWluLjllMzdiODM0ZWU0ZGVjYTViMmEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2NoYXQtY2FyZF9faW1nLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9leGFtcGxlLXVzZXItaW1nLmpwZ1wiOyIsImltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICcuLi9pc0VxdWFsL2lzRXF1YWwnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICcuLi9yZW5kZXInO1xyXG5pbXBvcnQgeyBJQmxvY2sgfSBmcm9tICcuLi9CbG9jay9CbG9jayc7XHJcblxyXG50eXBlIHJvdXRlUHJvcHMgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG50eXBlIGJsb2NrQ29uc3RydWN0b3IgPSBuZXcgKFxyXG4gIHRhZ05hbWU/OiBzdHJpbmcsXHJcbiAgcHJvcHM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IGJvb2xlYW4gfVxyXG4pID0+IElCbG9jaztcclxuXHJcbmludGVyZmFjZSBJUm91dGUge1xyXG4gIF9wYXRobmFtZTogc3RyaW5nO1xyXG4gIF9ibG9ja0NsYXNzOiBibG9ja0NvbnN0cnVjdG9yO1xyXG4gIF9ibG9jazogSUJsb2NrO1xyXG4gIF9wcm9wczogcm91dGVQcm9wcztcclxuXHJcbiAgbmF2aWdhdGUocGF0aG5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgbGVhdmUoKTogdm9pZDtcclxuICBtYXRjaChwYXRobmFtZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICByZW5kZXIoKTogdm9pZDtcclxufVxyXG5cclxuY2xhc3MgUm91dGUgaW1wbGVtZW50cyBJUm91dGUge1xyXG4gIF9wYXRobmFtZTogc3RyaW5nO1xyXG4gIF9ibG9ja0NsYXNzOiBibG9ja0NvbnN0cnVjdG9yO1xyXG4gIF9ibG9jazogSUJsb2NrO1xyXG4gIF9wcm9wczogcm91dGVQcm9wcztcclxuICBjb25zdHJ1Y3RvcihwYXRobmFtZTogc3RyaW5nLCB2aWV3OiBibG9ja0NvbnN0cnVjdG9yLCBwcm9wczogcm91dGVQcm9wcykge1xyXG4gICAgdGhpcy5fcGF0aG5hbWUgPSBwYXRobmFtZTtcclxuICAgIHRoaXMuX2Jsb2NrQ2xhc3MgPSB2aWV3O1xyXG4gICAgdGhpcy5fYmxvY2sgPSBudWxsO1xyXG4gICAgdGhpcy5fcHJvcHMgPSBwcm9wcztcclxuICB9XHJcblxyXG4gIG5hdmlnYXRlKHBhdGhuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm1hdGNoKHBhdGhuYW1lKSkge1xyXG4gICAgICB0aGlzLl9wYXRobmFtZSA9IHBhdGhuYW1lO1xyXG4gICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGVhdmUoKSB7XHJcbiAgICBpZiAodGhpcy5fYmxvY2spIHtcclxuICAgICAgdGhpcy5fYmxvY2suaGlkZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbWF0Y2gocGF0aG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGlzRXF1YWwocGF0aG5hbWUsIHRoaXMuX3BhdGhuYW1lKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fYmxvY2spIHtcclxuICAgICAgdGhpcy5fYmxvY2sgPSBuZXcgdGhpcy5fYmxvY2tDbGFzcygpO1xyXG4gICAgICByZW5kZXIodGhpcy5fcHJvcHMucm9vdFF1ZXJ5LCB0aGlzLl9ibG9jayk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9ibG9jay5zaG93KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBSb3V0ZSwgSVJvdXRlLCBibG9ja0NvbnN0cnVjdG9yIH07XHJcbiIsImV4cG9ydCBjb25zdCBpc0VxdWFsID0gKGxoczoge30sIHJoczoge30pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGxocyA9PT0gcmhzO1xufTtcbiIsImltcG9ydCB7IElCbG9jayB9IGZyb20gJy4vQmxvY2svQmxvY2snO1xyXG5cclxuY29uc3QgcmVuZGVyID0gKHF1ZXJ5OiBzdHJpbmcsIGJsb2NrOiBJQmxvY2spOiBFbGVtZW50ID0+IHtcclxuICBjb25zdCByb290ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihxdWVyeSk7XHJcblxyXG4gIHJvb3QuYXBwZW5kQ2hpbGQoYmxvY2suZ2V0Q29udGVudCgpKTtcclxuICByZXR1cm4gcm9vdDtcclxufTtcclxuXHJcbmV4cG9ydCB7IHJlbmRlciB9O1xyXG4iLCJpbXBvcnQgeyBSb3V0ZSwgSVJvdXRlLCBibG9ja0NvbnN0cnVjdG9yIH0gZnJvbSAnLi9Sb3V0ZSc7XHJcblxyXG5pbnRlcmZhY2UgSVJvdXRlciB7XHJcbiAgcm9vdFF1ZXJ5OiBzdHJpbmc7XHJcbiAgcm91dGVzOiBJUm91dGVbXTtcclxuICBoaXN0b3J5OiBIaXN0b3J5O1xyXG4gIF9jdXJyZW50Um91dGU6IElSb3V0ZTtcclxuICBfcm9vdFF1ZXJ5OiBzdHJpbmc7XHJcbiAgX19pbnN0YW5jZTogSVJvdXRlcjtcclxuICBpc1Byb3RlY3Q6IGJvb2xlYW47XHJcbiAgX2RlZmF1bHRQYXRoOiBzdHJpbmc7XHJcbiAgX2hhbmRsZUhhc2hDaGFuZ2UoKTogdm9pZDtcclxuICB1c2UocGF0aG5hbWU6IHN0cmluZywgYmxvY2s6IGJsb2NrQ29uc3RydWN0b3IpOiB0aGlzO1xyXG4gIHVzZURlZmF1bHQocGF0aG5hbWU6IHN0cmluZywgYmxvY2s6IGJsb2NrQ29uc3RydWN0b3IpOiB0aGlzO1xyXG4gIHVzZVByb3RlY3QocGF0aG5hbWU6IHN0cmluZywgYmxvY2s6IGJsb2NrQ29uc3RydWN0b3IpOiB0aGlzO1xyXG4gIHN0YXJ0KCk6IHZvaWQ7XHJcbiAgX29uUm91dGUocGF0aG5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgZ28ocGF0aG5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgYmFjaygpOiB2b2lkO1xyXG4gIGZvcndhcmQoKTogdm9pZDtcclxuICBnZXRSb3V0ZShwYXRobmFtZTogc3RyaW5nKTogSVJvdXRlO1xyXG59XHJcblxyXG5jbGFzcyBSb3V0ZXIgaW1wbGVtZW50cyBJUm91dGVyIHtcclxuICByb290UXVlcnk6IHN0cmluZztcclxuICByb3V0ZXM6IElSb3V0ZVtdO1xyXG4gIGhpc3Rvcnk6IEhpc3Rvcnk7XHJcbiAgX2N1cnJlbnRSb3V0ZTogSVJvdXRlO1xyXG4gIF9yb290UXVlcnk6IHN0cmluZztcclxuICBfX2luc3RhbmNlOiBJUm91dGVyO1xyXG4gIGlzUHJvdGVjdDogYm9vbGVhbjtcclxuICBfZGVmYXVsdFBhdGg6IHN0cmluZztcclxuICBzdGF0aWMgX19pbnN0YW5jZTogSVJvdXRlcjtcclxuICBjb25zdHJ1Y3Rvcihyb290UXVlcnk/OiBzdHJpbmcpIHtcclxuICAgIGlmIChSb3V0ZXIuX19pbnN0YW5jZSkge1xyXG4gICAgICByZXR1cm4gUm91dGVyLl9faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yb3V0ZXMgPSBbXTtcclxuICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xyXG4gICAgdGhpcy5fY3VycmVudFJvdXRlID0gbnVsbDtcclxuICAgIHRoaXMuX3Jvb3RRdWVyeSA9IHJvb3RRdWVyeTtcclxuICAgIHRoaXMuX2RlZmF1bHRQYXRoO1xyXG4gICAgdGhpcy5pc1Byb3RlY3QgPSB0cnVlO1xyXG5cclxuICAgIFJvdXRlci5fX2luc3RhbmNlID0gdGhpcztcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMuX2hhbmRsZUhhc2hDaGFuZ2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUhhc2hDaGFuZ2UgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICB0aGlzLl9vblJvdXRlKHBhdGgpO1xyXG4gIH07XHJcblxyXG4gIHVzZShwYXRobmFtZTogc3RyaW5nLCBibG9jazogYmxvY2tDb25zdHJ1Y3Rvcik6IHRoaXMge1xyXG4gICAgY29uc3Qgcm91dGUgPSBuZXcgUm91dGUocGF0aG5hbWUsIGJsb2NrLCB7IHJvb3RRdWVyeTogdGhpcy5fcm9vdFF1ZXJ5IH0pO1xyXG4gICAgdGhpcy5yb3V0ZXMucHVzaChyb3V0ZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHVzZURlZmF1bHQocGF0aG5hbWU6IHN0cmluZywgYmxvY2s6IGJsb2NrQ29uc3RydWN0b3IpOiB0aGlzIHtcclxuICAgIGNvbnN0IHJvdXRlID0gbmV3IFJvdXRlKHBhdGhuYW1lLCBibG9jaywge1xyXG4gICAgICByb290UXVlcnk6IHRoaXMuX3Jvb3RRdWVyeSxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fZGVmYXVsdFBhdGggPSBwYXRobmFtZTtcclxuICAgIHRoaXMucm91dGVzLnB1c2gocm91dGUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICB1c2VQcm90ZWN0KHBhdGhuYW1lOiBzdHJpbmcsIGJsb2NrOiBibG9ja0NvbnN0cnVjdG9yKTogdGhpcyB7XHJcbiAgICBjb25zdCByb3V0ZSA9IG5ldyBSb3V0ZShwYXRobmFtZSwgYmxvY2ssIHtcclxuICAgICAgcm9vdFF1ZXJ5OiB0aGlzLl9yb290UXVlcnksXHJcbiAgICAgIHByb3RlY3Q6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIHRoaXMucm91dGVzLnB1c2gocm91dGUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzdGFydCgpOiB2b2lkIHtcclxuICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gKChldmVudDogYW55KTogdm9pZCA9PiB7XHJcbiAgICAgIHRoaXMuX29uUm91dGUoZXZlbnQuY3VycmVudFRhcmdldC5sb2NhdGlvbi5oYXNoKTtcclxuICAgIH0pLmJpbmQodGhpcyk7XHJcblxyXG4gICAgdGhpcy5fb25Sb3V0ZSh3aW5kb3cubG9jYXRpb24uaGFzaCk7XHJcbiAgfVxyXG5cclxuICBfb25Sb3V0ZShwYXRobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCByb3V0ZSA9IHRoaXMuZ2V0Um91dGUocGF0aG5hbWUpO1xyXG4gICAgaWYgKCFyb3V0ZSkge1xyXG4gICAgICB0aGlzLmdvKCcjL25vdGZvdW5kJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChyb3V0ZS5fcHJvcHMucHJvdGVjdCAmJiB0aGlzLmlzUHJvdGVjdCkge1xyXG4gICAgICB0aGlzLmdvKHRoaXMuX2RlZmF1bHRQYXRoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9jdXJyZW50Um91dGUgJiYgdGhpcy5fY3VycmVudFJvdXRlICE9PSByb3V0ZSkge1xyXG4gICAgICB0aGlzLl9jdXJyZW50Um91dGUubGVhdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jdXJyZW50Um91dGUgPSByb3V0ZTtcclxuICAgIHJvdXRlLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgZ28ocGF0aG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHBhdGhuYW1lKTtcclxuICAgIHRoaXMuX29uUm91dGUocGF0aG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgYmFjaygpOiB2b2lkIHtcclxuICAgIHRoaXMuaGlzdG9yeS5iYWNrKCk7XHJcbiAgfVxyXG5cclxuICBmb3J3YXJkKCk6IHZvaWQge1xyXG4gICAgdGhpcy5oaXN0b3J5LmZvcndhcmQoKTtcclxuICB9XHJcblxyXG4gIGdldFJvdXRlKHBhdGhuYW1lOiBzdHJpbmcpOiBJUm91dGUge1xyXG4gICAgcmV0dXJuIHRoaXMucm91dGVzLmZpbmQoKHJvdXRlKSA9PiB7XHJcbiAgICAgIHJldHVybiByb3V0ZS5fcGF0aG5hbWUubWF0Y2gocGF0aG5hbWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBSb3V0ZXIsIElSb3V0ZXIgfTtcclxuIiwiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnLi91dGlsL3JvdXRpbmcvUm91dGVyJztcclxuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXIoJyNtYWluLWNvbnRlbnQnKTtcclxucm91dGVyLmlzUHJvdGVjdCA9ICFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9naW4nKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcclxuIiwiY29uc3QgY2hhbmdlRXZlbnQgPSBuZXcgRXZlbnQoJ2NoYW5nZUF1dGhvcml6YXRpb24nKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhdXRob3JpemF0aW9uID0gbmV3IFByb3h5KFxyXG4gIHtcclxuICAgIGxvZ2luOiAnJyxcclxuICB9LFxyXG4gIHtcclxuICAgIGdldCh0YXJnZXQ6IGFueSwgcHJvcDogYW55KSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W3Byb3BdO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgc2V0KHRhcmdldCwgcHJvcDogYW55LCB2YWx1ZSkge1xyXG4gICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvZ2luJywgdmFsdWUpO1xyXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gIH1cclxuKTtcclxuIiwiaW50ZXJmYWNlIElFdmVudEJ1cyB7XHJcbiAgbGlzdGVuZXJzOiB7IFtrZXk6IHN0cmluZ106IEZ1bmN0aW9uW10gfTtcclxuXHJcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZDtcclxuICBvZmYoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZDtcclxuICBlbWl0KGV2ZW50OiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZCB8IHVua25vd247XHJcbn1cclxuXHJcbmNsYXNzIEV2ZW50QnVzIGltcGxlbWVudHMgSUV2ZW50QnVzIHtcclxuICBsaXN0ZW5lcnM6IHsgW2tleTogc3RyaW5nXTogRnVuY3Rpb25bXSB9O1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgb2ZmKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGDQndC10YIg0YHQvtCx0YvRgtC40Y86ICR7ZXZlbnR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdLmZpbHRlcigobGlzdGVuZXIpID0+IGxpc3RlbmVyICE9PSBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBlbWl0KGV2ZW50OiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYNCd0LXRgiDRgdC+0LHRi9GC0LjRjzogJHtldmVudH1gKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEV2ZW50QnVzLCBJRXZlbnRCdXMgfTtcclxuIiwiaW1wb3J0IHsgRXZlbnRCdXMsIElFdmVudEJ1cyB9IGZyb20gJy4uL0V2ZW50LWJ1cy9FdmVudC1idXMnO1xyXG5cclxudHlwZSBwcm9wc09iamVjdCA9IHtcclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgSUJsb2NrIHtcclxuICBFVkVOVFM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gIF9tZXRhOiB7IHRhZ05hbWU6IHN0cmluZzsgcHJvcHM6IHByb3BzT2JqZWN0IH07XHJcbiAgcHJvcHM6IHByb3BzT2JqZWN0O1xyXG4gIGxhc3RBY3RpdmVFbGVtZW50OiBFbGVtZW50O1xyXG4gIGV2ZW50QnVzKCk6IElFdmVudEJ1cztcclxuXHJcbiAgX3JlZ2lzdGVyRXZlbnRzKGV2ZW50QnVzOiBJRXZlbnRCdXMpOiB2b2lkO1xyXG4gIF9jcmVhdGVSZXNvdXJjZXMoKTogdm9pZDtcclxuICBpbml0KCk6IHZvaWQ7XHJcbiAgX2NvbXBvbmVudERpZE1vdW50KCk6IHZvaWQ7XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZDtcclxuICBfY29tcG9uZW50RGlkVXBkYXRlKG9sZFByb3BzOiBwcm9wc09iamVjdCwgbmV3UHJvcHM6IHByb3BzT2JqZWN0KTogdm9pZDtcclxuICBjb21wb25lbnREaWRVcGRhdGUoKTogYm9vbGVhbjtcclxuICBzZXRQcm9wcyhuZXh0UHJvcHM6IHByb3BzT2JqZWN0KTogdm9pZDtcclxuICBfcmVuZGVyKCk6IHZvaWQ7XHJcbiAgcmVuZGVyKCk6IHN0cmluZztcclxuICBnZXRDb250ZW50KCk6IEVsZW1lbnQ7XHJcbiAgX21ha2VQcm9wc1Byb3h5KHByb3BzOiBwcm9wc09iamVjdCk6IHByb3BzT2JqZWN0O1xyXG4gIF9jcmVhdGVEb2N1bWVudEVsZW1lbnQodGFnTmFtZTogc3RyaW5nKTogSFRNTEVsZW1lbnQ7XHJcbiAgc2hvdygpOiB2b2lkO1xyXG4gIGhpZGUoKTogdm9pZDtcclxufVxyXG5cclxuY2xhc3MgQmxvY2sgaW1wbGVtZW50cyBJQmxvY2sge1xyXG4gIEVWRU5UUzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcclxuICAgIElOSVQ6ICdpbml0JyxcclxuICAgIEZMT1dfQ0RNOiAnZmxvdzpjb21wb25lbnQtZGlkLW1vdW50JyxcclxuICAgIEZMT1dfQ0RVOiAnZmxvdzpjb21wb25lbnQtZGlkLXVwZGF0ZScsXHJcbiAgICBGTE9XX1JFTkRFUjogJ2Zsb3c6cmVuZGVyJyxcclxuICB9O1xyXG5cclxuICBfZWxlbWVudDogSFRNTEVsZW1lbnQgPSBudWxsO1xyXG4gIGxhc3RBY3RpdmVFbGVtZW50OiBFbGVtZW50O1xyXG4gIF9tZXRhOiB7IHRhZ05hbWU6IHN0cmluZzsgcHJvcHM6IHByb3BzT2JqZWN0IH0gPSBudWxsO1xyXG5cclxuICBwcm9wczogcHJvcHNPYmplY3Q7XHJcbiAgZXZlbnRCdXM6ICgpID0+IElFdmVudEJ1cztcclxuXHJcbiAgY29uc3RydWN0b3IodGFnTmFtZSA9ICdkaXYnLCBwcm9wczogcHJvcHNPYmplY3QgPSB7fSkge1xyXG4gICAgY29uc3QgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcclxuICAgIHRoaXMuX21ldGEgPSB7XHJcbiAgICAgIHRhZ05hbWUsXHJcbiAgICAgIHByb3BzLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnByb3BzID0gdGhpcy5fbWFrZVByb3BzUHJveHkocHJvcHMpO1xyXG4gICAgdGhpcy5sYXN0QWN0aXZlRWxlbWVudDtcclxuXHJcbiAgICB0aGlzLmV2ZW50QnVzID0gKCk6IElFdmVudEJ1cyA9PiBldmVudEJ1cztcclxuICAgIHRoaXMuX3JlZ2lzdGVyRXZlbnRzKGV2ZW50QnVzKTtcclxuICAgIGV2ZW50QnVzLmVtaXQodGhpcy5FVkVOVFMuSU5JVCk7XHJcbiAgICB0aGlzLnNldFByb3BzID0gdGhpcy5zZXRQcm9wcy5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgX3JlZ2lzdGVyRXZlbnRzKGV2ZW50QnVzOiBJRXZlbnRCdXMpOiB2b2lkIHtcclxuICAgIGV2ZW50QnVzLm9uKHRoaXMuRVZFTlRTLklOSVQsIHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcclxuICAgIGV2ZW50QnVzLm9uKHRoaXMuRVZFTlRTLkZMT1dfQ0RNLCB0aGlzLl9jb21wb25lbnREaWRNb3VudC5iaW5kKHRoaXMpKTtcclxuICAgIGV2ZW50QnVzLm9uKHRoaXMuRVZFTlRTLkZMT1dfUkVOREVSLCB0aGlzLl9yZW5kZXIuYmluZCh0aGlzKSk7XHJcbiAgICBldmVudEJ1cy5vbih0aGlzLkVWRU5UUy5GTE9XX0NEVSwgdGhpcy5fY29tcG9uZW50RGlkVXBkYXRlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZVJlc291cmNlcygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgdGFnTmFtZSB9ID0gdGhpcy5fbWV0YTtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb2N1bWVudEVsZW1lbnQodGFnTmFtZSk7XHJcbiAgfVxyXG5cclxuICBpbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY3JlYXRlUmVzb3VyY2VzKCk7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdCh0aGlzLkVWRU5UUy5GTE9XX0NETSk7XHJcbiAgfVxyXG5cclxuICBfY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbXBvbmVudERpZE1vdW50KCk7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdCh0aGlzLkVWRU5UUy5GTE9XX1JFTkRFUik7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHt9XHJcblxyXG4gIF9jb21wb25lbnREaWRVcGRhdGUob2xkUHJvcHM6IHByb3BzT2JqZWN0LCBuZXdQcm9wczogcHJvcHNPYmplY3QpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcclxuICAgIGlmICghcmVzcG9uc2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdCh0aGlzLkVWRU5UUy5GTE9XX1JFTkRFUik7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldFByb3BzID0gKG5leHRQcm9wczogcHJvcHNPYmplY3QpOiB2b2lkID0+IHtcclxuICAgIGlmICghbmV4dFByb3BzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubGFzdEFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xyXG4gIH07XHJcblxyXG4gIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3JlbmRlcigpOiB2b2lkIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5yZW5kZXIoKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gYmxvY2s7XHJcbiAgICB0aGlzLl9zZXRMYXN0Rm9jdXNJbnB1dCgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IGFueSB7fVxyXG5cclxuICBnZXRDb250ZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfbWFrZVByb3BzUHJveHkgPSAocHJvcHM6IHByb3BzT2JqZWN0KTogcHJvcHNPYmplY3QgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm94eShwcm9wcywge1xyXG4gICAgICBnZXQodGFyZ2V0OiBwcm9wc09iamVjdCwgcHJvcDogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXRbcHJvcF07XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmJpbmQodGFyZ2V0KSA6IHZhbHVlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgc2V0OiAodGFyZ2V0OiBhbnksIHByb3A6IHN0cmluZyB8IG51bWJlciwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuZXZlbnRCdXMoKS5lbWl0KHRoaXMuRVZFTlRTLkZMT1dfQ0RVLCB7IC4uLnRhcmdldCB9LCB0YXJnZXQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9LFxyXG4gICAgICBkZWxldGVQcm9wZXJ0eSgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjY2VzcycpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgX2NyZWF0ZURvY3VtZW50RWxlbWVudCh0YWdOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuICB9XHJcblxyXG4gIF9zZXRMYXN0Rm9jdXNJbnB1dCgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmxhc3RBY3RpdmVFbGVtZW50O1xyXG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NMaXN0WzJdO1xyXG4gICAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y2xhc3NOYW1lfWApIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmZvY3VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzaG93KCk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRDb250ZW50KCkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgfVxyXG5cclxuICBoaWRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRDb250ZW50KCkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJsb2NrLCBJQmxvY2ssIHByb3BzT2JqZWN0IH07XHJcbiIsInR5cGUgb2JqZWN0S2V5U3RyaW5nTnVtYmVyID0ge1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufTtcclxuXHJcbmludGVyZmFjZSBJU2ltcGxlVGVtcGxhdGVFbmdpbmUge1xyXG4gIF9URU1QTEFURV9SRUdFWFA6IFJlZ0V4cDtcclxuICBfUkVHRVhQX0NUWDogUmVnRXhwO1xyXG4gIF90ZW1wbGF0ZTogc3RyaW5nO1xyXG5cclxuICBjb21waWxlKGN0eD86IG9iamVjdEtleVN0cmluZ051bWJlciwgY2xhc3NOYW1lPzogc3RyaW5nKTogc3RyaW5nO1xyXG4gIF9jb21waWxlVGVtcGxhdGUoY3R4Pzogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKTogc3RyaW5nO1xyXG4gIGdldChcclxuICAgIG9iajogb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG4gICAgcGF0aDogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgYm9vbGVhbiB8IEZ1bmN0aW9uXHJcbiAgKTogc3RyaW5nIHwgYm9vbGVhbiB8IEZ1bmN0aW9uO1xyXG4gIGdldE5vZGUoY3R4OiBvYmplY3RLZXlTdHJpbmdOdW1iZXIpOiBDaGlsZE5vZGUgfCBIVE1MRWxlbWVudDtcclxufVxyXG5cclxuY2xhc3MgU2ltcGxlVGVtcGxhdGVFbmdpbmUgaW1wbGVtZW50cyBJU2ltcGxlVGVtcGxhdGVFbmdpbmUge1xyXG4gIF9URU1QTEFURV9SRUdFWFAgPSAvXFx7XFwlKC4qPylcXCVcXH0vZ2k7XHJcbiAgX1JFR0VYUF9DVFggPSAvXFwoXFwpXFwoXFwlKC4qPylcXCVcXCkvZ2k7XHJcbiAgX3RlbXBsYXRlOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3RlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgfVxyXG5cclxuICBjb21waWxlKGN0eD86IG9iamVjdEtleVN0cmluZ051bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCBodG1sID0gdGhpcy5fY29tcGlsZVRlbXBsYXRlKGN0eCk7XHJcbiAgICByZXR1cm4gaHRtbDtcclxuICB9XHJcblxyXG4gIF9jb21waWxlVGVtcGxhdGUoY3R4OiBvYmplY3RLZXlTdHJpbmdOdW1iZXIpIHtcclxuICAgIGxldCB0bXBsID0gdGhpcy5fdGVtcGxhdGU7XHJcbiAgICBsZXQga2V5ID0gbnVsbDtcclxuICAgIGNvbnN0IHJlZ0V4cCA9IHRoaXMuX1RFTVBMQVRFX1JFR0VYUDtcclxuXHJcbiAgICB3aGlsZSAoKGtleSA9IHJlZ0V4cC5leGVjKHRtcGwpKSkge1xyXG4gICAgICBpZiAoa2V5WzFdKSB7XHJcbiAgICAgICAgY29uc3QgdG1wbFZhbHVlOiBhbnkgPSBrZXlbMV0udHJpbSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHRoaXMuZ2V0KGN0eCwgdG1wbFZhbHVlKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHdpbmRvd1t0bXBsVmFsdWVdID0gZGF0YTtcclxuICAgICAgICAgIHRtcGwgPSB0bXBsLnJlcGxhY2UobmV3IFJlZ0V4cChrZXlbMF0sICdnaScpLCBgd2luZG93LiR7dG1wbFZhbHVlfSgpYCk7XHJcblxyXG4gICAgICAgICAgY29uc3Qga2V5Q3R4ID0gdGhpcy5fUkVHRVhQX0NUWC5leGVjKHRtcGwpO1xyXG4gICAgICAgICAgaWYgKGtleUN0eCkge1xyXG4gICAgICAgICAgICB0bXBsID0gdG1wbC5yZXBsYWNlKGtleUN0eFswXSwgYC4ke2tleUN0eFsxXS50cmltKCl9KClgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdG1wbCA9IHRtcGwucmVwbGFjZShuZXcgUmVnRXhwKGtleVswXSwgJ2dpJyksIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRtcGw7XHJcbiAgfVxyXG5cclxuICBnZXQoXHJcbiAgICBvYmo6IG9iamVjdEtleVN0cmluZ051bWJlcixcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZyB8IGJvb2xlYW4gfCBGdW5jdGlvblxyXG4gICk6IHN0cmluZyB8IGJvb2xlYW4gfCBGdW5jdGlvbiB7XHJcbiAgICBjb25zdCBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgbGV0IHJlc3VsdDogYW55ID0gb2JqO1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHJlc3VsdFtrZXldO1xyXG5cclxuICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0IHx8IGRlZmF1bHRWYWx1ZTtcclxuICB9XHJcblxyXG4gIGdldE5vZGUoY3R4Pzogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICBlbGVtZW50Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5jb21waWxlKGN0eCkudHJpbSgpKTtcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudC5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgU2ltcGxlVGVtcGxhdGVFbmdpbmUsIG9iamVjdEtleVN0cmluZ051bWJlciB9O1xyXG4iLCJjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgIDxpbWdcclxuICAgICAgc3JjPVwieyUgbGluayAlfVwiXHJcbiAgICAgIGFsdD1cInslIGFsdCAlfVwiXHJcbiAgICAgIGNsYXNzPVwieyUgY2xhc3NOYW1lICV9XCJcclxuICAgIC8+XHJcbmA7XHJcblxyXG5leHBvcnQgeyB0ZW1wbGF0ZSB9O1xyXG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gJy4uLy4uL3V0aWwvQmxvY2svQmxvY2snO1xyXG5pbXBvcnQge1xyXG4gIFNpbXBsZVRlbXBsYXRlRW5naW5lLFxyXG4gIG9iamVjdEtleVN0cmluZ051bWJlcixcclxufSBmcm9tICcuLi8uLi91dGlsL1NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUvc2ltcGxlLXRlbXBsYXRlLWVuZ2luZSc7XHJcblxyXG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xyXG5cclxuY29uc3QgYXZhdGFyID0gbmV3IFNpbXBsZVRlbXBsYXRlRW5naW5lKHRlbXBsYXRlKTtcclxuXHJcbmNsYXNzIEF2YXRhciBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKSB7XHJcbiAgICBzdXBlcignZGl2JywgcHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYXZhdGFyLmNvbXBpbGUoe1xyXG4gICAgICBsaW5rOiB0aGlzLnByb3BzLmxpbmssXHJcbiAgICAgIGFsdDogdGhpcy5wcm9wcy5hbHQsXHJcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEF2YXRhciB9O1xyXG4iLCJjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgIDxidXR0b24geyUgZGlzYWJsZWQgJX0gY2xhc3M9XCJidXR0b24geyUgY2xhc3NOYW1lICV9XCIgPnslIHRleHQgJX08L2J1dHRvbj5cclxuYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBidXR0b24gPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5cclxuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQmxvY2sge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBvYmplY3RLZXlTdHJpbmdOdW1iZXIpIHtcclxuICAgIHN1cGVyKCdkaXYnLCBwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgdGV4dCwgY2xhc3NOYW1lLCBpc0Rpc2FibGVkIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIGJ1dHRvbi5jb21waWxlKHtcclxuICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXHJcbiAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICcnLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCdXR0b24gfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgPGRpdiBcclxuICAgIGRhdGEtY2hhdElkPVwieyUgY2hhdElkICV9XCIgXHJcbiAgICBjbGFzcz1cInslIGFjdGl2ZVNlbGVjdG9yICV9IGNoYXQtY2FyZFwiXHJcbiAgICA+XHJcbiAgICB7JSBjaGF0QXZhdGFyICV9XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2hhdC1jYXJkX19jb250ZW50XCI+XHJcbiAgICAgIDxoMiBjbGFzcz1cImNoYXQtY2FyZF9fdGl0bGVcIj57JSB0aXRsZSAlfTwvaDI+XHJcbiAgICAgIDxwIGNsYXNzPVwiY2hhdC1jYXJkX190ZXh0XCI+XHJcbiAgICAgICAgeyUgdGV4dCAlfVxyXG4gICAgICA8L3A+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBjaGF0Q2FyZCA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBDaGF0Q2FyZCBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKSB7XHJcbiAgICBzdXBlcignZGl2JywgcHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IGNoYXRJZCwgdGV4dCwgdGl0bGUsIGNoYXRBdmF0YXIsIGlzQWN0aXZlQ2hhdCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IGFjdGl2ZVNlbGVjdG9yID0gaXNBY3RpdmVDaGF0ID8gJ2NoYXQtY2FyZF9hY3RpdmUnIDogJyAnO1xyXG4gICAgcmV0dXJuIGNoYXRDYXJkLmNvbXBpbGUoe1xyXG4gICAgICBjaGF0QXZhdGFyOiBjaGF0QXZhdGFyLnJlbmRlcigpLFxyXG4gICAgICBhY3RpdmVTZWxlY3RvcixcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIHRleHQsXHJcbiAgICAgIGNoYXRJZCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ2hhdENhcmQgfTtcclxuIiwiY29uc3QgTE9HSU4gPSAnbG9naW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzQWxyZWFkeUxvZ2luID0gKG9iajogYW55KSA9PiB7XHJcbiAgY29uc3QgbmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKExPR0lOKTtcclxuICByZXR1cm4gbmFtZSA/IChvYmpbTE9HSU5dID0gbmFtZSkgOiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRMb2dpbiA9IChvYmo6IGFueSwgdmFsdWU6IHN0cmluZykgPT4ge1xyXG4gIG9ialtMT0dJTl0gPSB2YWx1ZTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0dJTiwgdmFsdWUpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvZ291dEhlbHBlciA9IChvYmo6IGFueSkgPT4ge1xyXG4gIG9ialtMT0dJTl0gPSAnJztcclxuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMT0dJTik7XHJcbn07XHJcbiIsInR5cGUgaGVhZGVyc1N0cmluZ0tleSA9IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XHJcbnR5cGUgZGVlcE9iamVjdCA9IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgZGVlcE9iamVjdCB9O1xyXG50eXBlIG1vZGVUeXBlID0gJ3NhbWUtb3JpZ2luJyB8ICduby1jb3JzJyB8ICdjb3JzJztcclxuLy8gdHlwZSBjcmVkZW50aWFsc1R5cGUgPSBcIm9taXRcIiB8IFwic2FtZS1vcmlnaW5cIiB8IFwiaW5jbHVkZVwiO1xyXG50eXBlIGNhY2hlVHlwZSA9ICdkZWZhdWx0wrsnIHwgJ25vLXN0b3JlJyB8ICdyZWxvYWQnIHwgJ25vLWNhY2hlJyB8ICdmb3JjZS1jYWNoZScgfCAnb25seS1pZi1jYWNoZWQnO1xyXG5cclxuaW50ZXJmYWNlIElPcHRpb25zIHtcclxuICBoZWFkZXJzPzogaGVhZGVyc1N0cmluZ0tleTtcclxuICBtZXRob2Q/OiBzdHJpbmc7XHJcbiAgYm9keT86IGFueTtcclxuICBtb2RlPzogbW9kZVR5cGU7XHJcbiAgY3JlZGVudGlhbHM/OiBzdHJpbmc7XHJcbiAgY2FjaGU/OiBjYWNoZVR5cGU7XHJcbiAgdGltZW91dD86IG51bWJlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIElIVFRQIHtcclxuICBNRVRIT0RTOiBhbnk7XHJcbiAgRVJST1JfTkVFRF9NRVRIT0Q6IHN0cmluZztcclxuICBnZXREZWVwUGFyYW1zKGtleU5hbWU6IHN0cmluZywgb2JqZWN0OiBkZWVwT2JqZWN0KTogc3RyaW5nO1xyXG4gIHF1ZXJ5U3RyaW5naWZ5KGRhdGE6IGRlZXBPYmplY3QpOiBzdHJpbmc7XHJcbiAgZ2V0KHVybDogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnMpOiBQcm9taXNlPFhNTEh0dHBSZXF1ZXN0PjtcclxuICBwb3N0KHVybDogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnMpOiBQcm9taXNlPFhNTEh0dHBSZXF1ZXN0PjtcclxuICBwdXQodXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBJT3B0aW9ucyk6IFByb21pc2U8WE1MSHR0cFJlcXVlc3Q+O1xyXG4gIHJlcXVlc3QodXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBJT3B0aW9ucyk6IFByb21pc2U8dW5rbm93bj47XHJcbn1cclxuXHJcbmNsYXNzIEhUVFAgaW1wbGVtZW50cyBJSFRUUCB7XHJcbiAgTUVUSE9EUzogYW55O1xyXG4gIEVSUk9SX05FRURfTUVUSE9EID0gJ05lZWQgdG8gc3BlY2lmeSBhIG1ldGhvZCc7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLk1FVEhPRFMgPSB7XHJcbiAgICAgIEdFVDogJ0dFVCcsXHJcbiAgICAgIFBPU1Q6ICdQT1NUJyxcclxuICAgICAgUFVUOiAnUFVUJyxcclxuICAgIH07XHJcbiAgICB0aGlzLnF1ZXJ5U3RyaW5naWZ5ID0gdGhpcy5xdWVyeVN0cmluZ2lmeS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5yZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG4gIGdldERlZXBQYXJhbXMoa2V5TmFtZTogc3RyaW5nLCBvYmplY3Q6IGRlZXBPYmplY3QpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkucmVkdWNlKChyZXN1bHQsIGtleSwgaW5kZXgsIGFycikgPT4ge1xyXG4gICAgICBjb25zdCBvYmogPSBvYmplY3Rba2V5XTtcclxuICAgICAgbGV0IHBhcmFtcyA9IGAke2tleU5hbWV9WyR7a2V5fV09JHtvYmp9YDtcclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHBhcmFtcyA9IHRoaXMuZ2V0RGVlcFBhcmFtcyhgJHtrZXlOYW1lfVske2tleX1dYCwgb2JqKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYCR7cmVzdWx0fSR7cGFyYW1zfSR7aW5kZXggPCBhcnIubGVuZ3RoIC0gMSA/ICcmJyA6ICcnfWA7XHJcbiAgICB9LCAnJyk7XHJcbiAgfVxyXG5cclxuICBxdWVyeVN0cmluZ2lmeShkYXRhOiBkZWVwT2JqZWN0KTogc3RyaW5nIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIG5vdCBvYmplY3QnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoKHJlc3VsdCwga2V5LCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBvYmogPSBkYXRhW2tleV07XHJcbiAgICAgIGxldCBwYXJhbSA9IGAke2tleX09JHtvYmp9YDtcclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHBhcmFtID0gdGhpcy5nZXREZWVwUGFyYW1zKGtleSwgb2JqKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYCR7cmVzdWx0fSR7cGFyYW19JHtpbmRleCA8IGtleXMubGVuZ3RoIC0gMSA/ICcmJyA6ICcnfWA7XHJcbiAgICB9LCAnJyk7XHJcbiAgfVxyXG5cclxuICBnZXQodXJsOiBzdHJpbmcsIG9wdGlvbnM6IElPcHRpb25zID0ge30pOiBQcm9taXNlPFhNTEh0dHBSZXF1ZXN0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgeyAuLi5vcHRpb25zLCBtZXRob2Q6IHRoaXMuTUVUSE9EUy5HRVQgfSk7XHJcbiAgfVxyXG5cclxuICBwb3N0KHVybDogc3RyaW5nLCBvcHRpb25zOiBJT3B0aW9ucyA9IHt9KTogUHJvbWlzZTxYTUxIdHRwUmVxdWVzdD4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmwsIHsgLi4ub3B0aW9ucywgbWV0aG9kOiB0aGlzLk1FVEhPRFMuUE9TVCB9KTtcclxuICB9XHJcblxyXG4gIHB1dCh1cmw6IHN0cmluZywgb3B0aW9uczogSU9wdGlvbnMgPSB7fSk6IFByb21pc2U8WE1MSHR0cFJlcXVlc3Q+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCB7IC4uLm9wdGlvbnMsIG1ldGhvZDogdGhpcy5NRVRIT0RTLlBVVCB9KTtcclxuICB9XHJcblxyXG4gIHJlcXVlc3QodXJsOiBzdHJpbmcsIG9wdGlvbnM6IElPcHRpb25zID0ge30pOiBQcm9taXNlPFhNTEh0dHBSZXF1ZXN0PiB7XHJcbiAgICBjb25zdCB7IGhlYWRlcnMgPSB7fSwgbWV0aG9kLCBib2R5LCB0aW1lb3V0ID0gNTAwMCB9ID0gb3B0aW9ucztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShcclxuICAgICAgZnVuY3Rpb24gKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpIHtcclxuICAgICAgICBpZiAoIW1ldGhvZCkge1xyXG4gICAgICAgICAgcmVqZWN0KHRoaXMuRVJST1JfTkVFRF9NRVRIT0QpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgY29uc3QgaXNHZXQgPSBtZXRob2QgPT09IHRoaXMuTUVUSE9EUy5HRVQ7XHJcblxyXG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgaXNHZXQgJiYgISFib2R5ID8gYCR7dXJsfSR7dGhpcy5xdWVyeVN0cmluZ2lmeShib2R5KX1gIDogdXJsKTtcclxuXHJcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoeGhyKTtcclxuICAgICAgICB4aHIub25hYm9ydCA9IHJlamVjdDtcclxuICAgICAgICB4aHIub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICB4aHIudGltZW91dCA9IHRpbWVvdXQ7XHJcbiAgICAgICAgeGhyLm9udGltZW91dCA9IHJlamVjdDtcclxuICAgICAgICBpZiAoaXNHZXQgfHwgIWJvZHkpIHtcclxuICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfS5iaW5kKHRoaXMpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgSFRUUCwgSU9wdGlvbnMsIElIVFRQIH07XHJcbiIsImltcG9ydCB7IEhUVFAsIElIVFRQIH0gZnJvbSAnLi4vdXRpbC9IVFRQL0hUVFAnO1xyXG5cclxuaW50ZXJmYWNlIElCYXNlQVBJIHtcclxuICBfYmFzZVVybDogc3RyaW5nO1xyXG4gIF9odHRwOiBJSFRUUDtcclxuICBnZXRSZXNwb25zZShyZXM6IFhNTEh0dHBSZXF1ZXN0KTogdm9pZDtcclxufVxyXG5cclxuYWJzdHJhY3QgY2xhc3MgQmFzZUFQSSBpbXBsZW1lbnRzIElCYXNlQVBJIHtcclxuICBfYmFzZVVybDogc3RyaW5nO1xyXG4gIF9odHRwOiBJSFRUUDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2Jhc2VVcmwgPSAnaHR0cHM6Ly95YS1wcmFrdGlrdW0udGVjaC9hcGkvdjInO1xyXG4gICAgdGhpcy5faHR0cCA9IG5ldyBIVFRQKCk7XHJcbiAgfVxyXG4gIGdldFJlc3BvbnNlKHJlczogWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVzcG9uc2VXaXRoUGFyc2UocmVzOiBYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMucmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlcyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCYXNlQVBJIH07XHJcbiIsImltcG9ydCB7IEJhc2VBUEkgfSBmcm9tICcuL2Jhc2VBcGknO1xyXG5cclxuY2xhc3MgQXV0aEFwaSBleHRlbmRzIEJhc2VBUEkge1xyXG4gIF91cmw6IHN0cmluZztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl91cmwgPSB0aGlzLl9iYXNlVXJsICsgJy9hdXRoLyc7XHJcbiAgfVxyXG4gIHNpZ251cChib2R5OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSAnc2lnbnVwJztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuX3VybCArIHJvdXRlLCBvcHRpb25zKS50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZShyZXMpKTtcclxuICB9XHJcblxyXG4gIHNpZ25pbihib2R5OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSAnc2lnbmluJztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuX3VybCArIHJvdXRlLCBvcHRpb25zKS50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZShyZXMpKTtcclxuICB9XHJcblxyXG4gIGxvZ291dCgpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIH07XHJcbiAgICBjb25zdCByb3V0ZSA9ICdsb2dvdXQnO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9odHRwLnJlcXVlc3QodGhpcy5fdXJsICsgcm91dGUsIG9wdGlvbnMpLnRoZW4oKHJlczogYW55KSA9PiB0aGlzLmdldFJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCByb3V0ZSA9ICd1c2VyJztcclxuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLl91cmwgKyByb3V0ZSkudGhlbigocmVzOiBhbnkpID0+IHRoaXMuZ2V0UmVzcG9uc2VXaXRoUGFyc2UocmVzKSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBBdXRoQXBpIH07XHJcbiIsImNvbnN0IHRlbXBsYXRlID0gYFxyXG4gIDxidXR0b24gY2xhc3M9XCJidXR0b24gaGVhZGVyX19idXR0b24geyUgY2xhc3NOYW1lICV9XCI+eyUgdGV4dCAlfTwvYnV0dG9uPlxyXG5gO1xyXG5cclxuZXhwb3J0IHsgdGVtcGxhdGUgfTtcclxuIiwiaW1wb3J0IHsgQmxvY2sgfSBmcm9tICcuLi8uLi8uLi91dGlsL0Jsb2NrL0Jsb2NrJztcclxuaW1wb3J0IHtcclxuICBTaW1wbGVUZW1wbGF0ZUVuZ2luZSxcclxuICBvYmplY3RLZXlTdHJpbmdOdW1iZXIsXHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbC9TaW1wbGUtdGVtcGxhdGUtZW5naW5lL3NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUnO1xyXG5cclxuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcclxuXHJcbmNvbnN0IGJ1dHRvbiA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBCbG9jayB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IG9iamVjdEtleVN0cmluZ051bWJlcikge1xyXG4gICAgc3VwZXIoJ2RpdicsIHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGJ1dHRvbi5jb21waWxlKHtcclxuICAgICAgdGV4dDogdGhpcy5wcm9wcy50ZXh0LFxyXG4gICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCdXR0b24gfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgPGhlYWRlciBjbGFzcz1cImhlYWRlclwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImhlYWRlcl9fbG9nby1saW5rXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfX2xvZ28taW1nXCI+PC9kaXY+XHJcbiAgICAgIDxoMSBjbGFzcz1cImhlYWRlcl9fdGl0bGVcIj5TaW1wbGUgY2hhdDwvaDE+ICAgXHJcbiAgICA8L2Rpdj5cclxuICAgIDxuYXYgY2xhc3M9XCJoZWFkZXJfX21lbnVcIj5cclxuICAgICAgeyUgYnV0dG9ucyAlfSAgICAgIFxyXG4gICAgPC9uYXY+XHJcbiAgPC9oZWFkZXI+XHJcbmA7XHJcblxyXG5leHBvcnQgeyB0ZW1wbGF0ZSB9O1xyXG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gJy4uLy4uL3V0aWwvQmxvY2svQmxvY2snO1xyXG5pbXBvcnQgeyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSB9IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9yb3V0ZXInO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uIH0gZnJvbSAnLi4vLi4vYXV0aG9yaXphdGlvbic7XHJcbmltcG9ydCB7IGxvZ291dEhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvYXV0aEhlbHBlcnMnO1xyXG5pbXBvcnQgeyBBdXRoQXBpIH0gZnJvbSAnLi4vLi4vQVBJL2F1dGhBcGknO1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9IZWFkZXJCdXR0b24vSGVhZGVyQnV0dG9uJztcclxuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcclxuXHJcbmNvbnN0IHRtcGxCdXR0b24gPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5cclxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgQmxvY2sge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ2RpdicsIHtcclxuICAgICAgYnV0dG9uczogbnVsbCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbG9nb3V0KCkge1xyXG4gICAgY29uc3QgYXV0aCA9IG5ldyBBdXRoQXBpKCk7XHJcbiAgICBhdXRoXHJcbiAgICAgIC5sb2dvdXQoKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgbG9nb3V0SGVscGVyKGF1dGhvcml6YXRpb24pO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcm91dGVyLmdvKCcjL3NpZ25pbicpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgIHJvdXRlci5nbygnIy9lcnJvcicpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGhlYWRlckNsaWNrRXZlbnRzKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHJlZyA9IC9oZWFkZXJfX2J1dHRvbl8oLiopL2dpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gcmVnLmV4ZWMoKDxIVE1MRWxlbWVudD5ldmVudC50YXJnZXQpLmNsYXNzTGlzdFsyXSk7XHJcbiAgICBjb25zdCBwYXRoID0gcmVzdWx0WzFdO1xyXG4gICAgaWYgKHBhdGggPT09ICdsb2dvdXQnKSB7XHJcbiAgICAgIHRoaXMubG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJvdXRlci5nbyhgIy8ke3BhdGh9YCk7XHJcbiAgfVxyXG5cclxuICBoZWFkZXJMb2dvQ2xpY2tIZWFkZXIoKTogdm9pZCB7XHJcbiAgICByb3V0ZXIuZ28oJyMvJyk7XHJcbiAgfVxyXG5cclxuICBzZXRCdXR0b25zKCkge1xyXG4gICAgaWYgKGF1dGhvcml6YXRpb24ubG9naW4pIHtcclxuICAgICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgICAgYnV0dG9uczogW1xyXG4gICAgICAgICAgbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgICAgIHRleHQ6ICdTZXR0aW5ncycsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2hlYWRlcl9fYnV0dG9uX3NldHRpbmdzJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgICAgIHRleHQ6IGAke2F1dGhvcml6YXRpb24ubG9naW59IOKdjGAsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2hlYWRlcl9fYnV0dG9uX2xvZ291dCcsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICBdXHJcbiAgICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnJlbmRlcigpKVxyXG4gICAgICAgICAgLmpvaW4oJycpLFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgIGJ1dHRvbnM6IFtcclxuICAgICAgICBuZXcgQnV0dG9uKHtcclxuICAgICAgICAgIHRleHQ6ICdTaWduaW4nLFxyXG4gICAgICAgICAgY2xhc3NOYW1lOiAnaGVhZGVyX19idXR0b25fc2lnbmluJyxcclxuICAgICAgICB9KSxcclxuICAgICAgICBuZXcgQnV0dG9uKHtcclxuICAgICAgICAgIHRleHQ6ICdTaWdudXAnLFxyXG4gICAgICAgICAgY2xhc3NOYW1lOiAnaGVhZGVyX19idXR0b25fc2lnbnVwJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXVxyXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVuZGVyKCkpXHJcbiAgICAgICAgLmpvaW4oJycpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMuc2V0QnV0dG9ucygpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgJ2NoYW5nZUF1dGhvcml6YXRpb24nLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRCdXR0b25zKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuZXZlbnRCdXMoKS5vbih0aGlzLkVWRU5UUy5GTE9XX1JFTkRFUiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtZW51QmF0b25zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oZWFkZXJfX2J1dHRvbicpO1xyXG4gICAgICBtZW51QmF0b25zLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAoZWxlbWVudCBhcyBIVE1MRWxlbWVudCkub25jbGljayA9IHRoaXMuaGVhZGVyQ2xpY2tFdmVudHMuYmluZCh0aGlzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAodGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgJy5oZWFkZXJfX2xvZ28tbGluaydcclxuICAgICAgKSBhcyBIVE1MRGl2RWxlbWVudCkub25jbGljayA9IHRoaXMuaGVhZGVyTG9nb0NsaWNrSGVhZGVyO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiB0bXBsQnV0dG9uLmNvbXBpbGUoe1xyXG4gICAgICBidXR0b25zLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBIZWFkZXIgfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybV9faW5wdXQtd3JhcHBlclwiPlxyXG4gICAgICA8aW5wdXRcclxuICAgICAgY2xhc3M9XCJpbnB1dCBhdXRoX19pbnB1dCB7JSBjbGFzc05hbWUgJX1cIlxyXG4gICAgICB7JSBhdHRyaWJ1dGVzICV9XHJcbiAgICAgIG5hbWU9XCJ7JSBuYW1lICV9XCJcclxuICAgICAgeyUgdmFsdWUgJX0gICAgIFxyXG4gICAgICAvPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cImF1dGhfX2Vycm9yXCI+PC9zcGFuPlxyXG4gICAgPC9kaXY+XHJcbiAgYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBpbnB1dCA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBJbnB1dCBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKSB7XHJcbiAgICBzdXBlcignZGl2JywgcHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMsIG5hbWUsIGNsYXNzTmFtZSA9ICcnLCB2YWx1ZSA9ICcgJyB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiBpbnB1dC5jb21waWxlKHtcclxuICAgICAgYXR0cmlidXRlcyxcclxuICAgICAgbmFtZSxcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGNsYXNzTmFtZSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgSW5wdXQgfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgPGRpdiBjbGFzcz1cIlxyXG4gICAgbWVzc2FnZSBcclxuICAgIHslIGNsYXNzTmFtZSAlfVwiXHJcbiAgICA+XHJcbiAgICAgIHslIGF2YXRhciAlfVxyXG4gICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VfX2NvbnRlbnRcIj5cclxuICAgICAgPGgzIGNsYXNzPVwibWVzc2FnZV9fc2VuZGVyXCI+eyUgdXNlck5hbWUgJX08L2gzPlxyXG4gICAgICA8dGltZSBjbGFzcz1cIm1lc3NhZ2VfX3RpbWVcIj5cclxuICAgICAgICB7JSB0aW1lICV9XHJcbiAgICAgIDwvdGltZT5cclxuICAgICAgPHAgY2xhc3M9XCJtZXNzYWdlX190ZXh0XCI+XHJcbiAgICAgICAgeyUgdGV4dCAlfVxyXG4gICAgICA8L3A+XHJcbiAgICA8L2Rpdj4gICAgXHJcbiAgPC9kaXY+XHJcbmA7XHJcblxyXG5leHBvcnQgeyB0ZW1wbGF0ZSB9O1xyXG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gJy4uLy4uL3V0aWwvQmxvY2svQmxvY2snO1xyXG5pbXBvcnQge1xyXG4gIFNpbXBsZVRlbXBsYXRlRW5naW5lLFxyXG4gIG9iamVjdEtleVN0cmluZ051bWJlcixcclxufSBmcm9tICcuLi8uLi91dGlsL1NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUvc2ltcGxlLXRlbXBsYXRlLWVuZ2luZSc7XHJcblxyXG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xyXG5cclxuY29uc3QgbWVzc2FnZSA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBNZXNzYWdlIGV4dGVuZHMgQmxvY2sge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBvYmplY3RLZXlTdHJpbmdOdW1iZXIpIHtcclxuICAgIHN1cGVyKCdkaXYnLCBwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgYXZhdGFyLCB0ZXh0LCB0aW1lLCBpc093biwgdXNlck5hbWUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBjbGFzc05hbWUgPSBpc093biA/ICdtZXNzYWdlX3JldmVyc2UnIDogJyAnO1xyXG4gICAgcmV0dXJuIG1lc3NhZ2UuY29tcGlsZSh7XHJcbiAgICAgIGF2YXRhcixcclxuICAgICAgdGV4dCxcclxuICAgICAgdGltZSxcclxuICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICB1c2VyTmFtZSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgTWVzc2FnZSB9O1xyXG4iLCJjb25zdCB0ZW1wbGF0ZSA9IGA8aDIgY2xhc3M9XCJwYWdlLXRpdGxlIGF1dGhfX3RpdGxlXCI+eyUgdGV4dCAlfTwvaDI+YDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCB0aXRsZSA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBUaXRsZSBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKSB7XHJcbiAgICBzdXBlcignZGl2JywgcHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGl0bGUuY29tcGlsZSh7XHJcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsXHJcbiAgICAgIHRleHQ6IHRoaXMucHJvcHMudGV4dCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVGl0bGUgfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbjxzcGFuXHJcbiAgY2xhc3M9XCJhdXRoX19zZXJ2ZXItbWVzc2FnZSB7JSBhY3RpdmVDbGFzcyAlfVwiPlxyXG4gICAgeyUgdGV4dCAlfVxyXG4gIDwvc3Bhbj5cclxuYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBzZXJ2ZXJNZXNzYWdlID0gbmV3IFNpbXBsZVRlbXBsYXRlRW5naW5lKHRlbXBsYXRlKTtcclxuXHJcbmNsYXNzIFNlcnZlck1lc3NhZ2UgZXh0ZW5kcyBCbG9jayB7XHJcbiAgRVJSX0NMQVNTX05BTUUgPSAnYXV0aF9fc2VydmVyLW1lc3NhZ2Vfc2hvd19lcnInO1xyXG4gIE1FU1NBR0VfQ0xBU1NfTkFNRSA9ICdhdXRoX19zZXJ2ZXItbWVzc2FnZV9zaG93X21lc3NhZ2UnO1xyXG4gIGFjdGl2ZUNsYXNzOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IG9iamVjdEtleVN0cmluZ051bWJlcikge1xyXG4gICAgc3VwZXIoJ2RpdicsIHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeyB0ZXh0LCBpc0Vycm9yIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgYWN0aXZlQ2xhc3MgPSB0ZXh0ID8gKGlzRXJyb3IgPyB0aGlzLkVSUl9DTEFTU19OQU1FIDogdGhpcy5NRVNTQUdFX0NMQVNTX05BTUUpIDogJyAnO1xyXG4gICAgcmV0dXJuIHNlcnZlck1lc3NhZ2UuY29tcGlsZSh7XHJcbiAgICAgIGFjdGl2ZUNsYXNzLFxyXG4gICAgICB0ZXh0LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTZXJ2ZXJNZXNzYWdlIH07XHJcbiIsImNvbnN0IHRlbXBsYXRlID0gYFxyXG48c2VjdGlvbiBjbGFzcz1cInBvcHVwIHBvcHVwX2lzLW9wZW5cIj5cclxuICA8ZGl2IGNsYXNzPVwicG9wdXBfX2NvbnRlbnRcIj5cclxuICAgIDxmb3JtIGNsYXNzPVwicG9wdXBfX2Zvcm1cIiBuYW1lPVwic2lnbmluXCIgbm92YWxpZGF0ZT5cclxuICAgICAgeyUgdGl0bGVJbnB1dCAlfVxyXG4gICAgICB7JSBzZXJ2ZXJFcnJvciAlfVxyXG4gICAgICB7JSBidXR0b25TdWJtaXQgJX1cclxuICAgICAgeyUgYnV0dG9uQ2FuY2VsICV9XHJcbiAgICA8L2Zvcm0+XHJcbiAgPC9kaXY+XHJcbjwvc2VjdGlvbj5cclxuYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7IFNlcnZlck1lc3NhZ2UgfSBmcm9tICcuLi9pbmRleCc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBwb3B1cCA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBQb3B1cCBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogb2JqZWN0S2V5U3RyaW5nTnVtYmVyKSB7XHJcbiAgICBzdXBlcignZGl2JywgcHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IHRpdGxlSW5wdXQsIGJ1dHRvblN1Ym1pdCwgYnV0dG9uQ2FuY2VsLCBlcnJvclRleHQgPSAnJyB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gcG9wdXAuY29tcGlsZSh7XHJcbiAgICAgIHRpdGxlSW5wdXQsXHJcbiAgICAgIGJ1dHRvblN1Ym1pdCxcclxuICAgICAgYnV0dG9uQ2FuY2VsLFxyXG4gICAgICBzZXJ2ZXJFcnJvcjogbmV3IFNlcnZlck1lc3NhZ2Uoe1xyXG4gICAgICAgIHRleHQ6IGVycm9yVGV4dCxcclxuICAgICAgICBpc0Vycm9yOiB0cnVlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUG9wdXAgfTtcclxuIiwiY29uc3QgdGVtcGxhdGUgPSBgXHJcbjxkaXYgY2xhc3M9XCJsb2FkZXIgeyUgY2xhc3NOYW1lICV9XCI+XHJcbiAgPGRpdiBjbGFzcz1cImxvYWRlcl9faXRlbVwiPjwvZGl2PlxyXG4gIDxwIGNsYXNzPVwibG9hZGVyX190ZXh0XCI+0JfQsNCz0YDRg9C30LrQsCwg0L/QvtC00L7QttC00LjRgtC1Li4uPC9wPlxyXG48L2Rpdj5cclxuYDtcclxuXHJcbmV4cG9ydCB7IHRlbXBsYXRlIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7XHJcbiAgU2ltcGxlVGVtcGxhdGVFbmdpbmUsXHJcbiAgb2JqZWN0S2V5U3RyaW5nTnVtYmVyLFxyXG59IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuXHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBsb2FkZXIgPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5cclxuY2xhc3MgTG9hZGVyIGV4dGVuZHMgQmxvY2sge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBvYmplY3RLZXlTdHJpbmdOdW1iZXIpIHtcclxuICAgIHN1cGVyKCdkaXYnLCBwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgaXNMb2FkIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgY2xhc3NOYW1lID0gaXNMb2FkID8gJ2xvYWRlcl9pcy1hY3RpdmUnIDogJyAnO1xyXG4gICAgcmV0dXJuIGxvYWRlci5jb21waWxlKHsgY2xhc3NOYW1lIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgTG9hZGVyIH07XHJcbiIsImNvbnN0IHRlbXBsYXRlID0gYFxyXG4gIDxkaXYgY2xhc3M9XCJlcnJvclwiPlxyXG4gICAgPGgxIGNsYXNzPVwiZXJyb3JfX3RpdGxlXCI+eyUgZXJyb3JDb2RlICV9PC9oMT5cclxuICAgIDxwIGNsYXNzPVwiZXJyb3JfX3N1YnRpdGxlXCI+eyUgZXJyb3JUaXRsZSAlfTwvcD5cclxuICAgIDxkaXYgY2xhc3M9XCJlcnJvcl9faW1nXCI+PC9kaXY+XHJcbiAgICA8YSBjbGFzcz1cImxpbmsgZXJyb3JfX2xpbmtcIj5iYWNrIHRvIG1haW48L2E+XHJcbiAgPC9kaXY+XHJcbmA7XHJcblxyXG5leHBvcnQgeyB0ZW1wbGF0ZSB9O1xyXG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gJy4uLy4uL3V0aWwvQmxvY2svQmxvY2snO1xyXG5cclxuaW1wb3J0IHsgU2ltcGxlVGVtcGxhdGVFbmdpbmUgfSBmcm9tICcuLi8uLi91dGlsL1NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUvc2ltcGxlLXRlbXBsYXRlLWVuZ2luZSc7XHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi9lcnJvci10ZW1wbGF0ZSc7XHJcblxyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL3JvdXRlcic7XHJcblxyXG5jb25zdCB0ZW1wbGF0ZUVuZ2luZSA9IG5ldyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSh0ZW1wbGF0ZSk7XHJcblxyXG5jbGFzcyBTZXJ2ZXJFcnJvciBleHRlbmRzIEJsb2NrIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdkaXYnKTtcclxuICB9XHJcblxyXG4gIGdvTWFpbigpIHtcclxuICAgIHJvdXRlci5nbygnIy8nKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5ldmVudEJ1cygpLm9uKHRoaXMuRVZFTlRTLkZMT1dfUkVOREVSLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpbms6IEhUTUxMaW5rRWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZXJyb3JfX2xpbmsnKTtcclxuICAgICAgbGluay5vbmNsaWNrID0gdGhpcy5nb01haW4uYmluZCh0aGlzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGVtcGxhdGVFbmdpbmUuY29tcGlsZSh7XHJcbiAgICAgIGVycm9yQ29kZTogJ0Vycm9yIDUwMCcsXHJcbiAgICAgIGVycm9yVGl0bGU6ICdQcm9ibGVtcyB3aXRoIHNlcnZlcicsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNlcnZlckVycm9yIH07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcblxyXG5pbXBvcnQgeyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSB9IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL2Vycm9yLXRlbXBsYXRlJztcclxuXHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vcm91dGVyJztcclxuXHJcbmNvbnN0IHRlbXBsYXRlRW5naW5lID0gbmV3IFNpbXBsZVRlbXBsYXRlRW5naW5lKHRlbXBsYXRlKTtcclxuXHJcbmNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgQmxvY2sge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ2RpdicpO1xyXG4gIH1cclxuXHJcbiAgZ29NYWluKCkge1xyXG4gICAgcm91dGVyLmdvKCcjLycpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkub24odGhpcy5FVkVOVFMuRkxPV19SRU5ERVIsICgpID0+IHtcclxuICAgICAgY29uc3QgbGluazogSFRNTExpbmtFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lcnJvcl9fbGluaycpO1xyXG4gICAgICBsaW5rLm9uY2xpY2sgPSB0aGlzLmdvTWFpbi5iaW5kKHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZUVuZ2luZS5jb21waWxlKHtcclxuICAgICAgZXJyb3JDb2RlOiAnRXJyb3IgNDA0JyxcclxuICAgICAgZXJyb3JUaXRsZTogJ05vdCBmb3VuZCcsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IE5vdEZvdW5kIH07XHJcbiIsImV4cG9ydCBjb25zdCB0ZXN0TWVzc2FnZXMgPSBbXHJcbiAgJ0d1cm5hcmQgd2hpdGV0aXAgcmVlZiBzaGFyayBww61udGFubyBncnVudGVyIHJvY2snLFxyXG4gICdCYXJiZWxlZCBob3VuZHNoYXJrIHN0cmlwZWQgYnVycmZpc2gga2FoYXdhaSBiZWx1Z2Egc3R1cmdlb24nLFxyXG4gICdXaGFsZSBzaGFyayBsdW1pbm91cyBoYWtlIG1pbm5vdyBnb2xkZW4gbG9hY2gnLFxyXG4gICdDaGlub29rIHNhbG1vbiwgamF2ZWxpbiBwb3JjdXBpbmVmaXNoIScsXHJcbiAgJyBBdGxhbnRpYyBoZXJyaW5nLCBkb3JhYiBtb3NxdWl0b2Zpc2ggbG93ZXllJyxcclxuICAnQmxhY2sgc2VhIGJhc3MuIExpbmVkIHNvbGUgY2VudHJhbCBtdWRtaW5ub3cuJyxcclxuICAna29rb3B1IHRyYWhpcmEgc29ja2V5ZSBzYWxtb24/JyxcclxuICAnIFJlbW9yYSBza2lsZmlzaCBnb2xkZW4gdHJvdXQgbGluZyBsb25nbm9zZScsXHJcbiAgJ09sZCBXb3JsZCBrbmlmZWZpc2ggbGl2ZWJlYXJlciBidWxsaGVhZC4nLFxyXG4gICdHdXJuYXJkIHdoaXRldGlwIHJlZWYgc2hhcmsgcMOtbnRhbm8gZ3J1bnRlciByb2NrJyxcclxuICAnQmFyYmVsZWQgaG91bmRzaGFyayBzdHJpcGVkIGJ1cnJmaXNoIGthaGF3YWkgYmVsdWdhIHN0dXJnZW9uJyxcclxuICAnV2hhbGUgc2hhcmsgbHVtaW5vdXMgaGFrZSBtaW5ub3cgZ29sZGVuIGxvYWNoJyxcclxuICAnQ2hpbm9vayBzYWxtb24sIGphdmVsaW4gcG9yY3VwaW5lZmlzaCEnLFxyXG4gICcgQXRsYW50aWMgaGVycmluZywgZG9yYWIgbW9zcXVpdG9maXNoIGxvd2V5ZScsXHJcbiAgJ0JsYWNrIHNlYSBiYXNzLiBMaW5lZCBzb2xlIGNlbnRyYWwgbXVkbWlubm93LicsXHJcbiAgJ2tva29wdSB0cmFoaXJhIHNvY2tleWUgc2FsbW9uPycsXHJcbiAgJyBSZW1vcmEgc2tpbGZpc2ggZ29sZGVuIHRyb3V0IGxpbmcgbG9uZ25vc2UnLFxyXG4gICdPbGQgV29ybGQga25pZmVmaXNoIGxpdmViZWFyZXIgYnVsbGhlYWQuJyxcclxuXTtcclxuIiwiLy8gVXJsc1xyXG5leHBvcnQgY29uc3QgQVBJX1VSTCA9ICdodHRwczovL3lhLXByYWt0aWt1bS50ZWNoL2FwaS92Mic7XHJcbmV4cG9ydCBjb25zdCBBVkFUQVJfVVJMID0gJ2h0dHBzOi8veWEtcHJha3Rpa3VtLnRlY2gnO1xyXG5cclxuLy8gTWVzc2FnZXNcclxuZXhwb3J0IGNvbnN0IFNVQ0NFU1NfTUVTU0FHRSA9ICdTdWNjZXNzISc7XHJcbmV4cG9ydCBjb25zdCBXUk9OR19NRVNTQUdFID0gJ1NvbWV0aGluZyB3cm9uZzooJztcclxuZXhwb3J0IGNvbnN0IEVNUFRZX0NIQVRTID0gXCJJdCdzIHN0aWxsIHF1aWV0IGhlcmUuLi5cIjtcclxuZXhwb3J0IGNvbnN0IENIQVRTX0xPQURfRVJST1IgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgbG9hZGluZyB0aGUgY2hhdCc7XHJcbmV4cG9ydCBjb25zdCBBVVRIX0VSUl9BTkRfUkVESVJFQ1QgPSAnQXV0aG9yaXphdGlvbiBlcnJvciB5b3Ugd2lsbCBiZSByZWRpcmVjdGVkJztcclxuZXhwb3J0IGNvbnN0IENIQVRfQ1JFQVRJTkdfRVJST1IgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBjcmVhdGluZyB0aGUgY2hhdCc7XHJcbmV4cG9ydCBjb25zdCBQSUNfTE9BRF9FUlIgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiB1cGxvYWRpbmcgdGhlIGltYWdlJztcclxuZXhwb3J0IGNvbnN0IFBBU1NXT1JEX0NPSU5DSURFUyA9ICdQYXNzd29yZHMgbXVzdCBub3QgbWF0Y2gnO1xyXG5leHBvcnQgY29uc3QgQVVUSF9FUlIgPSAnQW4gYXV0aG9yaXphdGlvbiBlcnJvciBvY2N1cnJlZCc7XHJcbmV4cG9ydCBjb25zdCBSRUdJU1RSQVRJT05fRVJST1IgPSAnUmVnaXN0cmF0aW9uIGVycm9yJztcclxuZXhwb3J0IGNvbnN0IFVORVhQRUNURURfRVJST1IgPSAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCc7XHJcblxyXG4vLyBMYXlvdXQgdGV4dFxyXG5cclxuZXhwb3J0IGNvbnN0IEFsVF9URVhUX1NJR05JTiA9IFwiZG9uJ3QgaGF2ZSBhbiBhY2NvdW50P1wiO1xyXG5leHBvcnQgY29uc3QgQUxUX1RFWFRfU0lHTlVQID0gJ2FscmVhZHkgaGF2ZSBhbiBhY2NvdW50Pyc7XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcblxyXG5pbXBvcnQgeyBTaW1wbGVUZW1wbGF0ZUVuZ2luZSB9IGZyb20gJy4uLy4uL3V0aWwvU2ltcGxlLXRlbXBsYXRlLWVuZ2luZS9zaW1wbGUtdGVtcGxhdGUtZW5naW5lJztcclxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vbWFpbi1wYWdlLXRlbXBsYXRlJztcclxuXHJcbmltcG9ydCB7IENoYXRBcGkgfSBmcm9tICcuLi8uLi9BUEkvY2hhdEFwaSc7XHJcbmltcG9ydCB7IEF1dGhBcGkgfSBmcm9tICcuLi8uLi9BUEkvYXV0aEFwaSc7XHJcbmltcG9ydCB7IGF1dGhvcml6YXRpb24gfSBmcm9tICcuLi8uLi9hdXRob3JpemF0aW9uJztcclxuaW1wb3J0IHsgbG9nb3V0SGVscGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9hdXRoSGVscGVycyc7XHJcblxyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL3JvdXRlcic7XHJcblxyXG5pbXBvcnQgeyB0ZXN0TWVzc2FnZXMgfSBmcm9tICcuLi8uLi90ZXN0TWVzc2FnZXMnO1xyXG5pbXBvcnQgeyByYW5kb21OdW1iZXIgfSBmcm9tICcuLi8uLi91dGlsL0hUVFAvcmFuZG9tTnVtYmVyJztcclxuXHJcbmltcG9ydCB7XHJcbiAgQVZBVEFSX1VSTCxcclxuICBFTVBUWV9DSEFUUyxcclxuICBDSEFUU19MT0FEX0VSUk9SLFxyXG4gIEFVVEhfRVJSX0FORF9SRURJUkVDVCxcclxuICBDSEFUX0NSRUFUSU5HX0VSUk9SLFxyXG4gIFBJQ19MT0FEX0VSUixcclxufSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgQVZBVEFSX01JTkkgZnJvbSAnLi4vLi4vLi4vLi4vc3RhdGljL2ltYWdlcy9jaGF0LWNhcmRfX2ltZy5wbmcnO1xyXG5cclxuaW1wb3J0IHsgQXZhdGFyLCBDaGF0Q2FyZCwgTWVzc2FnZSwgUG9wdXAsIElucHV0LCBCdXR0b24sIExvYWRlciB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaW5kZXgnO1xyXG5cclxuY29uc3QgbWFpblBhZ2UgPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5jb25zdCBjaGF0QXBpID0gbmV3IENoYXRBcGkoKTtcclxuY29uc3QgYXV0aEFwaSA9IG5ldyBBdXRoQXBpKCk7XHJcblxyXG5jbGFzcyBNYWluUGFnZSBleHRlbmRzIEJsb2NrIHtcclxuICBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgc2VuZEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgcG9wdXBJbnB1dFZhbHVlOiBzdHJpbmc7XHJcbiAgY2hhdHM6IHt9W107XHJcbiAgYWN0aXZlQ2hhdElkOiBzdHJpbmc7XHJcbiAgY2hhdHNDYXJkOiBOb2RlTGlzdE9mPEhUTUxEaXZFbGVtZW50PjtcclxuICBtZXNzYWdlczogc3RyaW5nW107XHJcbiAgdXNlckF2YXRhcjogc3RyaW5nO1xyXG4gIHVzZXJOYW1lOiBzdHJpbmc7XHJcbiAgc2Nyb2xsVG9wQ2hhdHM6IG51bWJlcjtcclxuICBjaGF0TGlzdENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ2RpdicsIHtcclxuICAgICAgY2hhdENhcmRzOiBudWxsLFxyXG4gICAgICBtZXNzYWdlOiBuZXcgTWVzc2FnZSh7XHJcbiAgICAgICAgYXZhdGFyOiBuZXcgQXZhdGFyKHtcclxuICAgICAgICAgIGxpbms6IEFWQVRBUl9NSU5JLFxyXG4gICAgICAgICAgYWx0OiAnVXNlciBhdmF0YXInLFxyXG4gICAgICAgICAgY2xhc3NOYW1lOiAnbWVzc2FnZV9fYXZhdGFyJyxcclxuICAgICAgICB9KSxcclxuICAgICAgICB0ZXh0OiBcIldoeSBkaWRuJ3QgaGUgY29tZSBhbmQgdGFsayB0byBtZSBoaW1zZWxmP1wiLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgbWVzc2FnZXM6ICcnLFxyXG4gICAgICBwb3B1cDogZmFsc2UsXHJcbiAgICAgIGlzTG9hZDogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmlucHV0RWxlbWVudDtcclxuICAgIHRoaXMuc2VuZEJ1dHRvbjtcclxuICAgIHRoaXMucG9wdXBJbnB1dFZhbHVlO1xyXG5cclxuICAgIHRoaXMuY2hhdHNDYXJkO1xyXG4gICAgdGhpcy5jaGF0cztcclxuICAgIHRoaXMuYWN0aXZlQ2hhdElkO1xyXG5cclxuICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnVzZXJBdmF0YXI7XHJcbiAgICB0aGlzLnVzZXJOYW1lO1xyXG5cclxuICAgIHRoaXMuY2hhdExpc3RDb250YWluZXI7XHJcbiAgICB0aGlzLnNjcm9sbFRvcENoYXRzO1xyXG5cclxuICAgIHRoaXMuaGFuZGxlSW5wdXQgPSB0aGlzLmhhbmRsZUlucHV0LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmhhbmRsZUNsaWNrU2VuZE1lc3NhZ2UgPSB0aGlzLmhhbmRsZUNsaWNrU2VuZE1lc3NhZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlQ2xpY2tTZW5kTWVzc2FnZSA9IHRoaXMuaGFuZGxlQ2xpY2tTZW5kTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVHZXRBY3RpdmVDaGF0ID0gdGhpcy5oYW5kbGVHZXRBY3RpdmVDaGF0LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmhhbmRsZUNsb3NlUG9wdXAgPSB0aGlzLmhhbmRsZUNsb3NlUG9wdXAuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlQ3JlYXRlQ2hhdCA9IHRoaXMuaGFuZGxlQ3JlYXRlQ2hhdC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVMb2FkQXZhdGFyID0gdGhpcy5oYW5kbGVMb2FkQXZhdGFyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmhhbmRsZU9uQ2hhbmdlUG9wdXBJbnB1dCA9IHRoaXMuaGFuZGxlT25DaGFuZ2VQb3B1cElucHV0LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmdldFVzZXJEYXRhRnJvbVNlcnZlciA9IHRoaXMuZ2V0VXNlckRhdGFGcm9tU2VydmVyLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBfcG9wdXBUZW1wbGF0ZShpc0NyZWF0ZUNoYXQ6IGJvb2xlYW4sIGVycm9yVGV4dDogc3RyaW5nID0gdW5kZWZpbmVkKSB7XHJcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gaXNDcmVhdGVDaGF0XHJcbiAgICAgID8gYFxyXG4gICAgdHlwZT1cInRleHRcIlxyXG4gICAgcGxhY2Vob2xkZXI9XCJDaGF0IHRpdGxlXCJcclxuICAgIG1pbmxlbmd0aD1cIjJcIlxyXG4gICAgbWF4bGVuZ3RoPVwiMjBcIlxyXG4gICAgcmVxdWlyZWRcclxuICBgXHJcbiAgICAgIDogYFxyXG4gICAgdHlwZT1cImZpbGVcIlxyXG4gICAgcmVxdWlyZWRcclxuICBgO1xyXG5cclxuICAgIGNvbnN0IG5hbWUgPSBpc0NyZWF0ZUNoYXQgPyAndGl0bGUnIDogJ2F2YXRhcic7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQb3B1cCh7XHJcbiAgICAgIHRpdGxlSW5wdXQ6IG5ldyBJbnB1dCh7XHJcbiAgICAgICAgYXR0cmlidXRlcyxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGNsYXNzTmFtZTogYHBvcHVwX19pbnB1dCAke2lzQ3JlYXRlQ2hhdCA/ICdwb3B1cF9faW5wdXRfY3JlYXRlJyA6ICdwb3B1cF9faW5wdXRfbG9hZCd9YCxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIGJ1dHRvblN1Ym1pdDogbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgdGV4dDogaXNDcmVhdGVDaGF0ID8gJ0NyZWF0ZScgOiAnTG9hZCcsXHJcbiAgICAgICAgY2xhc3NOYW1lOiBgcG9wdXBfX2J1dHRvbiAgJHtpc0NyZWF0ZUNoYXQgPyAncG9wdXBfX2J1dHRvbl9jcmVhdGUnIDogJ3BvcHVwX19idXR0b25fbG9hZCd9YCxcclxuICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIGJ1dHRvbkNhbmNlbDogbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgdGV4dDogJ0NhbmNlbCcsXHJcbiAgICAgICAgY2xhc3NOYW1lOiAncG9wdXBfX2J1dHRvbiBwb3B1cF9fYnV0dG9uX2NhbmNlbCcsXHJcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgZXJyb3JUZXh0LFxyXG4gICAgfSkucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBfcGxhY2Vob2xkZXJDaGF0VGVtcGxhdGUobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgPHAgY2xhc3M9XCJhc2lkZS1wYW5lbF9fZW1wdHlcIj4ke21lc3NhZ2V9PC9wPmA7XHJcbiAgfVxyXG5cclxuICBwYXJzZURhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgcmV0dXJuIGAke2RhdGUudG9Mb2NhbGVTdHJpbmcoJ3J1Jywge1xyXG4gICAgICBob3VyOiAnbnVtZXJpYycsXHJcbiAgICAgIG1vbnRoOiAnbG9uZycsXHJcbiAgICAgIG1pbnV0ZTogJ251bWVyaWMnLFxyXG4gICAgICBkYXk6ICdudW1lcmljJyxcclxuICAgIH0pfSwgJHtkYXRlLmdldEZ1bGxZZWFyKCl9YDtcclxuICB9XHJcblxyXG4gIGdldFVzZXJEYXRhRnJvbVNlcnZlcigpIHtcclxuICAgIGF1dGhBcGkuZ2V0VXNlckluZm8oKS50aGVuKCh7IGF2YXRhciwgZGlzcGxheV9uYW1lIH0pID0+IHtcclxuICAgICAgdGhpcy51c2VyQXZhdGFyID0gYCR7QVZBVEFSX1VSTH0ke2F2YXRhcn1gO1xyXG4gICAgICB0aGlzLnVzZXJOYW1lID0gZGlzcGxheV9uYW1lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpbml0Q2hhdHMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnNldFByb3BzKHsgaXNMb2FkOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGNoYXRBcGlcclxuICAgICAgLmdldENoYXRzKClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIHRoaXMuY2hhdHMgPSByZXM7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNldFByb3BzKHsgY2hhdENhcmRzOiB0aGlzLmdldENoYXRDYXJkcygpIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyRGF0YUZyb21TZXJ2ZXIoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gZXJyO1xyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09PSA1MDApIHtcclxuICAgICAgICAgIHJvdXRlci5nbygnIy9lcnJvcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgIGxvZ291dEhlbHBlcihhdXRob3JpemF0aW9uKTtcclxuICAgICAgICAgIHJvdXRlci5nbygnIy9zaWduaW4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgY2hhdENhcmRzOiB0aGlzLl9wbGFjZWhvbGRlckNoYXRUZW1wbGF0ZShDSEFUU19MT0FEX0VSUk9SKSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IGZhbHNlIH0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIF9zZXRMb2FkZXIoaXNMb2FkOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gbmV3IExvYWRlcih7IGlzTG9hZCB9KS5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIGdldENoYXRDYXJkcygpIHtcclxuICAgIHJldHVybiB0aGlzLmNoYXRzXHJcbiAgICAgIC5tYXAoKHsgaWQsIHRpdGxlLCBhdmF0YXIgfTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhdENhcmQoe1xyXG4gICAgICAgICAgY2hhdEF2YXRhcjogbmV3IEF2YXRhcih7XHJcbiAgICAgICAgICAgIGxpbms6ICFhdmF0YXIgPyBBVkFUQVJfTUlOSSA6IGAke0FWQVRBUl9VUkx9JHthdmF0YXJ9YCxcclxuICAgICAgICAgICAgYWx0OiB0aXRsZSxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2hhdC1jYXJkX19pbWcnLFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgIHRleHQ6ICdTb21ldGltZSB0aGUgdGV4dCB3aWxsIGFwcGVhciBoZXJlLi4uJyxcclxuICAgICAgICAgIGNoYXRJZDogaWQsXHJcbiAgICAgICAgICBpc0FjdGl2ZUNoYXQ6IHRoaXMuYWN0aXZlQ2hhdElkID09IGlkID8gdHJ1ZSA6IGZhbHNlLFxyXG4gICAgICAgIH0pLnJlbmRlcigpO1xyXG4gICAgICB9KVxyXG4gICAgICAuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBnZXRNZXNzYWdlcygpIHtcclxuICAgIGNvbnN0IHJhbmRvbSA9IHJhbmRvbU51bWJlcigwLCAxNik7XHJcbiAgICByZXR1cm4gdGVzdE1lc3NhZ2VzXHJcbiAgICAgIC5tYXAoKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICBpZiAoaSA+PSByYW5kb20pIHtcclxuICAgICAgICAgIGNvbnN0IGlzRXZlbiA9IGkgJSAyO1xyXG5cclxuICAgICAgICAgIHJldHVybiBuZXcgTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGF2YXRhcjogbmV3IEF2YXRhcih7XHJcbiAgICAgICAgICAgICAgbGluazogaSAlIDIgPyB0aGlzLnVzZXJBdmF0YXIgOiBBVkFUQVJfTUlOSSxcclxuICAgICAgICAgICAgICBhbHQ6IGlzRXZlbiA/IHRoaXMudXNlck5hbWUgOiAnU3VwZXJNZWdhR2lwZXInLFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogJ21lc3NhZ2VfX2F2YXRhcicsXHJcbiAgICAgICAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLFxyXG4gICAgICAgICAgICB0aW1lOiB0aGlzLnBhcnNlRGF0ZShuZXcgRGF0ZSgpKSxcclxuICAgICAgICAgICAgaXNPd246IGlzRXZlbiA/IHRydWUgOiBmYWxzZSxcclxuICAgICAgICAgICAgdXNlck5hbWU6IGlzRXZlbiA/IHRoaXMudXNlck5hbWUgOiAnU3VwZXJNZWdhR2lwZXInLFxyXG4gICAgICAgICAgfSkucmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVJbnB1dCgpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuc2VuZEJ1dHRvbjtcclxuICAgIGNvbnN0IHRleHQgPSB0aGlzLmlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgIGNvbnN0IHNwYWNlcyA9IHRleHQubWF0Y2goL1xccyovKVswXTtcclxuICAgIGlmICh0ZXh0ICYmIHRleHQgIT09IHNwYWNlcykge1xyXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnY29udHJvbC1wYW5lbF9fc2VuZC1idXR0b25fYWN0aXZlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnY29udHJvbC1wYW5lbF9fc2VuZC1idXR0b25fYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZW5kTWVzc2FnZSgpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgbWVzc2FnZXNMaXN0ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlcy13aW5kb3dfX2xpc3QnKTtcclxuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCB0ZXh0ID0gaW5wdXQudmFsdWU7XHJcbiAgICBjb25zdCBmb3JtID0gaW5wdXQucGFyZW50Tm9kZTtcclxuICAgIChmb3JtIGFzIEhUTUxGb3JtRWxlbWVudCkucmVzZXQoKTtcclxuICAgIHRoaXMuc2VuZEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdjb250cm9sLXBhbmVsX19zZW5kLWJ1dHRvbl9hY3RpdmUnKTtcclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xyXG4gICAgICBhdmF0YXI6IG5ldyBBdmF0YXIoe1xyXG4gICAgICAgIGxpbms6IHRoaXMudXNlckF2YXRhcixcclxuICAgICAgICBhbHQ6IGF1dGhvcml6YXRpb24ubG9naW4sXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnbWVzc2FnZV9fYXZhdGFyJyxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIHRleHQsXHJcbiAgICAgIHRpbWU6IHRoaXMucGFyc2VEYXRlKG5ldyBEYXRlKCkpLFxyXG4gICAgICBpc093bjogdHJ1ZSxcclxuICAgICAgdXNlck5hbWU6IHRoaXMudXNlck5hbWUsXHJcbiAgICB9KS5yZW5kZXIoKTtcclxuXHJcbiAgICBtZXNzYWdlc0xpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBtZXNzYWdlLnRyaW0oKSk7XHJcbiAgICBtZXNzYWdlc0xpc3Quc2Nyb2xsVG9wID0gTWF0aC5jZWlsKG1lc3NhZ2VzTGlzdC5zY3JvbGxIZWlnaHQgLSBtZXNzYWdlc0xpc3QuY2xpZW50SGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNsaWNrU2VuZE1lc3NhZ2UoKSB7XHJcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlEb3duU2VuZE1lc3NhZ2UoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmIChldmVudC5jb2RlID09PSAnRW50ZXInKSB7XHJcbiAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUdldFBvcHVwKGlzQ3JlYXRlQ2hhdDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5zZXRQcm9wcyh7IHBvcHVwOiB0aGlzLl9wb3B1cFRlbXBsYXRlKGlzQ3JlYXRlQ2hhdCkgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDbG9zZVBvcHVwKCkge1xyXG4gICAgdGhpcy5zZXRQcm9wcyh7IHBvcHVwOiBmYWxzZSB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNyZWF0ZUNoYXQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IHRydWUgfSk7XHJcbiAgICBjaGF0QXBpXHJcbiAgICAgIC5jcmVhdGVDaGF0KHsgdGl0bGU6IHRoaXMucG9wdXBJbnB1dFZhbHVlIH0pXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLmNoYXRzID0gW1xyXG4gICAgICAgICAgLi4udGhpcy5jaGF0cyxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMucG9wdXBJbnB1dFZhbHVlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbml0Q2hhdHMoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc2V0UHJvcHMoeyBjaGF0Q2FyZHM6IHRoaXMuZ2V0Q2hhdENhcmRzKCkgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNldFByb3BzKHsgcG9wdXA6IGZhbHNlIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSBlcnI7XHJcblxyXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDUwMCkge1xyXG4gICAgICAgICAgcm91dGVyLmdvKCcjL2Vycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgICAgICAgIHBvcHVwOiB0aGlzLl9wb3B1cFRlbXBsYXRlKHRydWUsIEFVVEhfRVJSX0FORF9SRURJUkVDVCksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2dvdXRIZWxwZXIoYXV0aG9yaXphdGlvbik7XHJcbiAgICAgICAgICAgIHJvdXRlci5nbygnIy9zaWduaW4nKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFByb3BzKHtcclxuICAgICAgICAgIHBvcHVwOiB0aGlzLl9wb3B1cFRlbXBsYXRlKHRydWUsIENIQVRfQ1JFQVRJTkdfRVJST1IpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogZmFsc2UgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTG9hZEF2YXRhcihldmVudDogRXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF9sb2FkJyk7XHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdhdmF0YXInLCBpbnB1dC5maWxlc1swXSk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2NoYXRJZCcsIHRoaXMuYWN0aXZlQ2hhdElkKTtcclxuXHJcbiAgICB0aGlzLnNldFByb3BzKHsgaXNMb2FkOiB0cnVlIH0pO1xyXG4gICAgY2hhdEFwaVxyXG4gICAgICAuYXZhdGFyKGZvcm1EYXRhKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGNoYXRDYXJkczogdGhpcy5nZXRDaGF0Q2FyZHMoKSB9KTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5oYW5kbGVDbG9zZVBvcHVwKCkpXHJcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuaW5pdENoYXRzKCkpXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzdGF0dXMgfSA9IGVycjtcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNTAwKSB7XHJcbiAgICAgICAgICByb3V0ZXIuZ28oJyMvZXJyb3InKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFByb3BzKHtcclxuICAgICAgICAgICAgcG9wdXA6IHRoaXMuX3BvcHVwVGVtcGxhdGUoZmFsc2UsIEFVVEhfRVJSX0FORF9SRURJUkVDVCksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2dvdXRIZWxwZXIoYXV0aG9yaXphdGlvbik7XHJcbiAgICAgICAgICAgIHJvdXRlci5nbygnIy9zaWduaW4nKTtcclxuICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFByb3BzKHtcclxuICAgICAgICAgIHBvcHVwOiB0aGlzLl9wb3B1cFRlbXBsYXRlKGZhbHNlLCBQSUNfTE9BRF9FUlIpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogZmFsc2UgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlT25DaGFuZ2VQb3B1cElucHV0KGV2ZW50OiBFdmVudCkge1xyXG4gICAgdGhpcy5wb3B1cElucHV0VmFsdWUgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlR2V0QWN0aXZlQ2hhdChldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIGlmIChjdXJyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2NoYXQtY2FyZCcpKSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsVG9wQ2hhdHMgPSB0aGlzLmNoYXRMaXN0Q29udGFpbmVyLnNjcm9sbFRvcDtcclxuICAgICAgdGhpcy5hY3RpdmVDaGF0SWQgPSBjdXJyZW50RWxlbWVudC5kYXRhc2V0LmNoYXRpZDtcclxuICAgICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgICAgY2hhdENhcmRzOiB0aGlzLmdldENoYXRDYXJkcygpLFxyXG4gICAgICAgIG1lc3NhZ2VzOiB0aGlzLmdldE1lc3NhZ2VzKCksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAnY2hhbmdlQXV0aG9yaXphdGlvbicsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBpZiAoIWF1dGhvcml6YXRpb24ubG9naW4pIHtcclxuICAgICAgICAgIHRoaXMuY2hhdHMgPSBbXTtcclxuICAgICAgICAgIHRoaXMuc2V0UHJvcHMoeyBtZXNzYWdlczogJycgfSk7XHJcbiAgICAgICAgICB0aGlzLnNldFByb3BzKHtcclxuICAgICAgICAgICAgY2hhdENhcmRzOiAnJyxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgICB0aGlzLmluaXRDaGF0cygpO1xyXG4gICAgdGhpcy5ldmVudEJ1cygpLm9uKHRoaXMuRVZFTlRTLkZMT1dfUkVOREVSLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGhhbmRsZUlucHV0LFxyXG4gICAgICAgIGhhbmRsZUNsaWNrU2VuZE1lc3NhZ2UsXHJcbiAgICAgICAgcHJvcHMsXHJcbiAgICAgICAgaGFuZGxlR2V0QWN0aXZlQ2hhdCxcclxuICAgICAgICBoYW5kbGVHZXRQb3B1cCxcclxuICAgICAgICBzY3JvbGxUb3BDaGF0cyxcclxuICAgICAgICBoYW5kbGVDbG9zZVBvcHVwLFxyXG4gICAgICAgIGhhbmRsZUNyZWF0ZUNoYXQsXHJcbiAgICAgICAgaGFuZGxlTG9hZEF2YXRhcixcclxuICAgICAgICBoYW5kbGVPbkNoYW5nZVBvcHVwSW5wdXQsXHJcbiAgICAgIH0gPSB0aGlzO1xyXG5cclxuICAgICAgY29uc3QgYWRkQ2hhdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hc2lkZS1wYW5lbF9fYWRkJyk7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VzQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1lc3NhZ2VzLXdpbmRvd19fbGlzdCcpO1xyXG4gICAgICB0aGlzLmNoYXRMaXN0Q29udGFpbmVyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYXNpZGUtcGFuZWxfX2NhcmQtbGlzdCcpO1xyXG4gICAgICB0aGlzLmNoYXRzQ2FyZCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNoYXQtY2FyZCcpO1xyXG4gICAgICB0aGlzLmlucHV0RWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtcGFuZWxfX2lucHV0Jyk7XHJcbiAgICAgIHRoaXMuc2VuZEJ1dHRvbiA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtcGFuZWxfX3NlbmQtYnV0dG9uJyk7XHJcblxyXG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5vbmlucHV0ID0gaGFuZGxlSW5wdXQ7XHJcbiAgICAgIHRoaXMuc2VuZEJ1dHRvbi5vbmNsaWNrID0gaGFuZGxlQ2xpY2tTZW5kTWVzc2FnZTtcclxuICAgICAgdGhpcy5zZW5kQnV0dG9uLm9ua2V5ZG93biA9IGhhbmRsZUNsaWNrU2VuZE1lc3NhZ2U7XHJcblxyXG4gICAgICB0aGlzLmNoYXRzQ2FyZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXQtY2FyZF9faW1nJyk7XHJcbiAgICAgICAgZWxlbWVudC5vbmNsaWNrID0gaGFuZGxlR2V0QWN0aXZlQ2hhdDtcclxuICAgICAgICBidXR0b24ub25jbGljayA9IGhhbmRsZUdldFBvcHVwLmJpbmQodGhpcywgZmFsc2UpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbFRvcCA9IE1hdGguY2VpbChcclxuICAgICAgICBtZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxIZWlnaHQgLSBtZXNzYWdlc0NvbnRhaW5lci5jbGllbnRIZWlnaHRcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5jaGF0TGlzdENvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3BDaGF0cztcclxuXHJcbiAgICAgIC8vcG9wdXBzXHJcblxyXG4gICAgICBhZGRDaGF0QnV0dG9uLm9uY2xpY2sgPSBoYW5kbGVHZXRQb3B1cC5iaW5kKHRoaXMsIHRydWUpO1xyXG5cclxuICAgICAgaWYgKHByb3BzLnBvcHVwKSB7XHJcbiAgICAgICAgY29uc3QgcG9wdXAgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG4gICAgICAgIGNvbnN0IHBvcHVwQ2FuY2VsQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uX2NhbmNlbCcpO1xyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBwb3B1cC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcclxuICAgICAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfY3JlYXRlJyk7XHJcbiAgICAgICAgcG9wdXBDYW5jZWxCdXR0b24ub25jbGljayA9IGhhbmRsZUNsb3NlUG9wdXA7XHJcbiAgICAgICAgc3VibWl0QnV0dG9uLm9uY2xpY2sgPSBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fYnV0dG9uX2NyZWF0ZScpXHJcbiAgICAgICAgICA/IGhhbmRsZUNyZWF0ZUNoYXRcclxuICAgICAgICAgIDogaGFuZGxlTG9hZEF2YXRhcjtcclxuICAgICAgICBpbnB1dCAmJiAoaW5wdXQub25pbnB1dCA9IGhhbmRsZU9uQ2hhbmdlUG9wdXBJbnB1dCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHN1cGVyLnNob3coKTtcclxuICAgIHRoaXMuaW5pdENoYXRzKCk7XHJcbiAgICB0aGlzLnNldFByb3BzKHsgcG9wdXA6IGZhbHNlIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IG1lc3NhZ2VzLCBoYW5kbGVJbnB1dCwgaGFuZGxlQ2xpY2tCdXR0b24sIHBvcHVwLCBjaGF0Q2FyZHMsIGlzTG9hZCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBtZXNzYWdlc0NsYXNzTmFtZVN0YXJ0Q29udGFpbmVyID0gbWVzc2FnZXNcclxuICAgICAgPyAnIG1lc3NhZ2VzLXdpbmRvd19fc3RhcnQtY29udGFpbmVyX2hpZGRlbidcclxuICAgICAgOiAnICc7XHJcbiAgICBjb25zdCBtZXNzYWdlc0NsYXNzTmFtZUNvbnRhaW5lciA9IG1lc3NhZ2VzID8gJyAnIDogJ21lc3NhZ2VzLXdpbmRvd19fY29udGFpbmVyX2hpZGRlbic7XHJcblxyXG4gICAgcmV0dXJuIG1haW5QYWdlLmNvbXBpbGUoe1xyXG4gICAgICBjaGF0Q2FyZHM6IGNoYXRDYXJkcyA/IGNoYXRDYXJkcyA6IHRoaXMuX3BsYWNlaG9sZGVyQ2hhdFRlbXBsYXRlKEVNUFRZX0NIQVRTKSxcclxuICAgICAgbWVzc2FnZXMsXHJcbiAgICAgIGhhbmRsZUlucHV0LFxyXG4gICAgICBoYW5kbGVDbGlja0J1dHRvbixcclxuICAgICAgcG9wdXA6IHBvcHVwID8gcG9wdXAgOiAnICcsXHJcbiAgICAgIG1lc3NhZ2VzQ2xhc3NOYW1lQ29udGFpbmVyLFxyXG4gICAgICBtZXNzYWdlc0NsYXNzTmFtZVN0YXJ0Q29udGFpbmVyLFxyXG4gICAgICBsb2FkZXI6IHRoaXMuX3NldExvYWRlcihpc0xvYWQpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBNYWluUGFnZSB9O1xyXG4iLCJjb25zdCBtYWluUGFnZVRlbXBsYXRlID0gYFxyXG4gICAgPGRpdiBjbGFzcz1cInJvb3RcIj5cclxuICAgICAgPG1haW4gY2xhc3M9XCJtYWluLWNvbnRlbnRcIj5cclxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImFzaWRlLXBhbmVsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNpZGUtcGFuZWxfX2NhcmQtbGlzdFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNpZGUtcGFuZWxfX2FkZFwiPis8L2Rpdj5cclxuICAgICAgICAgICAgeyUgY2hhdENhcmRzICV9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJtZXNzYWdlcy13aW5kb3dcIj5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY2xhc3M9XCJtZXNzYWdlcy13aW5kb3dfX3N0YXJ0LWNvbnRhaW5lciB7JSBtZXNzYWdlc0NsYXNzTmFtZVN0YXJ0Q29udGFpbmVyICV9XCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJtZXNzYWdlcy13aW5kb3dfX3N0YXJ0LWNvbnRhaW5lci10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgc2VsZWN0IG9yIGNyZWF0ZSBhIGNoYXQgdG8gc3RhcnQgY29tbXVuaWNhdGVcclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZXMtd2luZG93X19jb250YWluZXIgeyUgbWVzc2FnZXNDbGFzc05hbWVDb250YWluZXIgJX1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VzLXdpbmRvd19fbGlzdFwiPlxyXG4gICAgICAgICAgICAgIHslIG1lc3NhZ2VzICV9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbC1wYW5lbFwiPlxyXG4gICAgICAgICAgICAgIDxmb3JtIGNsYXNzPVwiY29udHJvbC1wYW5lbF9fZm9ybVwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbnB1dCBjb250cm9sLXBhbmVsX19pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU3RhcnQgdG8gd3JpdGUuLi5cIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjb250cm9sLXBhbmVsX19zZW5kLWJ1dHRvblwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHslIHBvcHVwICV9XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIHslIGxvYWRlciAlfVxyXG4gICAgICA8L21haW4+XHJcbiAgICA8L2Rpdj5cclxuICBgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWFpblBhZ2VUZW1wbGF0ZTtcclxuIiwiaW1wb3J0IHsgQmFzZUFQSSB9IGZyb20gJy4vYmFzZUFwaSc7XHJcblxyXG5jbGFzcyBDaGF0QXBpIGV4dGVuZHMgQmFzZUFQSSB7XHJcbiAgX3VybDogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX3VybCA9IHRoaXMuX2Jhc2VVcmwgKyAnL2NoYXRzLyc7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDaGF0KGJvZHk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdCh0aGlzLl91cmwsIG9wdGlvbnMpLnRoZW4oKHJlczogYW55KSA9PiB0aGlzLmdldFJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2hhdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5fdXJsKS50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZVdpdGhQYXJzZShyZXMpKTtcclxuICB9XHJcblxyXG4gIGF2YXRhcihib2R5OiBhbnkpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSAnYXZhdGFyJztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wdXQodGhpcy5fdXJsICsgcm91dGUsIG9wdGlvbnMpLnRoZW4oKHJlczogYW55KSA9PiB0aGlzLmdldFJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ2hhdEFwaSB9O1xyXG4iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgPGRpdiBjbGFzcz1cInJvdFwiPlxyXG4gIDxtYWluIGNsYXNzPVwibWFpbi1jb250ZW50XCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYXV0aC13aXRoLWNvbnRhaW5lclwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYXV0aFwiPlxyXG4gICAgICAgIHslIHRpdGxlICV9XHJcbiAgICAgICAgPGZvcm0gY2xhc3M9XCJhdXRoX19mb3JtIGF1dGhfX2Zvcm1fc2lnbmluXCI+XHJcbiAgICAgICAgICB7JSBpbnB1dHMgJX0gICAgICAgICAgXHJcbiAgICAgICAgICB7JSBzZXJ2ZXJNZXNzYWdlICV9XHJcbiAgICAgICAgICB7JSBidXR0b24gJX1cclxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJsaW5rIGF1dGhfX2xpbmsgYXV0aF9fbGlua19zaWduaW5cIlxyXG4gICAgICAgICAgICA+IHslIGFsdFRleHQgJX0gPC9hXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICA8L2Zvcm0+ICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgeyUgbG9hZGVyICV9XHJcbiAgICA8L21haW4+XHJcbiAgPC9kaXY+XHJcbiAgYDtcclxuIiwiY29uc3QgVE9fU0hPUlRfUEFTU1dPUkQgPSAnTWluIHBhc3N3b3JkIGxlbmd0aCA4IGNoYXJhY3RlcnMnO1xyXG5jb25zdCBQQVNTV09SRF9SRUdJU1RFUiA9ICdOZWVkIHR3byBsZXR0ZXJzIGluIGRpZmZlcmVudCByZWdpc3RlcnMnO1xyXG5jb25zdCBQQVNTV09SRF9VTkRFRklORSA9ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gbGF0aW4gbGV0dGVycyBhbmQgbnVtYmVycyc7XHJcbmNvbnN0IFBBU1NXT1JEX05VTUJFUiA9ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIG51bWJlcic7XHJcbmNvbnN0IElOQ09SUkVDVF9URVhUID0gJ011c3QgYmUgZnJvbSAyIHRvIDIwIGNoYXJhY3RlcnMnO1xyXG5jb25zdCBJTkNPUlJFQ1RfRU1BSUwgPSAnSW5jb3JyZWN0IGVtYWlsJztcclxuY29uc3QgSU5DT1JSRUNUX1BIT05FID0gJ1Bob25lIG11c3Qgc3RhcnQgd2l0aCA4IG9yIDcgYW5kIGhhdmUgMTEgbnVtYnMnO1xyXG5cclxuY29uc3QgcGFzc3dvcmRWYWxpZGF0b3IgPSAoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgY2FsbGJhY2s6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgaWYgKGVsZW1lbnQudmFsaWRpdHkudG9vU2hvcnQpIHtcclxuICAgIGNhbGxiYWNrKHRydWUsIFRPX1NIT1JUX1BBU1NXT1JEKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICghZWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgaWYgKCEvW0EtWl0vZy50ZXN0KGVsZW1lbnQudmFsdWUpKSB7XHJcbiAgICAgIGNhbGxiYWNrKHRydWUsIFBBU1NXT1JEX1JFR0lTVEVSKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghL1thLXpdL2cudGVzdChlbGVtZW50LnZhbHVlKSkge1xyXG4gICAgICBjYWxsYmFjayh0cnVlLCBQQVNTV09SRF9SRUdJU1RFUik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoL1tcXFdfXS9nLnRlc3QoZWxlbWVudC52YWx1ZSkpIHtcclxuICAgICAgY2FsbGJhY2sodHJ1ZSwgUEFTU1dPUkRfVU5ERUZJTkUpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEvW1xcZF0vZy50ZXN0KGVsZW1lbnQudmFsdWUpKSB7XHJcbiAgICAgIGNhbGxiYWNrKHRydWUsIFBBU1NXT1JEX05VTUJFUik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBzaW1wbGVUZXh0VmFsaWRhdG9yID0gKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4ge1xyXG4gIGlmIChlbGVtZW50LnZhbGlkaXR5LnRvb0xvbmcgfHwgZWxlbWVudC52YWxpZGl0eS50b29TaG9ydCkge1xyXG4gICAgY2FsbGJhY2sodHJ1ZSwgSU5DT1JSRUNUX1RFWFQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGVtYWlsVmFsaWRhdG9yID0gKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4ge1xyXG4gIGlmICghZWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgY2FsbGJhY2sodHJ1ZSwgSU5DT1JSRUNUX0VNQUlMKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBwaG9uZVZhbGlkYXRvciA9IChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHtcclxuICBpZiAoIWVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgIGNhbGxiYWNrKHRydWUsIElOQ09SUkVDVF9QSE9ORSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgcGFzc3dvcmRWYWxpZGF0b3IsIHNpbXBsZVRleHRWYWxpZGF0b3IsIGVtYWlsVmFsaWRhdG9yLCBwaG9uZVZhbGlkYXRvciB9O1xyXG4iLCJpbXBvcnQgeyBwYXNzd29yZFZhbGlkYXRvciwgc2ltcGxlVGV4dFZhbGlkYXRvciB9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdG9ycyc7XHJcbmV4cG9ydCBjb25zdCBpbnB1dHNQcm9wcyA9IFtcclxuICB7XHJcbiAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwibG9naW5cIlxyXG4gICAgICAgIG1pbmxlbmd0aD1cIjJcIlxyXG4gICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICByZXF1aXJlZFxyXG4gICAgICBgLFxyXG4gICAgbmFtZTogJ2xvZ2luJyxcclxuICAgIGNsYXNzTmFtZTogJ2F1dGhfX2lucHV0X2xvZ2luJyxcclxuICAgIGhhbmRsZUJsdXI6IHNpbXBsZVRleHRWYWxpZGF0b3IsXHJcbiAgfSxcclxuICB7XHJcbiAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICBwbGFjZWhvbGRlcj1cInBhc3N3b3JkXCJcclxuICAgICAgICBwYXR0ZXJuPVwiKD89LipcXFxcZCkoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD8hLipcXFxccykuKlwiXHJcbiAgICAgICAgbWlubGVuZ3RoPVwiOFwiXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlPVwib25cIlxyXG4gICAgICAgIHJlcXVpcmVkXHJcbiAgICAgIGAsXHJcbiAgICBuYW1lOiAncGFzc3dvcmQnLFxyXG4gICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfcGFzc3dvcmQnLFxyXG4gICAgaGFuZGxlQmx1cjogcGFzc3dvcmRWYWxpZGF0b3IsXHJcbiAgfSxcclxuXTtcclxuIiwiaW50ZXJmYWNlIElJbnB1dFZhbGlkYXRlIHtcclxuICBfRklFTERfUkVRVUlSRUQ6IHN0cmluZztcclxuICBfY3VzdG9tVmFsaWRhdGU6IEZ1bmN0aW9uO1xyXG4gIF90b2dnbGVFcnJvcihpc0FjdGl2ZTogYm9vbGVhbiwgbWVzc2FnZT86IHN0cmluZyk6IHZvaWQ7XHJcbiAgaGFuZGxlQmx1cigpOiB2b2lkO1xyXG4gIGhhbmRsZUZvY3VzKCk6IHZvaWQ7XHJcbn1cclxuXHJcbmNsYXNzIElucHV0VmFsaWRhdGUgaW1wbGVtZW50cyBJSW5wdXRWYWxpZGF0ZSB7XHJcbiAgcmVhZG9ubHkgX0ZJRUxEX1JFUVVJUkVEID0gJ1RoaXMgaXMgZmVsaWQgcmVxdWlyZWQnO1xyXG4gIHJlYWRvbmx5IF9jdXN0b21WYWxpZGF0ZTogRnVuY3Rpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKGN1c3RvbVZhbGlkYXRlOiBGdW5jdGlvbikge1xyXG4gICAgdGhpcy5fY3VzdG9tVmFsaWRhdGUgPSBjdXN0b21WYWxpZGF0ZTtcclxuICB9XHJcblxyXG4gIF90b2dnbGVFcnJvciA9IChpc0FjdGl2ZTogYm9vbGVhbiwgbWVzc2FnZSA9ICcnKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBlcnIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgZXJyLmNsYXNzTGlzdC5hZGQoJ2F1dGhfX2Vycm9yX2FjdGl2ZScpO1xyXG4gICAgICBlcnIudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZXJyLmNsYXNzTGlzdC5yZW1vdmUoJ2F1dGhfX2Vycm9yX2FjdGl2ZScpO1xyXG4gICAgICBlcnIudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGhhbmRsZUJsdXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCkudmFsaWRpdHkudmFsdWVNaXNzaW5nKSB7XHJcbiAgICAgIHRoaXMuX3RvZ2dsZUVycm9yKHRydWUsIHRoaXMuX0ZJRUxEX1JFUVVJUkVEKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fY3VzdG9tVmFsaWRhdGUoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0LCB0aGlzLl90b2dnbGVFcnJvcik7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlRm9jdXMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl90b2dnbGVFcnJvcihmYWxzZSk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHsgSW5wdXRWYWxpZGF0ZSwgSUlucHV0VmFsaWRhdGUgfTtcclxuIiwidHlwZSBvYmplY3RLeVN0cmluZyA9IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XHJcblxyXG5pbnRlcmZhY2UgSUZvcm0ge1xyXG4gIF9mb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XHJcbiAgX2J1dHRvbjogRWxlbWVudDtcclxuICBfY3VzdG9tVmFsaWRhdG9yKCk6IGJvb2xlYW47XHJcbiAgX3RvZ2dsZUJ1dHRvbihpc0FjdGl2ZTogYm9vbGVhbik6IHZvaWQ7XHJcbiAgZm9ybUlzVmFsaWQoKTogdm9pZDtcclxuICBzYXZlVmFsdWUoZXZlbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIG9iajogb2JqZWN0S3lTdHJpbmcpOiB2b2lkO1xyXG59XHJcblxyXG5jbGFzcyBGb3JtIGltcGxlbWVudHMgSUZvcm0ge1xyXG4gIF9mb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XHJcbiAgX2J1dHRvbjogRWxlbWVudDtcclxuICBfY3VzdG9tVmFsaWRhdG9yOiAoKSA9PiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGJ1dHRvbjogRWxlbWVudCwgY3VzdG9tVmFsaWRhdG9yID0gKCk6IGJvb2xlYW4gPT4gdHJ1ZSkge1xyXG4gICAgdGhpcy5fZm9ybSA9IGZvcm07XHJcbiAgICB0aGlzLl9idXR0b24gPSBidXR0b247XHJcbiAgICB0aGlzLl9jdXN0b21WYWxpZGF0b3IgPSBjdXN0b21WYWxpZGF0b3I7XHJcbiAgfVxyXG5cclxuICBzYXZlVmFsdWUoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIG9iajogb2JqZWN0S3lTdHJpbmcpIHtcclxuICAgIG9ialtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgX3RvZ2dsZUJ1dHRvbihpc0FjdGl2ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9idXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3JtSXNWYWxpZCA9ICgpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLl9mb3JtLmNoZWNrVmFsaWRpdHkoKSAmJiB0aGlzLl9jdXN0b21WYWxpZGF0b3IoKSkge1xyXG4gICAgICB0aGlzLl90b2dnbGVCdXR0b24odHJ1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvbihmYWxzZSk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHsgRm9ybSwgSUZvcm0gfTtcclxuIiwiaW1wb3J0IHsgQmxvY2sgfSBmcm9tICcuLi8uLi91dGlsL0Jsb2NrL0Jsb2NrJztcclxuXHJcbmltcG9ydCB7IFNpbXBsZVRlbXBsYXRlRW5naW5lIH0gZnJvbSAnLi4vLi4vdXRpbC9TaW1wbGUtdGVtcGxhdGUtZW5naW5lL3NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUnO1xyXG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vc2lnbmluLXRlbXBsYXRlJztcclxuaW1wb3J0IHsgaW5wdXRzUHJvcHMgfSBmcm9tICcuL2lucHV0UHJvcHMnO1xyXG5cclxuaW1wb3J0IHsgSW5wdXRWYWxpZGF0ZSwgSUlucHV0VmFsaWRhdGUgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0lucHV0L0lucHV0VmFsaWRhdGUnO1xyXG5pbXBvcnQgeyBGb3JtLCBJRm9ybSB9IGZyb20gJy4uLy4uL2Zvcm0nO1xyXG5cclxuaW1wb3J0IHsgQXV0aEFwaSB9IGZyb20gJy4uLy4uL0FQSS9hdXRoQXBpJztcclxuaW1wb3J0IHsgYXV0aG9yaXphdGlvbiB9IGZyb20gJy4uLy4uL2F1dGhvcml6YXRpb24nO1xyXG5pbXBvcnQgeyBzZXRMb2dpbiB9IGZyb20gJy4uLy4uL3V0aWwvYXV0aEhlbHBlcnMnO1xyXG5cclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9yb3V0ZXInO1xyXG5cclxuaW1wb3J0IHsgQVVUSF9FUlIsIEFsVF9URVhUX1NJR05JTiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQgeyBUaXRsZSwgSW5wdXQsIEJ1dHRvbiwgU2VydmVyTWVzc2FnZSwgTG9hZGVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9pbmRleCc7XHJcblxyXG5jb25zdCBzaWduaW5QYWdlVGVtcGxhdGUgPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5jb25zdCBhdXRoQXBpID0gbmV3IEF1dGhBcGkoKTtcclxuXHJcbmludGVyZmFjZSBJSW5wdXRzUHJvcCB7XHJcbiAgYXR0cmlidXRlczogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBjbGFzc05hbWU6IHN0cmluZztcclxuICBoYW5kbGVCbHVyPyhlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkO1xyXG59XHJcblxyXG5jbGFzcyBTaWduaW5QYWdlIGV4dGVuZHMgQmxvY2sge1xyXG4gIGlucHV0c1ZhbHVlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIHZhbGlkYXRlOiBJSW5wdXRWYWxpZGF0ZVtdO1xyXG4gIGZvcm06IElGb3JtO1xyXG4gIGlzU2VydmVyTWVzc2FnZVNldDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcignZGl2Jywge1xyXG4gICAgICB0aXRsZTogbmV3IFRpdGxlKHsgdGV4dDogJ1NpZ251cCcgfSkucmVuZGVyKCksXHJcbiAgICAgIHNlcnZlck1lc3NhZ2U6IG5ldyBTZXJ2ZXJNZXNzYWdlKHtcclxuICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIGJ1dHRvbjogbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgdGV4dDogJ1NpZ25pbicsXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnYXV0aF9fYnV0dG9uJyxcclxuICAgICAgICBpc0Rpc2FibGVkOiB0cnVlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgYWx0TGlua0NsYXNzTmFtZTogJ2F1dGhfX2xpbmtfc2lnbmluJyxcclxuICAgICAgYWx0VGV4dDogQWxUX1RFWFRfU0lHTklOLFxyXG4gICAgICBpc0xvYWQ6IGZhbHNlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5pbnB1dHNWYWx1ZTtcclxuICAgIHRoaXMudmFsaWRhdGUgPSBbXTtcclxuICAgIHRoaXMuZm9ybTtcclxuICAgIHRoaXMuaXNTZXJ2ZXJNZXNzYWdlU2V0ID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5fY2xlYXJFcnJvciA9IHRoaXMuX2NsZWFyRXJyb3IuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dHMoKSB7XHJcbiAgICB0aGlzLmlucHV0c1ZhbHVlID0gdGhpcy5pbnB1dHNWYWx1ZSB8fCB7fTtcclxuICAgIHRoaXMudmFsaWRhdGUgPSB0aGlzLnZhbGlkYXRlIHx8IFtdO1xyXG4gICAgcmV0dXJuIChpbnB1dHNQcm9wcyBhcyBJSW5wdXRzUHJvcFtdKVxyXG4gICAgICAubWFwKCh7IG5hbWUsIGF0dHJpYnV0ZXMsIGhhbmRsZUJsdXIsIGNsYXNzTmFtZSB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlucHV0c1ZhbHVlW25hbWVdID8gYHZhbHVlPVwiJHt0aGlzLmlucHV0c1ZhbHVlW25hbWVdfVwiYCA6ICcgJztcclxuICAgICAgICB0aGlzLnZhbGlkYXRlLnB1c2gobmV3IElucHV0VmFsaWRhdGUoaGFuZGxlQmx1cikpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IElucHV0KHtcclxuICAgICAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBjbGFzc05hbWUsXHJcbiAgICAgICAgfSkucmVuZGVyKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dHNWYWx1ZSgpIHtcclxuICAgIHRoaXMuZm9ybS5zYXZlVmFsdWUoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0LCB0aGlzLmlucHV0c1ZhbHVlKTtcclxuICB9XHJcblxyXG4gIF9zZXRMb2FkZXIoaXNMb2FkOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gbmV3IExvYWRlcih7IGlzTG9hZCB9KS5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIF9jbGVhckVycm9yKCkge1xyXG4gICAgaWYgKHRoaXMuaXNTZXJ2ZXJNZXNzYWdlU2V0KSB7XHJcbiAgICAgIHRoaXMuc2V0UHJvcHMoe1xyXG4gICAgICAgIHNlcnZlck1lc3NhZ2U6IG5ldyBTZXJ2ZXJNZXNzYWdlKHtcclxuICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1NlcnZlck1lc3NhZ2VTZXQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNpZ25pbkNsaWNrKCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICB0aGlzLnNldFByb3BzKHsgaXNMb2FkOiB0cnVlIH0pO1xyXG4gICAgYXV0aEFwaVxyXG4gICAgICAuc2lnbmluKHRoaXMuaW5wdXRzVmFsdWUpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICBzZXRMb2dpbihhdXRob3JpemF0aW9uLCB0aGlzLmlucHV0c1ZhbHVlLmxvZ2luKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHJvdXRlci5nbygnIy8nKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgcmVzcG9uc2VUZXh0ID0gQVVUSF9FUlIgfSA9IGVycjtcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNTAwKSB7XHJcbiAgICAgICAgICByb3V0ZXIuZ28oJyMvZXJyb3InKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgc2VydmVyTWVzc2FnZTogbmV3IFNlcnZlck1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICB0ZXh0OiByZXNwb25zZVRleHQsXHJcbiAgICAgICAgICAgIGlzRXJyb3I6IHRydWUsXHJcbiAgICAgICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1NlcnZlck1lc3NhZ2VTZXQgPSB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbnB1dHNWYWx1ZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IGZhbHNlIH0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGdvU2lnbnVwKCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHJvdXRlci5nbygnIy9zaWdudXAnKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBzdXBlci5zaG93KCk7XHJcbiAgICB0aGlzLl9jbGVhckVycm9yKCk7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdCh0aGlzLkVWRU5UUy5GTE9XX0NEVSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMuZXZlbnRCdXMoKS5vbih0aGlzLkVWRU5UUy5GTE9XX1JFTkRFUiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCB7IGVsZW1lbnQsIHZhbGlkYXRlLCBfY2xlYXJFcnJvciwgX2dldElucHV0c1ZhbHVlLCBoYW5kbGVTaWduaW5DbGljaywgZ29TaWdudXAgfSA9IHRoaXM7XHJcblxyXG4gICAgICBjb25zdCBmb3JtQ29udGFpbmVyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJyk7XHJcbiAgICAgIGNvbnN0IGZvcm1CdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYXV0aF9fYnV0dG9uJyk7XHJcbiAgICAgIGNvbnN0IGlucHV0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0Jyk7XHJcbiAgICAgIGNvbnN0IGFsdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19saW5rX3NpZ25pbicpO1xyXG5cclxuICAgICAgdGhpcy5mb3JtID0gbmV3IEZvcm0oZm9ybUNvbnRhaW5lciwgZm9ybUJ1dHRvbik7XHJcblxyXG4gICAgICBpbnB1dHMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcclxuICAgICAgICAoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkub25mb2N1cyA9IHZhbGlkYXRlW2ldLmhhbmRsZUZvY3VzO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmJsdXIgPSB2YWxpZGF0ZVtpXS5oYW5kbGVCbHVyO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmNsaWNrID0gX2NsZWFyRXJyb3I7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZm9ybUNvbnRhaW5lci5vbmNoYW5nZSA9IF9nZXRJbnB1dHNWYWx1ZS5iaW5kKHRoaXMpO1xyXG4gICAgICBmb3JtQ29udGFpbmVyLm9uaW5wdXQgPSB0aGlzLmZvcm0uZm9ybUlzVmFsaWQ7XHJcbiAgICAgIGZvcm1CdXR0b24ub25jbGljayA9IGhhbmRsZVNpZ25pbkNsaWNrLmJpbmQodGhpcyk7XHJcbiAgICAgIGFsdEJ1dHRvbi5vbmNsaWNrID0gZ29TaWdudXA7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeyB0aXRsZSwgc2VydmVyTWVzc2FnZSwgaXNMb2FkLCBidXR0b24sIGFsdExpbmtDbGFzc05hbWUsIGFsdFRleHQgfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gc2lnbmluUGFnZVRlbXBsYXRlLmNvbXBpbGUoe1xyXG4gICAgICB0aXRsZSxcclxuICAgICAgaW5wdXRzOiB0aGlzLl9nZXRJbnB1dHMoKSxcclxuICAgICAgc2VydmVyTWVzc2FnZSxcclxuICAgICAgYnV0dG9uLFxyXG4gICAgICBhbHRMaW5rQ2xhc3NOYW1lLFxyXG4gICAgICBhbHRUZXh0LFxyXG4gICAgICBsb2FkZXI6IHRoaXMuX3NldExvYWRlcihpc0xvYWQpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTaWduaW5QYWdlIH07XHJcbiIsImltcG9ydCB7XHJcbiAgcGFzc3dvcmRWYWxpZGF0b3IsXHJcbiAgc2ltcGxlVGV4dFZhbGlkYXRvcixcclxuICBlbWFpbFZhbGlkYXRvcixcclxuICBwaG9uZVZhbGlkYXRvcixcclxufSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlucHV0c1Byb3BzID0gW1xyXG4gIHtcclxuICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiRmlyc3QgbmFtZVwiIFxyXG4gICAgICAgIG1pbmxlbmd0aD1cIjJcIlxyXG4gICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgIGAsXHJcbiAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF9maXJzdC1uYW1lJyxcclxuICAgIG5hbWU6ICdmaXJzdF9uYW1lJyxcclxuICAgIGhhbmRsZUJsdXI6IHNpbXBsZVRleHRWYWxpZGF0b3IsXHJcbiAgfSxcclxuICB7XHJcbiAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlNlY29uZCBuYW1lXCIgXHJcbiAgICAgICAgbWlubGVuZ3RoPVwiMlwiXHJcbiAgICAgICAgbWF4bGVuZ3RoPVwiMjBcIlxyXG4gICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgYCxcclxuICAgIGNsYXNzTmFtZTogJ2F1dGhfX2lucHV0X3NlY29uZC1uYW1lJyxcclxuICAgIG5hbWU6ICdzZWNvbmRfbmFtZScsXHJcbiAgICBoYW5kbGVCbHVyOiBzaW1wbGVUZXh0VmFsaWRhdG9yLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYXR0cmlidXRlczogYFxyXG4gICAgICAgIHR5cGU9XCJlbWFpbFwiIFxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiZW1haWxcIiBcclxuICAgICAgICBwYXR0ZXJuPVwiXi57MSx9QChbLTAtOUEtWmEtel17MSx9XFxcXC4pezEsM31bLUEtWmEtel17Mix9JFwiXHJcbiAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICBgLFxyXG4gICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfZW1haWwnLFxyXG4gICAgbmFtZTogJ2VtYWlsJyxcclxuICAgIGhhbmRsZUJsdXI6IGVtYWlsVmFsaWRhdG9yLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYXR0cmlidXRlczogYFxyXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICBwbGFjZWhvbGRlcj1cImxvZ2luXCIgXHJcbiAgICAgICAgbWlubGVuZ3RoPVwiMlwiXHJcbiAgICAgICAgbWF4bGVuZ3RoPVwiMjBcIlxyXG4gICAgICAgIHJlcXVpcmVkXHJcbiAgICAgIGAsXHJcbiAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF9sb2dpbicsXHJcbiAgICBuYW1lOiAnbG9naW4nLFxyXG4gICAgaGFuZGxlQmx1cjogc2ltcGxlVGV4dFZhbGlkYXRvcixcclxuICB9LFxyXG4gIHtcclxuICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgICB0eXBlPVwicGFzc3dvcmRcIiBcclxuICAgICAgICBwbGFjZWhvbGRlcj1cInBhc3N3b3JkXCIgXHJcbiAgICAgICAgcGF0dGVybj1cIig/PS4qXFxcXGQpKD89LipbYS16XSkoPz0uKltBLVpdKSg/IS4qXFxcXHMpLipcIlxyXG4gICAgICAgIG1pbmxlbmd0aD1cIjhcIlxyXG4gICAgICAgIGF1dG9jb21wbGV0ZT1cIm9uXCJcclxuICAgICAgICByZXF1aXJlZFxyXG4gICAgICBgLFxyXG4gICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfcGFzc3dvcmQnLFxyXG4gICAgbmFtZTogJ3Bhc3N3b3JkJyxcclxuICAgIGhhbmRsZUJsdXI6IHBhc3N3b3JkVmFsaWRhdG9yLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYXR0cmlidXRlczogYFxyXG4gICAgICAgIHR5cGU9XCJwaG9uZVwiIFxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiUGhvbmVcIiBcclxuICAgICAgICBwYXR0ZXJuPVwiXig3fDgpXFxcXGR7MTB9JFwiXHJcbiAgICAgICAgbWF4bGVuZ3RoPVwiMTFcIlxyXG4gICAgICAgIGF1dG9jb21wbGV0ZT1cIm9uXCJcclxuICAgICAgICByZXF1aXJlZFxyXG4gICAgICBgLFxyXG4gICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfcGhvbmUnLFxyXG4gICAgbmFtZTogJ3Bob25lJyxcclxuICAgIGhhbmRsZUJsdXI6IHBob25lVmFsaWRhdG9yLFxyXG4gIH0sXHJcbl07XHJcbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vLi4vdXRpbC9CbG9jay9CbG9jayc7XHJcbmltcG9ydCB7IFNpbXBsZVRlbXBsYXRlRW5naW5lIH0gZnJvbSAnLi4vLi4vdXRpbC9TaW1wbGUtdGVtcGxhdGUtZW5naW5lL3NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUnO1xyXG5cclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9yb3V0ZXInO1xyXG5pbXBvcnQgeyBBdXRoQXBpIH0gZnJvbSAnLi4vLi4vQVBJL2F1dGhBcGknO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uIH0gZnJvbSAnLi4vLi4vYXV0aG9yaXphdGlvbic7XHJcbmltcG9ydCB7IHNldExvZ2luIH0gZnJvbSAnLi4vLi4vdXRpbC9hdXRoSGVscGVycyc7XHJcblxyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zaWdudXAtdGVtcGxhdGUnO1xyXG5pbXBvcnQgeyBpbnB1dHNQcm9wcyB9IGZyb20gJy4vaW5wdXRQcm9wcyc7XHJcbmltcG9ydCB7IElucHV0VmFsaWRhdGUsIElJbnB1dFZhbGlkYXRlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9JbnB1dC9JbnB1dFZhbGlkYXRlJztcclxuXHJcbmltcG9ydCB7IFRpdGxlLCBJbnB1dCwgU2VydmVyTWVzc2FnZSwgQnV0dG9uLCBMb2FkZXIgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2luZGV4JztcclxuXHJcbmltcG9ydCB7IEFMVF9URVhUX1NJR05VUCwgUkVHSVNUUkFUSU9OX0VSUk9SIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRm9ybSwgSUZvcm0gfSBmcm9tICcuLi8uLi9mb3JtJztcclxuXHJcbmludGVyZmFjZSBJSW5wdXRzUHJvcCB7XHJcbiAgYXR0cmlidXRlczogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBjbGFzc05hbWU6IHN0cmluZztcclxuICBoYW5kbGVCbHVyPyhlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBzaWdudXBUZW1wbGF0ZVBhZ2UgPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5jb25zdCBhdXRoID0gbmV3IEF1dGhBcGkoKTtcclxuXHJcbmNsYXNzIFNpZ251cFBhZ2UgZXh0ZW5kcyBCbG9jayB7XHJcbiAgaW5wdXRzVmFsdWU6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgdmFsaWRhdGU6IElJbnB1dFZhbGlkYXRlW107XHJcbiAgZm9ybTogSUZvcm07XHJcbiAgaXNTZXJ2ZXJNZXNzYWdlU2V0OiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdkaXYnLCB7XHJcbiAgICAgIHRpdGxlOiBuZXcgVGl0bGUoeyB0ZXh0OiAnU2lnbnVwJyB9KSxcclxuICAgICAgc2VydmVyTWVzc2FnZTogbmV3IFNlcnZlck1lc3NhZ2Uoe1xyXG4gICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgIGlzRXJyb3I6IGZhbHNlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgYnV0dG9uOiBuZXcgQnV0dG9uKHtcclxuICAgICAgICB0ZXh0OiAnU2lnbnVwJyxcclxuICAgICAgICBjbGFzc05hbWU6ICdhdXRoX19idXR0b24nLFxyXG4gICAgICAgIGlzRGlzYWJsZWQ6IHRydWUsXHJcbiAgICAgIH0pLFxyXG4gICAgICBhbHRMaW5rQ2xhc3NOYW1lOiAnYXV0aF9fbGlua19zaWdudXAnLFxyXG4gICAgICBhbHRUZXh0OiBBTFRfVEVYVF9TSUdOVVAsXHJcbiAgICAgIGlzTG9hZDogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmlucHV0c1ZhbHVlO1xyXG4gICAgdGhpcy52YWxpZGF0ZSA9IFtdO1xyXG4gICAgdGhpcy5mb3JtO1xyXG4gICAgdGhpcy5pc1NlcnZlck1lc3NhZ2VTZXQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dHMoKSB7XHJcbiAgICB0aGlzLmlucHV0c1ZhbHVlID0gdGhpcy5pbnB1dHNWYWx1ZSB8fCB7fTtcclxuICAgIHRoaXMudmFsaWRhdGUgPSB0aGlzLnZhbGlkYXRlIHx8IFtdO1xyXG4gICAgcmV0dXJuIChpbnB1dHNQcm9wcyBhcyBJSW5wdXRzUHJvcFtdKVxyXG4gICAgICAubWFwKCh7IG5hbWUsIGF0dHJpYnV0ZXMsIGhhbmRsZUJsdXIsIGNsYXNzTmFtZSB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlucHV0c1ZhbHVlW25hbWVdID8gYHZhbHVlPVwiJHt0aGlzLmlucHV0c1ZhbHVlW25hbWVdfVwiYCA6ICcgJztcclxuICAgICAgICB0aGlzLnZhbGlkYXRlLnB1c2gobmV3IElucHV0VmFsaWRhdGUoaGFuZGxlQmx1cikpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IElucHV0KHtcclxuICAgICAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBjbGFzc05hbWUsXHJcbiAgICAgICAgfSkucmVuZGVyKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIF9jbGVhckVycm9yKCkge1xyXG4gICAgaWYgKHRoaXMuaXNTZXJ2ZXJNZXNzYWdlU2V0KSB7XHJcbiAgICAgIHRoaXMuc2V0UHJvcHMoe1xyXG4gICAgICAgIHNlcnZlck1lc3NhZ2U6IG5ldyBTZXJ2ZXJNZXNzYWdlKHtcclxuICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1NlcnZlck1lc3NhZ2VTZXQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIF9zZXRMb2FkZXIoaXNMb2FkOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gbmV3IExvYWRlcih7IGlzTG9hZCB9KS5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNpZ25pbkNsaWNrKGV2ZW50OiBhbnkpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogdHJ1ZSB9KTtcclxuICAgIGF1dGhcclxuICAgICAgLnNpZ251cCh0aGlzLmlucHV0c1ZhbHVlKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgc2V0TG9naW4oYXV0aG9yaXphdGlvbiwgdGhpcy5pbnB1dHNWYWx1ZS5sb2dpbik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICByb3V0ZXIuZ28oJyMvJyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIHJlc3BvbnNlVGV4dCA9IFJFR0lTVFJBVElPTl9FUlJPUiB9ID0gZXJyO1xyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09PSA1MDApIHtcclxuICAgICAgICAgIHJvdXRlci5nbygnIy9lcnJvcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgICAgICBzZXJ2ZXJNZXNzYWdlOiBuZXcgU2VydmVyTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlVGV4dCxcclxuICAgICAgICAgICAgaXNFcnJvcjogdHJ1ZSxcclxuICAgICAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmlzU2VydmVyTWVzc2FnZVNldCA9IHRydWU7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICB0aGlzLmlucHV0c1ZhbHVlID0ge307XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogZmFsc2UgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0c1ZhbHVlKGV2ZW50OiBFdmVudCkge1xyXG4gICAgdGhpcy5mb3JtLnNhdmVWYWx1ZSg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQsIHRoaXMuaW5wdXRzVmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ29TaWduaW4oKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcm91dGVyLmdvKCcjL3NpZ25pbicpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmV2ZW50QnVzKCkub24odGhpcy5FVkVOVFMuRkxPV19SRU5ERVIsICgpID0+IHtcclxuICAgICAgY29uc3QgeyBlbGVtZW50LCB2YWxpZGF0ZSwgX2NsZWFyRXJyb3IsIF9nZXRJbnB1dHNWYWx1ZSwgaGFuZGxlU2lnbmluQ2xpY2ssIGdvU2lnbmluIH0gPSB0aGlzO1xyXG5cclxuICAgICAgY29uc3QgZm9ybUNvbnRhaW5lciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xyXG4gICAgICBjb25zdCBmb3JtQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmF1dGhfX2J1dHRvbicpO1xyXG4gICAgICBjb25zdCBpbnB1dHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dCcpO1xyXG4gICAgICBjb25zdCBhbHRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYXV0aF9fbGlua19zaWdudXAnKTtcclxuXHJcbiAgICAgIHRoaXMuZm9ybSA9IG5ldyBGb3JtKGZvcm1Db250YWluZXIsIGZvcm1CdXR0b24pO1xyXG4gICAgICBpbnB1dHMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcclxuICAgICAgICAoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkub25mb2N1cyA9IHZhbGlkYXRlW2ldLmhhbmRsZUZvY3VzO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmJsdXIgPSB2YWxpZGF0ZVtpXS5oYW5kbGVCbHVyO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmNsaWNrID0gX2NsZWFyRXJyb3IuYmluZCh0aGlzKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGZvcm1Db250YWluZXIub25jaGFuZ2UgPSBfZ2V0SW5wdXRzVmFsdWUuYmluZCh0aGlzKTtcclxuICAgICAgZm9ybUNvbnRhaW5lci5vbmlucHV0ID0gdGhpcy5mb3JtLmZvcm1Jc1ZhbGlkO1xyXG4gICAgICBmb3JtQnV0dG9uLm9uY2xpY2sgPSBoYW5kbGVTaWduaW5DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgICBhbHRCdXR0b24ub25jbGljayA9IGdvU2lnbmluO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgc3VwZXIuc2hvdygpO1xyXG4gICAgdGhpcy5fY2xlYXJFcnJvcigpO1xyXG4gICAgdGhpcy5ldmVudEJ1cygpLmVtaXQodGhpcy5FVkVOVFMuRkxPV19DRFUpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBzZXJ2ZXJNZXNzYWdlLCBpc0xvYWQsIGJ1dHRvbiwgYWx0TGlua0NsYXNzTmFtZSwgYWx0VGV4dCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gc2lnbnVwVGVtcGxhdGVQYWdlLmNvbXBpbGUoe1xyXG4gICAgICB0aXRsZTogdGl0bGUucmVuZGVyKCksXHJcbiAgICAgIGlucHV0czogdGhpcy5fZ2V0SW5wdXRzKCksXHJcbiAgICAgIHNlcnZlck1lc3NhZ2UsXHJcbiAgICAgIGJ1dHRvbjogYnV0dG9uLnJlbmRlcigpLFxyXG4gICAgICBhbHRMaW5rQ2xhc3NOYW1lLFxyXG4gICAgICBhbHRUZXh0LFxyXG4gICAgICBsb2FkZXI6IHRoaXMuX3NldExvYWRlcihpc0xvYWQpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTaWdudXBQYWdlIH07XHJcbiIsImNvbnN0IHNpZ251cFBhZ2VUZW1wbGF0ZSA9IGBcclxuICA8ZGl2IGNsYXNzPVwicm9vdFwiPlxyXG4gIDxtYWluIGNsYXNzPVwibWFpbi1jb250ZW50XCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYXV0aC13aXRoLWNvbnRhaW5lclwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYXV0aFwiPlxyXG4gICAgICAgIHslIHRpdGxlICV9XHJcbiAgICAgICAgPGZvcm0gY2xhc3M9XCJhdXRoX19mb3JtIGF1dGhfX2Zvcm1fc2lnbnVwXCI+XHJcbiAgICAgICAgICB7JSBpbnB1dHMgJX0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9mb3JtPiAgIFxyXG4gICAgICAgIHslIHNlcnZlck1lc3NhZ2UgJX1cclxuICAgICAgICB7JSBidXR0b24gJX1cclxuICAgICAgICA8YSBocmVmPVwi4oSWXCIgY2xhc3M9XCJsaW5rIGF1dGhfX2xpbmsgeyUgYWx0TGlua0NsYXNzTmFtZSAlfVwiXHJcbiAgICAgICAgICA+eyUgYWx0VGV4dCAlfTwvYVxyXG4gICAgICAgID4gICAgICAgICBcclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L21haW4+XHJcbiAgeyUgbG9hZGVyICV9XHJcbiAgPC9kaXY+XHJcbiAgYDtcclxuZXhwb3J0IGRlZmF1bHQgc2lnbnVwUGFnZVRlbXBsYXRlO1xyXG4iLCJpbXBvcnQge1xyXG4gIHBhc3N3b3JkVmFsaWRhdG9yLFxyXG4gIHNpbXBsZVRleHRWYWxpZGF0b3IsXHJcbiAgZW1haWxWYWxpZGF0b3IsXHJcbiAgcGhvbmVWYWxpZGF0b3IsXHJcbn0gZnJvbSAnLi4vLi4vdXRpbC92YWxpZGF0b3JzJztcclxuXHJcbmV4cG9ydCBjb25zdCBpbnB1dHNQcm9wcyA9IHtcclxuICB1c2VySW5mbzogW1xyXG4gICAge1xyXG4gICAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJGaXJzdCBuYW1lXCIgXHJcbiAgICAgICAgICBtaW5sZW5ndGg9XCIyXCJcclxuICAgICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICBgLFxyXG4gICAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF91c2VyIGF1dGhfX2lucHV0X3VzZXJfZmlyc3QtbmFtZScsXHJcbiAgICAgIG5hbWU6ICdmaXJzdF9uYW1lJyxcclxuICAgICAgaGFuZGxlQmx1cjogc2ltcGxlVGV4dFZhbGlkYXRvcixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlY29uZCBuYW1lXCIgXHJcbiAgICAgICAgICBtaW5sZW5ndGg9XCIyXCJcclxuICAgICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICBgLFxyXG4gICAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF91c2VyIGF1dGhfX2lucHV0X3VzZXJfc2Vjb25kLW5hbWUnLFxyXG4gICAgICBuYW1lOiAnc2Vjb25kX25hbWUnLFxyXG4gICAgICBoYW5kbGVCbHVyOiBzaW1wbGVUZXh0VmFsaWRhdG9yLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgYXR0cmlidXRlczogYFxyXG4gICAgICAgICAgdHlwZT1cImVtYWlsXCIgXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cImVtYWlsXCIgXHJcbiAgICAgICAgICBwYXR0ZXJuPVwiXi57MSx9QChbLTAtOUEtWmEtel17MSx9XFxcXC4pezEsM31bLUEtWmEtel17Mix9JFwiXHJcbiAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgYCxcclxuICAgICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfdXNlciBhdXRoX19pbnB1dF91c2VyX2ZpcnN0LWVtYWlsJyxcclxuICAgICAgbmFtZTogJ2VtYWlsJyxcclxuICAgICAgaGFuZGxlQmx1cjogZW1haWxWYWxpZGF0b3IsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cImxvZ2luXCIgXHJcbiAgICAgICAgICBtaW5sZW5ndGg9XCIyXCJcclxuICAgICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgYCxcclxuICAgICAgbmFtZTogJ2xvZ2luJyxcclxuICAgICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfdXNlciBhdXRoX19pbnB1dF91c2VyX2xvZ2luJyxcclxuICAgICAgaGFuZGxlQmx1cjogc2ltcGxlVGV4dFZhbGlkYXRvcixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGlzcGxheSBuYW1lXCIgXHJcbiAgICAgICAgICBtaW5sZW5ndGg9XCIyXCJcclxuICAgICAgICAgIG1heGxlbmd0aD1cIjIwXCJcclxuICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgYCxcclxuICAgICAgY2xhc3NOYW1lOiAnYXV0aF9faW5wdXRfdXNlciBhdXRoX19pbnB1dF91c2VyX2Rpc3BsYXktbmFtZScsXHJcbiAgICAgIG5hbWU6ICdkaXNwbGF5X25hbWUnLFxyXG4gICAgICBoYW5kbGVCbHVyOiBzaW1wbGVUZXh0VmFsaWRhdG9yLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgYXR0cmlidXRlczogYFxyXG4gICAgICAgICAgdHlwZT1cInBob25lXCIgXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBob25lXCIgXHJcbiAgICAgICAgICBwYXR0ZXJuPVwiXig3fDgpXFxcXGR7MTB9JFwiXHJcbiAgICAgICAgICBtYXhsZW5ndGg9XCIxMVwiXHJcbiAgICAgICAgICBhdXRvY29tcGxldGU9XCJvblwiXHJcbiAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgIGAsXHJcbiAgICAgIGNsYXNzTmFtZTogJ2F1dGhfX2lucHV0X3VzZXIgYXV0aF9faW5wdXRfdXNlcl9waG9uZScsXHJcbiAgICAgIG5hbWU6ICdwaG9uZScsXHJcbiAgICAgIGhhbmRsZUJsdXI6IHBob25lVmFsaWRhdG9yLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIGF2YXRhcjogW1xyXG4gICAge1xyXG4gICAgICBhdHRyaWJ1dGVzOiBgXHJcbiAgICAgIHR5cGU9XCJmaWxlXCJcclxuICAgICAgcmVxdWlyZWRcclxuICAgIGAsXHJcbiAgICAgIG5hbWU6ICdhdmF0YXInLFxyXG4gICAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF9hdmF0YXInLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIHBhc3N3b3JkOiBbXHJcbiAgICB7XHJcbiAgICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgcGxhY2Vob2xkZXI9XCJvbGQgcGFzc3dvcmRcIlxyXG4gICAgICBwYXR0ZXJuPVwiKD89LipcXFxcZCkoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD8hLipcXFxccykuKlwiXHJcbiAgICAgIG1pbmxlbmd0aD1cIjhcIlxyXG4gICAgICBhdXRvY29tcGxldGU9XCJvblwiXHJcbiAgICAgIHJlcXVpcmVkXHJcbiAgICBgLFxyXG4gICAgICBuYW1lOiAnb2xkUGFzc3dvcmQnLFxyXG4gICAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF9wYXNzd29yZCBhdXRoX19pbnB1dF9wYXNzd29yZF9vbGQnLFxyXG4gICAgICBoYW5kbGVCbHVyOiBwYXNzd29yZFZhbGlkYXRvcixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGF0dHJpYnV0ZXM6IGBcclxuICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgcGxhY2Vob2xkZXI9XCJuZXcgcGFzc3dvcmRcIlxyXG4gICAgICBwYXR0ZXJuPVwiKD89LipcXFxcZCkoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD8hLipcXFxccykuKlwiXHJcbiAgICAgIG1pbmxlbmd0aD1cIjhcIlxyXG4gICAgICBhdXRvY29tcGxldGU9XCJvblwiXHJcbiAgICAgIHJlcXVpcmVkXHJcbiAgICBgLFxyXG4gICAgICBuYW1lOiAnbmV3UGFzc3dvcmQnLFxyXG4gICAgICBjbGFzc05hbWU6ICdhdXRoX19pbnB1dF9wYXNzd29yZCBhdXRoX19pbnB1dF9wYXNzd29yZF9uZXcnLFxyXG4gICAgfSxcclxuICBdLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gJy4uLy4uL3V0aWwvQmxvY2svQmxvY2snO1xyXG5cclxuaW1wb3J0IHsgU2ltcGxlVGVtcGxhdGVFbmdpbmUgfSBmcm9tICcuLi8uLi91dGlsL1NpbXBsZS10ZW1wbGF0ZS1lbmdpbmUvc2ltcGxlLXRlbXBsYXRlLWVuZ2luZSc7XHJcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3VzZXItc2V0dGluZ3MtdGVtcGxhdGUnO1xyXG5cclxuaW1wb3J0IHsgRm9ybSwgSUZvcm0gfSBmcm9tICcuLi8uLi9mb3JtJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi9yb3V0ZXInO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uIH0gZnJvbSAnLi4vLi4vYXV0aG9yaXphdGlvbic7XHJcblxyXG5pbXBvcnQgeyBsb2dvdXRIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL2F1dGhIZWxwZXJzJztcclxuaW1wb3J0IHsgaW5wdXRzUHJvcHMgfSBmcm9tICcuL2lucHV0c1Byb3BzJztcclxuaW1wb3J0IHsgcGFzc3dvcmRWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgQXV0aEFwaSB9IGZyb20gJy4uLy4uL0FQSS9hdXRoQXBpJztcclxuaW1wb3J0IHsgVXNlckFwaSB9IGZyb20gJy4uLy4uL0FQSS91c2VBcGknO1xyXG5cclxuaW1wb3J0IHtcclxuICBBVkFUQVJfVVJMLFxyXG4gIFNVQ0NFU1NfTUVTU0FHRSxcclxuICBVTkVYUEVDVEVEX0VSUk9SLFxyXG4gIFBBU1NXT1JEX0NPSU5DSURFUyxcclxuICBBVVRIX0VSUl9BTkRfUkVESVJFQ1QsXHJcbn0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IEFWQVRBUl9CSUcgZnJvbSAnLi4vLi4vLi4vLi4vc3RhdGljL2ltYWdlcy9leGFtcGxlLXVzZXItaW1nLmpwZyc7XHJcblxyXG5pbXBvcnQgeyBUaXRsZSwgSW5wdXQsIEJ1dHRvbiwgQXZhdGFyLCBTZXJ2ZXJNZXNzYWdlLCBMb2FkZXIgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2luZGV4JztcclxuXHJcbmltcG9ydCB7IElucHV0VmFsaWRhdGUsIElJbnB1dFZhbGlkYXRlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9JbnB1dC9JbnB1dFZhbGlkYXRlJztcclxuXHJcbmludGVyZmFjZSBJSW5wdXRzUHJvcCB7XHJcbiAgYXR0cmlidXRlczogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBjbGFzc05hbWU6IHN0cmluZztcclxuICBoYW5kbGVCbHVyPyhlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCB1c2VyU2V0dGluZ3NUZW1wbGF0ZVBhZ2UgPSBuZXcgU2ltcGxlVGVtcGxhdGVFbmdpbmUodGVtcGxhdGUpO1xyXG5cclxuY29uc3QgYXV0aEFwaSA9IG5ldyBBdXRoQXBpKCk7XHJcbmNvbnN0IHVzZXJBcGkgPSBuZXcgVXNlckFwaSgpO1xyXG5cclxuY2xhc3MgVXNlclNldHRpbmdzIGV4dGVuZHMgQmxvY2sge1xyXG4gIGlucHV0c1ZhbHVlSW5mbzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICBpbnB1dHNWYWx1ZVBhc3N3b3JkOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIHZhbGlkYXRlSW5mbzogSUlucHV0VmFsaWRhdGVbXTtcclxuICB2YWxpZGF0ZVBhc3N3b3JkOiBJSW5wdXRWYWxpZGF0ZVtdO1xyXG4gIGZvcm1JbmZvOiBJRm9ybTtcclxuICBmb3JtUGFzc3dvcmQ6IElGb3JtO1xyXG4gIGlzU2VydmVyTWVzc2FnZVNldDogYm9vbGVhbjtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdkaXYnLCB7XHJcbiAgICAgIHRpdGxlOiBuZXcgVGl0bGUoeyB0ZXh0OiAnVXNlciBzZXR0aW5ncycgfSkucmVuZGVyKCksXHJcbiAgICAgIGF2YXRhcjogbmV3IEF2YXRhcih7XHJcbiAgICAgICAgbGluazogQVZBVEFSX0JJRyxcclxuICAgICAgICBhbHQ6ICdVc2VyIGF2YXRhcicsXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnYXV0aC11c2VyLXNldHRpbmdzX19pbWcnLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgYXZhdGFyU2VydmVyTWVzc2FnZTogbmV3IFNlcnZlck1lc3NhZ2Uoe1xyXG4gICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgIGlzRXJyb3I6IGZhbHNlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgdXNlckluZm9TZXJ2ZXJNZXNzYWdlOiBuZXcgU2VydmVyTWVzc2FnZSh7XHJcbiAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICBwYXNzd29yZFNlcnZlck1lc3NhZ2U6IG5ldyBTZXJ2ZXJNZXNzYWdlKHtcclxuICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICBpc0Vycm9yOiBmYWxzZSxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIGlucHV0QXZhdGFyOiBuZXcgSW5wdXQoe1xyXG4gICAgICAgIGF0dHJpYnV0ZXM6IGlucHV0c1Byb3BzLmF2YXRhclswXS5hdHRyaWJ1dGVzLFxyXG4gICAgICAgIG5hbWU6IGlucHV0c1Byb3BzLmF2YXRhclswXS5uYW1lLFxyXG4gICAgICAgIGNsYXNzTmFtZTogJ2F1dGhfX2lucHV0IGF1dGhfX2lucHV0X2F2YXRhcicsXHJcbiAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICBidXR0b25BdmF0YXI6IG5ldyBCdXR0b24oe1xyXG4gICAgICAgIHRleHQ6ICdMb2FkIGF2YXRhcicsXHJcbiAgICAgICAgY2xhc3NOYW1lOiAnYXV0aF9fYnV0dG9uIGF1dGhfX2J1dHRvbl9hdmF0YXInLFxyXG4gICAgICAgIGlzRGlzYWJsZWQ6IHRydWUsXHJcbiAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICBidXR0b25Vc2VySW5mbzogbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgdGV4dDogJ1NhdmUgdXNlciBpbmZvJyxcclxuICAgICAgICBjbGFzc05hbWU6ICdhdXRoX19idXR0b24gYXV0aF9fYnV0dG9uX3VzZXItc2V0dGluZycsXHJcbiAgICAgICAgaXNEaXNhYmxlZDogdHJ1ZSxcclxuICAgICAgfSkucmVuZGVyKCksXHJcbiAgICAgIGJ1dHRvblBhc3N3b3JkOiBuZXcgQnV0dG9uKHtcclxuICAgICAgICB0ZXh0OiAnQ2hhbmdlJyxcclxuICAgICAgICBjbGFzc05hbWU6ICdhdXRoX19idXR0b24gYXV0aF9fYnV0dG9uX3Bhc3N3b3JkJyxcclxuICAgICAgICBpc0Rpc2FibGVkOiB0cnVlLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgICAgaXNMb2FkOiBmYWxzZSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuaW5wdXRzVmFsdWVJbmZvO1xyXG4gICAgdGhpcy5pbnB1dHNWYWx1ZVBhc3N3b3JkID0ge307XHJcbiAgICB0aGlzLnZhbGlkYXRlSW5mbyA9IFtdO1xyXG4gICAgdGhpcy52YWxpZGF0ZVBhc3N3b3JkID0gW107XHJcbiAgICB0aGlzLmZvcm1JbmZvO1xyXG4gICAgdGhpcy5mb3JtUGFzc3dvcmQ7XHJcbiAgICB0aGlzLmlzU2VydmVyTWVzc2FnZVNldCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuX2VyckNhdGNoZXIgPSB0aGlzLl9lcnJDYXRjaGVyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9jbGVhckVycm9ycyA9IHRoaXMuX2NsZWFyRXJyb3JzLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9nZXRJbnB1dHNWYWx1ZUluZm8gPSB0aGlzLl9nZXRJbnB1dHNWYWx1ZUluZm8uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlVXNlckluZm8gPSB0aGlzLmhhbmRsZUNoYW5nZVVzZXJJbmZvLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9nZXRJbnB1dHNWYWx1ZVBhc3N3b3JkID0gdGhpcy5fZ2V0SW5wdXRzVmFsdWVQYXNzd29yZC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VQYXNzd29yZCA9IHRoaXMuaGFuZGxlQ2hhbmdlUGFzc3dvcmQuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlTG9hZEF2YXRhciA9IHRoaXMuaGFuZGxlTG9hZEF2YXRhci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVCbHVyUGFzc3dvcmQgPSB0aGlzLmhhbmRsZUJsdXJQYXNzd29yZC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5jdXN0b21WYWxpZGF0ZVBhc3N3b3JkID0gdGhpcy5jdXN0b21WYWxpZGF0ZVBhc3N3b3JkLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBfc2V0U2VydmVyTWVzc2FnZShrZXk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nIHwgbnVtYmVyID0gJycsIGlzRXJyb3IgPSBmYWxzZSkge1xyXG4gICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgIFtrZXldOiBuZXcgU2VydmVyTWVzc2FnZSh7XHJcbiAgICAgICAgdGV4dDogbWVzc2FnZSxcclxuICAgICAgICBpc0Vycm9yLFxyXG4gICAgICB9KS5yZW5kZXIoKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgIHRoaXMuaXNTZXJ2ZXJNZXNzYWdlU2V0ID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9lcnJDYXRjaGVyKGVycjogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSwgZXJyb3JQcm9wc05hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgeyBzdGF0dXMsIHJlc3BvbnNlVGV4dCA9IFVORVhQRUNURURfRVJST1IgfSA9IGVycjtcclxuXHJcbiAgICBpZiAoc3RhdHVzID09PSA1MDApIHtcclxuICAgICAgcm91dGVyLmdvKCcjL2Vycm9yJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgIHRoaXMuX3NldFNlcnZlck1lc3NhZ2UoZXJyb3JQcm9wc05hbWUsIEFVVEhfRVJSX0FORF9SRURJUkVDVCwgdHJ1ZSk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGxvZ291dEhlbHBlcihhdXRob3JpemF0aW9uKTtcclxuICAgICAgICByb3V0ZXIuZ28oJyMvc2lnbmluJyk7XHJcbiAgICAgIH0sIDIwMDApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2V0U2VydmVyTWVzc2FnZShlcnJvclByb3BzTmFtZSwgcmVzcG9uc2VUZXh0LCB0cnVlKTtcclxuICB9XHJcblxyXG4gIF9zZXRMb2FkZXIoaXNMb2FkOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gbmV3IExvYWRlcih7IGlzTG9hZCB9KS5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIF9jbGVhckVycm9ycygpIHtcclxuICAgIGlmICh0aGlzLmlzU2VydmVyTWVzc2FnZVNldCkge1xyXG4gICAgICB0aGlzLl9zZXRTZXJ2ZXJNZXNzYWdlKCdhdmF0YXJTZXJ2ZXJNZXNzYWdlJyk7XHJcbiAgICAgIHRoaXMuX3NldFNlcnZlck1lc3NhZ2UoJ3VzZXJJbmZvU2VydmVyTWVzc2FnZScpO1xyXG4gICAgICB0aGlzLl9zZXRTZXJ2ZXJNZXNzYWdlKCdwYXNzd29yZFNlcnZlck1lc3NhZ2UnKTtcclxuICAgICAgdGhpcy5pc1NlcnZlck1lc3NhZ2VTZXQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvSW5wdXRzKCkge1xyXG4gICAgdGhpcy5pbnB1dHNWYWx1ZUluZm8gPSB0aGlzLmlucHV0c1ZhbHVlSW5mbyB8fCB7fTtcclxuICAgIHRoaXMudmFsaWRhdGVJbmZvID0gdGhpcy52YWxpZGF0ZUluZm8gfHwgW107XHJcbiAgICByZXR1cm4gKGlucHV0c1Byb3BzLnVzZXJJbmZvIGFzIElJbnB1dHNQcm9wW10pXHJcbiAgICAgIC5tYXAoKHsgbmFtZSwgYXR0cmlidXRlcywgY2xhc3NOYW1lLCBoYW5kbGVCbHVyIH0pID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5wdXRzVmFsdWVJbmZvW25hbWVdID8gYHZhbHVlPVwiJHt0aGlzLmlucHV0c1ZhbHVlSW5mb1tuYW1lXX1cImAgOiAnICc7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZUluZm8ucHVzaChuZXcgSW5wdXRWYWxpZGF0ZShoYW5kbGVCbHVyKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgSW5wdXQoe1xyXG4gICAgICAgICAgYXR0cmlidXRlcyxcclxuICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgICB9KS5yZW5kZXIoKTtcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFzc3dvcmRJbnB1dHMoKSB7XHJcbiAgICB0aGlzLmlucHV0c1ZhbHVlUGFzc3dvcmQgPSB0aGlzLmlucHV0c1ZhbHVlUGFzc3dvcmQgfHwge307XHJcbiAgICB0aGlzLnZhbGlkYXRlUGFzc3dvcmQgPSB0aGlzLnZhbGlkYXRlUGFzc3dvcmQgfHwgW107XHJcbiAgICByZXR1cm4gKGlucHV0c1Byb3BzLnBhc3N3b3JkIGFzIElJbnB1dHNQcm9wW10pXHJcbiAgICAgIC5tYXAoKHsgbmFtZSwgYXR0cmlidXRlcywgY2xhc3NOYW1lIH0pID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5wdXRzVmFsdWVQYXNzd29yZFtuYW1lXVxyXG4gICAgICAgICAgPyBgdmFsdWU9XCIke3RoaXMuaW5wdXRzVmFsdWVQYXNzd29yZFtuYW1lXX1cImBcclxuICAgICAgICAgIDogJyAnO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVQYXNzd29yZC5wdXNoKG5ldyBJbnB1dFZhbGlkYXRlKHRoaXMuaGFuZGxlQmx1clBhc3N3b3JkKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgSW5wdXQoe1xyXG4gICAgICAgICAgYXR0cmlidXRlcyxcclxuICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgIGNsYXNzTmFtZSxcclxuICAgICAgICB9KS5yZW5kZXIoKTtcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0c1ZhbHVlSW5mbyhldmVudDogRXZlbnQpIHtcclxuICAgIHRoaXMuZm9ybUluZm8uc2F2ZVZhbHVlKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCwgdGhpcy5pbnB1dHNWYWx1ZUluZm8pO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0c1ZhbHVlUGFzc3dvcmQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICB0aGlzLmZvcm1QYXNzd29yZC5zYXZlVmFsdWUoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0LCB0aGlzLmlucHV0c1ZhbHVlUGFzc3dvcmQpO1xyXG4gIH1cclxuXHJcbiAgY3VzdG9tVmFsaWRhdGVQYXNzd29yZCgpIHtcclxuICAgIGNvbnN0IHsgbmV3UGFzc3dvcmQsIG9sZFBhc3N3b3JkIH0gPSB0aGlzLmlucHV0c1ZhbHVlUGFzc3dvcmQ7XHJcbiAgICBpZiAobmV3UGFzc3dvcmQgPT09IG9sZFBhc3N3b3JkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQmx1clBhc3N3b3JkKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgY29uc3QgeyBuZXdQYXNzd29yZCwgb2xkUGFzc3dvcmQgfSA9IHRoaXMuaW5wdXRzVmFsdWVQYXNzd29yZDtcclxuICAgIHBhc3N3b3JkVmFsaWRhdG9yKGVsZW1lbnQsIGNhbGxiYWNrKTtcclxuICAgIGlmIChuZXdQYXNzd29yZCA9PT0gb2xkUGFzc3dvcmQpIHtcclxuICAgICAgY2FsbGJhY2sodHJ1ZSwgUEFTU1dPUkRfQ09JTkNJREVTKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2hhbmdlUGFzc3dvcmQoKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogdHJ1ZSB9KTtcclxuICAgIHVzZXJBcGlcclxuICAgICAgLmNoYW5nZVBhc3N3b3JkKHRoaXMuaW5wdXRzVmFsdWVQYXNzd29yZClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW5wdXRzVmFsdWVQYXNzd29yZCA9IHt9O1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fc2V0U2VydmVyTWVzc2FnZSgncGFzc3dvcmRTZXJ2ZXJNZXNzYWdlJywgU1VDQ0VTU19NRVNTQUdFLCBmYWxzZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZXJyQ2F0Y2hlcihlcnIsICdwYXNzd29yZFNlcnZlck1lc3NhZ2UnKTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW5wdXRzVmFsdWVQYXNzd29yZCA9IHt9O1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IGZhbHNlIH0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNoYW5nZVVzZXJJbmZvKCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IHRydWUgfSk7XHJcbiAgICB1c2VyQXBpXHJcbiAgICAgIC5wcm9maWxlKHRoaXMuaW5wdXRzVmFsdWVJbmZvKVxyXG4gICAgICAudGhlbigoKSA9PiB0aGlzLl9zZXRTZXJ2ZXJNZXNzYWdlKCd1c2VySW5mb1NlcnZlck1lc3NhZ2UnLCBTVUNDRVNTX01FU1NBR0UsIGZhbHNlKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICB0aGlzLl9lcnJDYXRjaGVyKGVyciwgJ3VzZXJJbmZvU2VydmVyTWVzc2FnZScpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogZmFsc2UgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlTG9hZEF2YXRhcigpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYXV0aF9faW5wdXRfYXZhdGFyJyk7XHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdhdmF0YXInLCBpbnB1dC5maWxlc1swXSk7XHJcblxyXG4gICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogdHJ1ZSB9KTtcclxuICAgIHVzZXJBcGlcclxuICAgICAgLmF2YXRhcihmb3JtRGF0YSlcclxuICAgICAgLnRoZW4oKHsgYXZhdGFyLCBsb2dpbiB9KSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7XHJcbiAgICAgICAgICBhdmF0YXI6IG5ldyBBdmF0YXIoe1xyXG4gICAgICAgICAgICBsaW5rOiBgJHtBVkFUQVJfVVJMfSR7YXZhdGFyfWAsXHJcbiAgICAgICAgICAgIGFsdDogbG9naW4sXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F1dGgtdXNlci1zZXR0aW5nc19faW1nJyxcclxuICAgICAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIHRoaXMuX2VyckNhdGNoZXIoZXJyLCAnYXZhdGFyU2VydmVyTWVzc2FnZScpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wcyh7IGlzTG9hZDogZmFsc2UgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnNldFByb3BzKHsgaXNMb2FkOiB0cnVlIH0pO1xyXG4gICAgYXV0aEFwaVxyXG4gICAgICAuZ2V0VXNlckluZm8oKVxyXG4gICAgICAudGhlbigoeyBmaXJzdF9uYW1lLCBzZWNvbmRfbmFtZSwgZW1haWwsIGxvZ2luLCBwaG9uZSwgYXZhdGFyLCBkaXNwbGF5X25hbWUgfSkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW5wdXRzVmFsdWVJbmZvID0ge1xyXG4gICAgICAgICAgZmlyc3RfbmFtZSxcclxuICAgICAgICAgIHNlY29uZF9uYW1lLFxyXG4gICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICBsb2dpbixcclxuICAgICAgICAgIHBob25lLFxyXG4gICAgICAgICAgZGlzcGxheV9uYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHsgYXZhdGFyLCBsb2dpbiB9O1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoeyBhdmF0YXIsIGxvZ2luIH0pID0+IHtcclxuICAgICAgICBpZiAoYXZhdGFyKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFByb3BzKHtcclxuICAgICAgICAgICAgYXZhdGFyOiBuZXcgQXZhdGFyKHtcclxuICAgICAgICAgICAgICBsaW5rOiBgJHtBVkFUQVJfVVJMfSR7YXZhdGFyfWAsXHJcbiAgICAgICAgICAgICAgYWx0OiBsb2dpbixcclxuICAgICAgICAgICAgICBjbGFzc05hbWU6ICdhdXRoLXVzZXItc2V0dGluZ3NfX2ltZycsXHJcbiAgICAgICAgICAgIH0pLnJlbmRlcigpLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZXZlbnRCdXMoKS5lbWl0KHRoaXMuRVZFTlRTLkZMT1dfQ0RVKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZXJyQ2F0Y2hlcihlcnIsICd1c2VySW5mb1NlcnZlck1lc3NhZ2UnKTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMoeyBpc0xvYWQ6IGZhbHNlIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLmV2ZW50QnVzKCkub24odGhpcy5FVkVOVFMuRkxPV19SRU5ERVIsICgpID0+IHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgdmFsaWRhdGVJbmZvLFxyXG4gICAgICAgIHZhbGlkYXRlUGFzc3dvcmQsXHJcbiAgICAgICAgY3VzdG9tVmFsaWRhdGVQYXNzd29yZCxcclxuICAgICAgICBfZ2V0SW5wdXRzVmFsdWVJbmZvLFxyXG4gICAgICAgIF9jbGVhckVycm9ycyxcclxuICAgICAgICBoYW5kbGVDaGFuZ2VVc2VySW5mbyxcclxuICAgICAgICBfZ2V0SW5wdXRzVmFsdWVQYXNzd29yZCxcclxuICAgICAgICBoYW5kbGVDaGFuZ2VQYXNzd29yZCxcclxuICAgICAgICBoYW5kbGVMb2FkQXZhdGFyLFxyXG4gICAgICB9ID0gdGhpcztcclxuXHJcbiAgICAgIGNvbnN0IGZvcm1Db250YWluZXJJbmZvOiBIVE1MRm9ybUVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19mb3JtX3VzZXItaW5mbycpO1xyXG4gICAgICBjb25zdCBmb3JtQnV0dG9uSW5mbzogSFRNTEJ1dHRvbkVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19idXR0b25fdXNlci1zZXR0aW5nJyk7XHJcbiAgICAgIGNvbnN0IGlucHV0c1VzZXJJbmZvID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0aF9faW5wdXRfdXNlcicpO1xyXG5cclxuICAgICAgY29uc3QgZm9ybUNvbnRhaW5lclBhc3N3b3JkOiBIVE1MRm9ybUVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19mb3JtX3Bhc3N3b3JkJyk7XHJcbiAgICAgIGNvbnN0IGZvcm1CdXR0b25QYXNzd29yZDogSFRNTEJ1dHRvbkVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19idXR0b25fcGFzc3dvcmQnKTtcclxuICAgICAgY29uc3QgaW5wdXRzUGFzc3dvcmQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRoX19pbnB1dF9wYXNzd29yZCcpO1xyXG4gICAgICBjb25zdCBmb3JtQ29udGFpbmVyQXZhdGFyOiBIVE1MRm9ybUVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19mb3JtX2F2YXRhcicpO1xyXG4gICAgICBjb25zdCBmb3JtQnV0dG9uQXZhdGFyOiBIVE1MQnV0dG9uRWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmF1dGhfX2J1dHRvbl9hdmF0YXInKTtcclxuICAgICAgY29uc3QgaW5wdXRBdmF0YXI6IEhUTUxJbnB1dEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoX19pbnB1dF9hdmF0YXInKTtcclxuXHJcbiAgICAgIGNvbnN0IGZvcm1BdmF0YXIgPSBuZXcgRm9ybShmb3JtQ29udGFpbmVyQXZhdGFyLCBmb3JtQnV0dG9uQXZhdGFyKTtcclxuXHJcbiAgICAgIHRoaXMuZm9ybUluZm8gPSBuZXcgRm9ybShmb3JtQ29udGFpbmVySW5mbywgZm9ybUJ1dHRvbkluZm8pO1xyXG4gICAgICBpbnB1dHNVc2VySW5mby5mb3JFYWNoKChpbnB1dCwgaSkgPT4ge1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmZvY3VzID0gdmFsaWRhdGVJbmZvW2ldLmhhbmRsZUZvY3VzO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmJsdXIgPSB2YWxpZGF0ZUluZm9baV0uaGFuZGxlQmx1cjtcclxuICAgICAgICAoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkub25jbGljayA9IF9jbGVhckVycm9ycztcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLmZvcm1QYXNzd29yZCA9IG5ldyBGb3JtKFxyXG4gICAgICAgIGZvcm1Db250YWluZXJQYXNzd29yZCxcclxuICAgICAgICBmb3JtQnV0dG9uUGFzc3dvcmQsXHJcbiAgICAgICAgY3VzdG9tVmFsaWRhdGVQYXNzd29yZFxyXG4gICAgICApO1xyXG4gICAgICBpbnB1dHNQYXNzd29yZC5mb3JFYWNoKChpbnB1dCwgaSkgPT4ge1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmZvY3VzID0gdmFsaWRhdGVQYXNzd29yZFtpXS5oYW5kbGVGb2N1cztcclxuICAgICAgICAoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkub25ibHVyID0gdmFsaWRhdGVQYXNzd29yZFtpXS5oYW5kbGVCbHVyO1xyXG4gICAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5vbmNsaWNrID0gX2NsZWFyRXJyb3JzO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZvcm1Db250YWluZXJJbmZvLm9uaW5wdXQgPSB0aGlzLmZvcm1JbmZvLmZvcm1Jc1ZhbGlkO1xyXG4gICAgICBmb3JtQ29udGFpbmVySW5mby5vbmNoYW5nZSA9IF9nZXRJbnB1dHNWYWx1ZUluZm87XHJcbiAgICAgIGZvcm1CdXR0b25JbmZvLm9uY2xpY2sgPSBoYW5kbGVDaGFuZ2VVc2VySW5mbztcclxuXHJcbiAgICAgIGZvcm1Db250YWluZXJQYXNzd29yZC5vbmlucHV0ID0gdGhpcy5mb3JtUGFzc3dvcmQuZm9ybUlzVmFsaWQ7XHJcbiAgICAgIGZvcm1Db250YWluZXJQYXNzd29yZC5vbmNoYW5nZSA9IF9nZXRJbnB1dHNWYWx1ZVBhc3N3b3JkO1xyXG4gICAgICBmb3JtQnV0dG9uUGFzc3dvcmQub25jbGljayA9IGhhbmRsZUNoYW5nZVBhc3N3b3JkO1xyXG5cclxuICAgICAgZm9ybUNvbnRhaW5lckF2YXRhci5vbmNoYW5nZSA9IGZvcm1BdmF0YXIuZm9ybUlzVmFsaWQ7XHJcbiAgICAgIGZvcm1CdXR0b25BdmF0YXIub25jbGljayA9IGhhbmRsZUxvYWRBdmF0YXI7XHJcbiAgICAgIGlucHV0QXZhdGFyLm9uY2xpY2sgPSBfY2xlYXJFcnJvcnM7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBzdXBlci5zaG93KCk7XHJcbiAgICB0aGlzLl9jbGVhckVycm9ycygpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHRpdGxlLFxyXG4gICAgICBhdmF0YXIsXHJcbiAgICAgIGlucHV0QXZhdGFyLFxyXG4gICAgICBidXR0b25BdmF0YXIsXHJcbiAgICAgIGJ1dHRvblVzZXJJbmZvLFxyXG4gICAgICBidXR0b25QYXNzd29yZCxcclxuICAgICAgdXNlckluZm9TZXJ2ZXJNZXNzYWdlLFxyXG4gICAgICBwYXNzd29yZFNlcnZlck1lc3NhZ2UsXHJcbiAgICAgIGF2YXRhclNlcnZlck1lc3NhZ2UsXHJcbiAgICAgIGlzTG9hZCxcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIHJldHVybiB1c2VyU2V0dGluZ3NUZW1wbGF0ZVBhZ2UuY29tcGlsZSh7XHJcbiAgICAgIHRpdGxlLFxyXG4gICAgICBhdmF0YXIsXHJcbiAgICAgIGlucHV0QXZhdGFyLFxyXG4gICAgICBidXR0b25BdmF0YXIsXHJcbiAgICAgIGlucHV0c1VzZXJJbmZvOiB0aGlzLmdldFVzZXJJbmZvSW5wdXRzKCksXHJcbiAgICAgIGJ1dHRvblVzZXJJbmZvLFxyXG4gICAgICBpbnB1dHNVc2VyUGFzc3dvcmQ6IHRoaXMuZ2V0UGFzc3dvcmRJbnB1dHMoKSxcclxuICAgICAgYnV0dG9uUGFzc3dvcmQsXHJcbiAgICAgIHVzZXJJbmZvU2VydmVyTWVzc2FnZSxcclxuICAgICAgcGFzc3dvcmRTZXJ2ZXJNZXNzYWdlLFxyXG4gICAgICBhdmF0YXJTZXJ2ZXJNZXNzYWdlLFxyXG4gICAgICBsb2FkZXI6IHRoaXMuX3NldExvYWRlcihpc0xvYWQpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBVc2VyU2V0dGluZ3MgfTtcclxuIiwiY29uc3QgdXNlclNldHRpbmdzUGFnZVRlbXBsYXRlID0gYFxyXG4gIDxkaXYgY2xhc3M9XCJyb290XCI+XHJcbiAgICA8bWFpbiBjbGFzcz1cIm1haW4tY29udGVudFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYXV0aC11c2VyLXNldHRpbmdzXCI+XHJcbiAgICAgICAgeyUgdGl0bGUgJX1cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXV0aC11c2VyLXNldHRpbmdzX19jb250YWluZXJcIj5cclxuICAgICAgICAgICAgPGZvcm0gXHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJhdXRoX19mb3JtIGF1dGhfX2Zvcm1fYXZhdGFyXCIgXHJcbiAgICAgICAgICAgICAgbm92YWxpZGF0ZT1cInRydWVcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHslIGF2YXRhciAlfVxyXG4gICAgICAgICAgICB7JSBpbnB1dEF2YXRhciAlfVxyXG4gICAgICAgICAgICB7JSBhdmF0YXJTZXJ2ZXJNZXNzYWdlICV9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB7JSBidXR0b25BdmF0YXIgJX1cclxuICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImF1dGggYXV0aF91c2VyLXNldHRpbmdzIFwiPlxyXG4gICAgICAgICAgICA8Zm9ybSBjbGFzcz1cImF1dGhfX2Zvcm0gYXV0aF9fZm9ybV91c2VyLWluZm8gYXV0aF9yaWdodC1tYXJnaW5cIiBub3ZhbGlkYXRlPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgIHslIGlucHV0c1VzZXJJbmZvICV9XHJcbiAgICAgICAgICAgICAgeyUgdXNlckluZm9TZXJ2ZXJNZXNzYWdlICV9XHJcbiAgICAgICAgICAgICAgeyUgYnV0dG9uVXNlckluZm8gJX1cclxuICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICA8Zm9ybSBjbGFzcz1cImF1dGhfX2Zvcm0gYXV0aF9fZm9ybV9wYXNzd29yZFwiIG5vdmFsaWRhdGU9XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgICAgeyUgaW5wdXRzVXNlclBhc3N3b3JkICV9ICBcclxuICAgICAgICAgICAgICB7JSBwYXNzd29yZFNlcnZlck1lc3NhZ2UgJX1cclxuICAgICAgICAgICAgICB7JSBidXR0b25QYXNzd29yZCAlfSAgICAgICAgICBcclxuICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJhdXRoX19lcnJvciBhdXRoX19lcnJvcl9zZXJ2ZXJcIj5TZXJ2ZXIgZXJyb3I8L3NwYW4+ICAgICAgXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICB7JSBsb2FkZXIgJX1cclxuICA8L21haW4+XHJcbjwvZGl2PlxyXG4gIGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VyU2V0dGluZ3NQYWdlVGVtcGxhdGU7XHJcbiIsImltcG9ydCB7IEJhc2VBUEkgfSBmcm9tICcuL2Jhc2VBcGknO1xyXG5cclxuY2xhc3MgVXNlckFwaSBleHRlbmRzIEJhc2VBUEkge1xyXG4gIF91cmw6IHN0cmluZztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl91cmwgPSB0aGlzLl9iYXNlVXJsICsgJy91c2VyLyc7XHJcbiAgfVxyXG5cclxuICBhdmF0YXIoYm9keTogRm9ybURhdGEpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgcm91dGUgPSAncHJvZmlsZS9hdmF0YXInO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAgICAgIC5wdXQodGhpcy5fdXJsICsgcm91dGUsIG9wdGlvbnMpXHJcbiAgICAgIC50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZVdpdGhQYXJzZShyZXMpKTtcclxuICB9XHJcblxyXG4gIHByb2ZpbGUoYm9keTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJvdXRlID0gJ3Byb2ZpbGUnO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAgICAgIC5wdXQodGhpcy5fdXJsICsgcm91dGUsIG9wdGlvbnMpXHJcbiAgICAgIC50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZVdpdGhQYXJzZShyZXMpKTtcclxuICB9XHJcblxyXG4gIGNoYW5nZVBhc3N3b3JkKGJvZHk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcclxuICAgIH07XHJcbiAgICBjb25zdCByb3V0ZSA9ICdwYXNzd29yZCc7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucHV0KHRoaXMuX3VybCArIHJvdXRlLCBvcHRpb25zKS50aGVuKChyZXM6IGFueSkgPT4gdGhpcy5nZXRSZXNwb25zZShyZXMpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFVzZXJBcGkgfTtcclxuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9qcy9yb3V0ZXInO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uIH0gZnJvbSAnLi9qcy9hdXRob3JpemF0aW9uJztcclxuaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnLi9qcy9jb21wb25lbnRzLyc7XHJcbmltcG9ydCB7IGlzQWxyZWFkeUxvZ2luIH0gZnJvbSAnLi9qcy91dGlsL2F1dGhIZWxwZXJzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgU2VydmVyRXJyb3IsXHJcbiAgTm90Rm91bmQsXHJcbiAgTWFpblBhZ2UsXHJcbiAgU2lnbmluUGFnZSxcclxuICBTaWdudXBQYWdlLFxyXG4gIFVzZXJTZXR0aW5ncyxcclxufSBmcm9tICcuL2pzL3BhZ2VzL2luZGV4JztcclxuXHJcbmlzQWxyZWFkeUxvZ2luKGF1dGhvcml6YXRpb24pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcicpLmFwcGVuZENoaWxkKG5ldyBIZWFkZXIoKS5nZXRDb250ZW50KCkpO1xyXG5cclxucm91dGVyXHJcbiAgLnVzZVByb3RlY3QoJyMvJywgTWFpblBhZ2UpXHJcbiAgLnVzZURlZmF1bHQoJyMvc2lnbmluJywgU2lnbmluUGFnZSlcclxuICAudXNlKCcjL3NpZ251cCcsIFNpZ251cFBhZ2UpXHJcbiAgLnVzZSgnIy9zZXR0aW5ncycsIFVzZXJTZXR0aW5ncylcclxuICAudXNlKCcjL2Vycm9yJywgU2VydmVyRXJyb3IpXHJcbiAgLnVzZSgnIy9ub3Rmb3VuZCcsIE5vdEZvdW5kKVxyXG4gIC5zdGFydCgpO1xyXG5cclxuY29uc3QgYXV0aExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gIGlmICghYXV0aG9yaXphdGlvbi5sb2dpbikge1xyXG4gICAgcm91dGVyLmdvKCcjL3NpZ25pbicpO1xyXG4gICAgcm91dGVyLmlzUHJvdGVjdCA9IHRydWU7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHJvdXRlci5pc1Byb3RlY3QgPSBmYWxzZTtcclxuICByb3V0ZXIuZ28oJyMvJyk7XHJcbn07XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2VBdXRob3JpemF0aW9uJywgYXV0aExpc3RlbmVyLCBmYWxzZSk7XHJcbiIsImV4cG9ydCBjb25zdCByYW5kb21OdW1iZXIgPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICBjb25zdCByYW5kID0gbWluIC0gMC41ICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKTtcclxuICByZXR1cm4gTWF0aC5yb3VuZChyYW5kKTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==