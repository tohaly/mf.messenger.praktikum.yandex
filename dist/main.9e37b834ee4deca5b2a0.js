!function(t){var e={};function n(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(s,a,function(e){return t[e]}.bind(null,a));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){t.exports=n.p+"images/chat-card__img.png"},function(t,e,n){t.exports=n.p+"images/example-user-img.jpg"},function(t,e,n){},function(t,e,n){"use strict";n.r(e),n.d(e,"auth",(function(){return Y}));n(2);class s{constructor(t,e,n){this._pathname=t,this._blockClass=e,this._block=null,this._props=n}navigate(t){this.match(t)&&(this._pathname=t,this.render())}leave(){this._block&&this._block.hide()}match(t){return e=t,n=this._pathname,e===n;var e,n}render(){if(!this._block)return this._block=new this._blockClass,void((t,e)=>{const n=document.querySelector(t);n.appendChild(e.getContent())})(this._props.rootQuery,this._block);this._block.show()}}class a{constructor(t){if(this._handleHashChange=()=>{const t=window.location.hash;this._onRoute(t)},a.__instance)return a.__instance;this.routes=[],this.history=window.history,this._currentRoute=null,this._rootQuery=t,this._defaultPath,this.isProtect=!0,a.__instance=this,window.addEventListener("hashchange",this._handleHashChange)}use(t,e){const n=new s(t,e,{rootQuery:this._rootQuery});return this.routes.push(n),this}useDefault(t,e){const n=new s(t,e,{rootQuery:this._rootQuery});return this._defaultPath=t,this.routes.push(n),this}useProtect(t,e){const n=new s(t,e,{rootQuery:this._rootQuery,protect:!0});return this.routes.push(n),this}start(){window.onpopstate=(t=>{this._onRoute(t.currentTarget.location.hash)}).bind(this),this._onRoute(window.location.hash)}_onRoute(t){const e=this.getRoute(t);e?e._props.protect&&this.isProtect?this.go(this._defaultPath):(this._currentRoute&&this._currentRoute!==e&&this._currentRoute.leave(),this._currentRoute=e,e.render()):this.go("#/notfound")}go(t){this.history.pushState({},"",t),this._onRoute(t)}back(){this.history.back()}forward(){this.history.forward()}getRoute(t){return this.routes.find(e=>e._pathname.match(t))}}const r=new a("#main-content");r.isProtect=!localStorage.getItem("login");var i=r;class o{constructor(){this.listeners={}}on(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)}off(t,e){if(!this.listeners[t])throw new Error("Нет события: "+t);this.listeners[t]=this.listeners[t].filter(t=>t!==e)}emit(t,...e){if(!this.listeners[t])throw new Error("Нет события: "+t);this.listeners[t].forEach((function(t){t(...e)}))}}class l{constructor(t="div",e={}){this.EVENTS={INIT:"init",FLOW_CDM:"flow:component-did-mount",FLOW_CDU:"flow:component-did-update",FLOW_RENDER:"flow:render"},this._element=null,this._meta=null,this.setProps=t=>{t&&Object.assign(this.props,t)},this._makePropsProxy=t=>new Proxy(t,{get(t,e){const n=t[e];return"function"==typeof n?n.bind(t):n},set:(t,e,n)=>(t[e]=n,this.eventBus().emit(this.EVENTS.FLOW_CDU,Object.assign({},t),t),!0),deleteProperty(){throw new Error("No access")}});const n=new o;this._meta={tagName:t,props:e},this.props=this._makePropsProxy(e),this.eventBus=()=>n,this._registerEvents(n),n.emit(this.EVENTS.INIT),this.setProps=this.setProps.bind(this)}_registerEvents(t){t.on(this.EVENTS.INIT,this.init.bind(this)),t.on(this.EVENTS.FLOW_CDM,this._componentDidMount.bind(this)),t.on(this.EVENTS.FLOW_RENDER,this._render.bind(this)),t.on(this.EVENTS.FLOW_CDU,this._componentDidUpdate.bind(this))}_createResources(){const{tagName:t}=this._meta;this._element=this._createDocumentElement(t)}init(){this._createResources(),this.eventBus().emit(this.EVENTS.FLOW_CDM)}_componentDidMount(){this.componentDidMount(),this.eventBus().emit(this.EVENTS.FLOW_RENDER)}componentDidMount(){}_componentDidUpdate(t,e){this.componentDidUpdate()&&(this._render(),this.eventBus().emit(this.EVENTS.FLOW_RENDER))}componentDidUpdate(){return!0}get element(){return this._element}_render(){const t=this.render();this._element.innerHTML=t}render(){}getContent(){return this.element}_createDocumentElement(t){return document.createElement(t)}show(){this.getContent().style.display="block"}hide(){this.getContent().style.display="none"}}class u{constructor(t){this._TEMPLATE_REGEXP=/\{\%(.*?)\%\}/gi,this._REGEXP_CTX=/\(\)\(\%(.*?)\%\)/gi,this._template=t}compile(t){return this._compileTemplate(t)}_compileTemplate(t){let e=this._template,n=null;const s=this._TEMPLATE_REGEXP;for(;n=s.exec(e);)if(n[1]){const s=n[1].trim(),a=this.get(t,s);if("function"==typeof a){window[s]=a,e=e.replace(new RegExp(n[0],"gi"),`window.${s}()`);const t=this._REGEXP_CTX.exec(e);t&&(e=e.replace(t[0],`.${t[1].trim()}()`))}e=e.replace(new RegExp(n[0],"gi"),a)}return e}get(t,e,n){const s=e.replace("]","").split(/[\[\.]/gi);let a=t;for(let t of s){const e=a[t];if(!e)return n;a=e}return a||n}getNode(t){const e=document.createElement("div");return e.insertAdjacentHTML("beforeend",this.compile(t).trim()),e.firstChild}}const c=new u('\n    <img\n      src="{% link %}"\n      alt="{% alt %}"\n      class="{% className %}"\n    />\n');class h extends l{constructor(t){super("div",t)}render(){return c.compile({link:this.props.link,alt:this.props.alt,className:this.props.className})}}const d=new u('\n    <button {% disabled %} class="button {% className %}" >{% text %}</button>\n');class p extends l{constructor(t){super("div",t)}render(){const{text:t,className:e,isDisabled:n}=this.props;return d.compile({text:t,className:e,disabled:n?"disabled":""})}}const m=new u('\n  <div class="chat-card" onClick="{% activateHandle %}">\n    {% Avatar %}\n    <div class="chat-card__content">\n      <h2 class="chat-card__title">{% title %}</h2>\n      <p class="chat-card__text">\n        {% text %}\n      </p>\n    </div>\n  </div>\n');class _ extends l{constructor(t){super("div",t)}render(){return m.compile({activateHandle:this.props.activateHandle,Avatar:this.props.Avatar.render(),title:this.props.title,text:this.props.text})}}const g=()=>localStorage.getItem("login"),v=new u('\n  <button class="button header__button {% className %}">{% text %}</button>\n');class b extends l{constructor(t){super("div",t)}render(){return v.compile({text:this.props.text,className:this.props.className})}}const f=new u('\n  <header class="header">\n    <div class="header__logo-link">\n      <div class="header__logo-img"></div>\n      <h1 class="header__title">Simple chat</h1>   \n    </div>\n    <nav class="header__menu">\n      {% buttons %}      \n    </nav>\n  </header>\n'),w=[new b({text:"Signin",className:"header__button_signin"}),new b({text:"Signup",className:"header__button_signup"})],E=[new b({text:"Settings",className:"header__button_settings"}),new b({text:localStorage.getItem("login")+" ❌",className:"header__button_logout"})],y=g()?E:w;const x=new u('\n    <div class="form__input-wrapper">\n      <input\n      class="input auth__input {% className %}"\n      {% attributes %}\n      name="{% name %}"\n      {% value %}     \n      />\n      <span class="auth__error"></span>\n    </div>\n  ');class S extends l{constructor(t){super("div",t)}render(){const{attributes:t,name:e,className:n="",value:s}=this.props;return x.compile({attributes:t,name:e,value:s,className:n})}}const N=new u('\n  <div class="message">\n    {% avatar %}\n    <div class="message__content">\n      <h3 class="message__sender">User Name</h3>\n      <p class="message__text">\n        {% text %}\n      </p>\n    </div>\n    <time class="message__time">\n      10:44:45\n    </time>\n  </div>\n');const k=new u('<h2 class="page-title auth__title">{% text %}</h2>');class T extends l{constructor(t){super("div",t)}render(){return k.compile({className:this.props.className,text:this.props.text})}}const D=new u('\n<span\n  class="auth__error auth__error_server {% activeClass %}">\n    {% text %}\n  </span>\n');class P extends l{constructor(t){super("div",t)}render(){const{text:t}=this.props;return D.compile({activeClass:t?"auth__error_active":"",text:t})}}class C{constructor(){this.ERROR_NEED_METHOD="Need to specify a method",this.METHODS={GET:"GET",POST:"POST"},this.queryStringify=this.queryStringify.bind(this),this.request=this.request.bind(this)}getDeepParams(t,e){return Object.keys(e).reduce((n,s,a,r)=>{let i=e[s],o=`${t}[${s}]=${i}`;return"object"==typeof i&&(o=this.getDeepParams(`${t}[${s}]`,i)),`${n}${o}${a<r.length-1?"&":""}`},"")}queryStringify(t){if("object"!=typeof t)throw new Error("Data not object");const e=Object.keys(t);return e.reduce((n,s,a)=>{let r=t[s],i=`${s}=${r}`;return"object"==typeof r&&(i=this.getDeepParams(s,r)),`${n}${i}${a<e.length-1?"&":""}`},"")}get(t,e={}){return this.request(t,Object.assign(Object.assign({},e),{method:this.METHODS.GET}))}post(t,e={}){return this.request(t,Object.assign(Object.assign({},e),{method:this.METHODS.POST}))}request(t,e={}){const{headers:n={},method:s,body:a,timeout:r=5e3}=e;return new Promise(function(e,i){if(!s)return void i(this.ERROR_NEED_METHOD);const o=new XMLHttpRequest;o.withCredentials=!0;const l=s===this.METHODS.GET;o.open(s,l&&a?`${t}${this.queryStringify(a)}`:t),Object.keys(n).forEach(t=>{o.setRequestHeader(t,n[t])}),o.onload=()=>e(o),o.onabort=i,o.onerror=i,o.timeout=r,o.ontimeout=i,l||!a?o.send():o.send(JSON.stringify(a))}.bind(this))}}const V='\n  <div class="error">\n    <h1 class="error__title">{% errorCode %}</h1>\n    <p class="error__subtitle">{% errorTitle %}</p>\n    <div class="error__img"></div>\n    <a class="link error__link">back to main</a>\n  </div>\n',I=new u(V);const L=new u(V);var R=n(0),O=n.n(R);const q=new u('\n    <div class="root">\n      <main class="main-content">\n        <section class="aside-panel">\n          <form class="aside-panel__search-form">\n            <div class="aside-panel__search-icon"></div>\n            <input\n              type="text"\n              class="aside-panel__search-input"\n              placeholder="Search"\n            />\n          </form>\n          <div class="aside-panel__card-list">\n            {% chatCards %}\n          </div>\n        </section>\n        <section class="messages-window">\n          <div\n            class="messages-window__start-container messages-window__start-container_hidden"\n          >\n            <p class="messages-window__start-container-text">\n              select or create a chat to start communicate\n            </p>\n          </div>\n          <div class="messages-window__container">\n            <div class="messages-window__list">\n              <time class="messages-window__date-separator"\n                >thursday, 6 august 2020</time\n              >\n              {% message %}\n              <time class="messages-window__date-separator"\n                >thursday, 6 august 2020</time\n              >\n              {% message %}\n            </div>\n            <div class="control-panel">\n              <form class="control-panel__form">\n                <input\n                  type="text"\n                  class="input control-panel__input"\n                  placeholder="Start to write..."\n                />\n                <button class="control-panel__send-button"></button>\n              </form>\n              <div class="control-panel__media">\n                <div\n                  class="control-panel__media-item control-panel__media-item_file"\n                ></div>\n                <div\n                  class="control-panel__media-item control-panel__media-item_camera"\n                ></div>\n                <div\n                  class="control-panel__media-item control-panel__media-item_mic"\n                ></div>\n                <div class="control-panel__emojis">\n                  😄😁😡🤐🤑\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n    </div>\n  '),B={chatCards:((t,e,n=1)=>{const s=[];let a=e?t:0;if(0===t&&void 0===e)return s;for(t<0&&(n=-1),void 0===e&&(e=t);Math.abs(a)<Math.abs(e);)0!==n?(s.push(a),a+=n):(s.push(t),a+=1);return s})(10).map(()=>new _({activateHandle(){console.log("active")},Avatar:new h({link:O.a,alt:"User avatar",className:"chat-card__img"}),title:"Title",text:"Sorry, its just that I get very ne..."})),message:new class extends l{constructor(t){super("div",t)}render(){return N.compile({avatar:this.props.avatar.render(),text:this.props.text})}}({avatar:new h({link:"./images/chat-card__img.png",alt:"User avatar",className:"message__avatar"}),text:"Why didn't he come and talk to me himself?"})};const j=(t,e)=>{if(t.validity.tooShort)e(!0,"Min password length 8 characters");else if(!t.validity.valid){if(!/[A-Z]/g.test(t.value))return void e(!0,"Need two letters in different registers");if(!/[a-z]/g.test(t.value))return void e(!0,"Need two letters in different registers");if(/[\W_]/g.test(t.value))return void e(!0,"Password must contain latin letters and numbers");if(!/[\d]/g.test(t.value))return void e(!0,"Password must contain at least one number")}},A=(t,e)=>{(t.validity.tooLong||t.validity.tooShort)&&e(!0,"Login must be from 2 to 20 characters")},M=(t,e)=>{t.validity.valid||e(!0,"Incorrect email")},U=(t,e)=>{t.validity.valid||e(!0,"Phone must start with 8 or 7 and have 11 numbs")},$=[{attributes:'\n        type="text"\n        placeholder="login"\n        minlength="2"\n        maxlength="20"\n        required\n      ',name:"login",handleBlur:A},{attributes:'\n        type="password"\n        placeholder="password"\n        pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n        minlength="8"\n        autocomplete="on"\n        required\n      ',name:"password",handleBlur:j}];class F{constructor(t){this._FIELD_REQUIRED="This is felid required",this._toggleError=(t,e="")=>{const n=event.target.nextElementSibling;t?(n.classList.add("auth__error_active"),n.textContent=e):(n.classList.remove("auth__error_active"),n.textContent=e)},this.handleBlur=()=>{event.target.validity.valueMissing?this._toggleError(!0,this._FIELD_REQUIRED):this._customValidate(event.target,this._toggleError)},this.handleFocus=()=>{this._toggleError(!1)},this._customValidate=t}}class H{constructor(t,e,n=(()=>!0)){this.formIsValid=t=>{this._form.checkValidity()&&this._customValidator()?this._toggleButton(!0):this._toggleButton(!1)},this._form=t,this._button=e,this._customValidator=n}saveValue(t,e){e[t.name]=t.value}_toggleButton(t){t?this._button.removeAttribute("disabled"):this._button.setAttribute("disabled","true")}}const W=new u('\n  <div class="root">\n  <main class="main-content">\n    <div class="auth-with-container">\n      <div class="auth">\n        {% title %}\n        <form class="auth__form auth__form_signin">\n          {% inputs %}          \n          {% serverError %}\n          {% button %}\n          <a href="#" class="link auth__link auth__link_signin"\n            > {% altText %} </a\n          >\n          </form>          \n        </div>\n      </div>\n      <div class="loader {% loaderActivateClass %}">\n        <div class="loader__item"></div>\n        <p class="loader__text">Загрузка, подождите...</p>\n      </div>\n    </main>\n  </div>\n  ');const z=[{attributes:'\n        type="text" \n        placeholder="First name" \n        minlength="2"\n        maxlength="20"\n        required\n        ',name:"first_name",handleBlur:A},{attributes:'\n        type="text" \n        placeholder="Second name" \n        minlength="2"\n        maxlength="20"\n        required\n        ',name:"second_name",handleBlur:A},{attributes:'\n        type="email" \n        placeholder="email" \n        pattern="^.{1,}@([-0-9A-Za-z]{1,}\\.){1,3}[-A-Za-z]{2,}$"\n        required\n        ',name:"email",handleBlur:M},{attributes:'\n        type="text"\n        placeholder="login" \n        minlength="2"\n        maxlength="20"\n        required\n      ',name:"login",handleBlur:A},{attributes:'\n        type="password" \n        placeholder="password" \n        pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n        minlength="8"\n        autocomplete="on"\n        required\n      ',name:"password",handleBlur:j},{attributes:'\n        type="phone" \n        placeholder="Phone" \n        pattern="^(7|8)\\d{10}$"\n        maxlength="11"\n        autocomplete="on"\n        required\n      ',name:"phone",handleBlur:U}],Q=new u('\n  <div class="root">\n  <main class="main-content">\n    <div class="auth-with-container">\n      <div class="auth">\n        {% title %}\n        <form class="auth__form">\n          {% inputs %}\n          {% serverError %}\n          {% button %}\n          <a href="№" class="link auth__link {% altLinkClassName %}"\n            >{% altText %}</a\n          >          \n      </form>        \n      </div>\n    </div>\n    <div class="loader {% loaderActivateClass %}">\n      <div class="loader__item"></div>\n      <p class="loader__text">Загрузка, подождите...</p>\n    </div>\n  </main>\n  </div>\n  ');const Z={userInfo:[{attributes:'\n          type="text" \n          placeholder="First name" \n          minlength="2"\n          maxlength="20"\n          required\n          ',name:"first_name",handleBlur:A},{attributes:'\n          type="text" \n          placeholder="Second name" \n          minlength="2"\n          maxlength="20"\n          required\n          ',name:"second_name",handleBlur:A},{attributes:'\n          type="email" \n          placeholder="email" \n          pattern="^.{1,}@([-0-9A-Za-z]{1,}\\.){1,3}[-A-Za-z]{2,}$"\n          required\n          ',name:"email",handleBlur:M},{attributes:'\n          type="text"\n          placeholder="login" \n          minlength="2"\n          maxlength="20"\n          required\n        ',name:"login",handleBlur:A},{attributes:'\n          type="phone" \n          placeholder="Phone" \n          pattern="^(7|8)\\d{10}$"\n          maxlength="11"\n          autocomplete="on"\n          required\n        ',name:"phone",handleBlur:U}],avatar:[{attributes:'\n      type="file"\n      placeholder="old password"\n      pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n      minlength="8"\n      autocomplete="on"\n      required\n      title=" "\n    ',name:"avatar",handleBlur:j}],password:[{attributes:'\n      type="password"\n      placeholder="old password"\n      pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n      minlength="8"\n      autocomplete="on"\n      required\n    ',name:"old-password",handleBlur:j},{attributes:'\n      type="password"\n      placeholder="new password"\n      pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*"\n      minlength="8"\n      autocomplete="on"\n      required\n    ',name:"new-password",handleBlur(t,e){j(t,e)}}]};var G=n(1),X=n.n(G);const J=new u('\n  <div class="root">\n  <main class="main-content">\n    <div class="auth-user-settings">\n      {% title %}\n      <div class="auth-user-settings__container">\n          <form class="auth__form auth__form_avatar" novalidate="true">            \n            {% avatar %}\n            {% inputAvatar %}\n            {% buttonAvatar %}\n          </form>\n        <div class="auth auth_user-settings ">\n          <form class="auth__form auth__form_user-info auth_right-margin" novalidate="true">\n            {% inputsUserInfo %}\n            {% buttonUserInfo %}\n          </form>\n          <form class="auth__form auth__form_user-password" novalidate="true">\n            {% inputsUserPassword %}\n            {% buttonPassword %}\n          </form>\n        </div>\n      </div>\n      <span class="auth__error auth__error_server">Server error</span>      \n    </div>\n  </main>\n</div>\n  ');const Y=new class extends class{constructor(){this._baseUrl="https://ya-praktikum.tech/api/v2",this._http=new C}getResponse(t){if(200!==t.status)throw new Error(t.response);console.log(t)}}{constructor(t){super(),this._url=this._baseUrl+t,console.log(this._url)}signup(t){const e={headers:{"Content-Type":"application/json"},body:t};return this._http.post(this._url+"signup",e).then(t=>this.getResponse(t))}signin(t){const e={headers:{"Content-Type":"application/json"},body:t};return this._http.post(this._url+"signin",e).then(t=>this.getResponse(t))}logout(){return this._http.request(this._url+"logout",{headers:{"Content-Type":"application/json"},method:"POST"}).then(t=>this.getResponse(t))}getUserInfo(){return this._http.get(this._url+"user").then(t=>this.getResponse(t))}}("/auth/");document.querySelector("#header").appendChild((new class extends l{constructor(){super("div",{buttons:y.map(t=>t.render()).join("")})}logout(){Y.logout().then(()=>{localStorage.removeItem("login")}).then(()=>{i.go("#/signin")}).catch(()=>{i.go("#/error")})}headerClickEvents(t){t.preventDefault();let e=/header__button_(.*)/gi.exec(t.target.classList[2])[1];"logout"!==e?i.go("#/"+e):this.logout()}headerLogoClickHeader(){i.go("#/")}componentDidMount(){document.addEventListener("changeLocalStorage",()=>{const t=[new b({text:"Settings",className:"header__button_settings"}),new b({text:localStorage.getItem("login")+" ❌",className:"header__button_logout"})],e=g()?t:w;this.setProps({buttons:e.map(t=>t.render()).join("")})},!1),this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{this.element.querySelectorAll(".header__button").forEach(t=>{t.onclick=this.headerClickEvents.bind(this)}),this.element.querySelector(".header__logo-link").onclick=this.headerLogoClickHeader})}render(){const{buttons:t,loginName:e}=this.props;return f.compile({buttons:t})}}).getContent()),fetch("https://ya-praktikum.tech/api/v2/auth/signin",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({login:"tohalb",password:"hgfrd26Y1"})}).then(t=>console.log(t)),i.useProtect("#/",class extends l{constructor(){super("div",B),this.inputElement,this.sendButton}handleInput(){const t=this.sendButton,e=this.inputElement.value,n=e.match(/\s*/)[0];e&&e!==n?t.classList.add("control-panel__send-button_active"):t.classList.remove("control-panel__send-button_active")}handleSendMessage(){event.preventDefault();const t=this.inputElement,e=t.parentNode;console.log(t.value),e.reset(),this.sendButton.classList.remove("control-panel__send-button_active")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:t,handleInput:e,handleSendMessage:n}=this;this.inputElement=t.querySelector(".control-panel__input"),this.sendButton=t.querySelector(".control-panel__send-button"),this.inputElement.oninput=e.bind(this),this.sendButton.onclick=n.bind(this)})}render(){return q.compile({chatCards:this.props.chatCards.map(t=>t.render()).join(""),message:this.props.message.render(),handleInput:this.props.handleInput,handleClickButton:this.props.handleClickButton})}}).useDefault("#/signin",class extends l{constructor(){super("div",{title:new T({text:"Signup"}),serverError:new P({text:""}),button:new p({text:"Signin",className:"auth__button",isDisabled:!0}),altLinkClassName:"auth__link_signin",altText:"don't have an account?",isLoad:!1}),this.inputsValue,this.validate=[],this.form}_getInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],$.map(t=>{const{name:e,attributes:n}=t,s=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new F(t.handleBlur)),new S({attributes:n,name:e,value:s}).render()}).join("")}_getInputsValue(){this.form.saveValue(event.target,this.inputsValue)}handleSigninClick(){event.preventDefault(),this.setProps({isLoad:!0}),Y.signin(this.inputsValue).then(()=>{localStorage.setItem("login",this.inputsValue.login)}).then(()=>{this.inputsValue={}}).then(()=>{i.go("#/")}).catch(t=>{const{message:e="Server error"}=t;this.inputsValue.password="",this.setProps({serverError:new P({text:e})})}).finally(()=>{this.setProps({isLoad:!1})})}goSignup(){event.preventDefault(),i.go("#/signup")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:t,validate:e}=this,n=t.querySelector("form"),s=t.querySelector(".auth__button"),a=t.querySelectorAll(".input"),r=t.querySelector(".auth__link_signin");this.form=new H(n,s),a.forEach((t,n)=>{t.onfocus=e[n].handleFocus,t.onblur=e[n].handleBlur}),n.onchange=this._getInputsValue.bind(this),n.oninput=this.form.formIsValid,s.onclick=this.handleSigninClick.bind(this),r.onclick=this.goSignup})}render(){const{title:t,serverError:e,isLoad:n,button:s,altLinkClassName:a,altText:r}=this.props,i=n?"loader_is-active":"";return W.compile({title:t.render(),inputs:this._getInputs(),serverError:e.render(),button:s.render(),altLinkClassName:a,altText:r,loaderActivateClass:i})}}).use("#/signup",class extends l{constructor(){super("div",{title:new T({text:"Signup"}),serverError:new P({text:""}),button:new p({text:"Signup",className:"auth__button",isDisabled:!0}),altLinkClassName:"auth__link_signup",altText:"already have an account?",isLoad:!1}),this.inputsValue,this.validate=[],this.form}_getInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],z.map(t=>{const{name:e,attributes:n}=t,s=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new F(t.handleBlur)),new S({attributes:n,name:e,value:s}).render()}).join("")}handleSigninClick(t){t.preventDefault(),this.setProps({isLoad:!0}),Y.signup(this.inputsValue).then(()=>{localStorage.setItem("login",this.inputsValue.login)}).then(()=>{this.inputsValue={}}).then(()=>{i.go("#/")}).catch(t=>{const{message:e="Server error"}=t;this.inputsValue.password="",this.setProps({serverError:new P({text:e})})}).finally(()=>{this.setProps({isLoad:!1})})}_getInputsValue(t){this.form.saveValue(t.target,this.inputsValue)}goSignin(){event.preventDefault(),i.go("#/signin")}componentDidMount(){this.eventBus().on(this.EVENTS.FLOW_RENDER,()=>{const{element:t,validate:e}=this,n=t.querySelector("form"),s=t.querySelector(".auth__button"),a=t.querySelectorAll(".input"),r=t.querySelector(".auth__link_signup");this.form=new H(n,s),a.forEach((t,n)=>{t.onfocus=e[n].handleFocus,t.onblur=e[n].handleBlur}),n.onchange=this._getInputsValue.bind(this),n.oninput=this.form.formIsValid,s.onclick=this.handleSigninClick.bind(this),r.onclick=this.goSignin})}render(){const{title:t,serverError:e,isLoad:n,button:s,altLinkClassName:a,altText:r}=this.props,i=n?"loader_is-active":"";return Q.compile({title:t.render(),inputs:this._getInputs(),serverError:e.render(),button:s.render(),altLinkClassName:a,altText:r,loaderActivateClass:i})}}).use("#/settings",class extends l{constructor(){super("div",{title:new T({text:"Signup"}).render(),avatar:new h({link:X.a,alt:"User avatar",className:"auth-user-settings__img"}).render(),inputAvatar:new S({attributes:Z.avatar[0].attributes,name:Z.avatar[0].name,className:"auth__input auth__input_avatar"}).render(),buttonAvatar:new p({text:"Load avatar",className:"auth__button auth__button_avatar",isDisabled:!1}).render(),buttonUserInfo:new p({text:"Save user info",className:"auth__button auth__button_user-setting",isDisabled:!1}).render(),buttonPassword:new p({text:"Change",className:"auth__button auth__button_password",isDisabled:!1}).render(),isLoad:!1}),this.inputsValue,this.validate=[],this.form}getUserInfoInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],Z.userInfo.map(t=>{const{name:e,attributes:n}=t,s=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new F(t.handleBlur)),new S({attributes:n,name:e,value:s}).render()}).join("")}getPasswordInputs(){return this.inputsValue=this.inputsValue||{},this.validate=this.validate||[],Z.password.map(t=>{const{name:e,attributes:n}=t,s=this.inputsValue[e]?`value="${this.inputsValue[e]}"`:" ";return this.validate.push(new F(t.handleBlur)),new S({attributes:n,name:e,value:s}).render()}).join("")}customFormValidate(){}getFormData(){}componentDidMount(){Y.getUserInfo().then(t=>console.log(t))}render(){const{title:t,avatar:e,inputAvatar:n,buttonAvatar:s,buttonUserInfo:a,buttonPassword:r}=this.props;return J.compile({title:t,avatar:e,inputAvatar:n,buttonAvatar:s,inputsUserInfo:this.getUserInfoInputs(),buttonUserInfo:a,inputsUserPassword:this.getPasswordInputs(),buttonPassword:r})}}).use("#/error",class extends l{constructor(){super("div")}render(){return I.compile({errorCode:"Error 500",errorTitle:"Problems with server"})}}).use("#/notfound",class extends l{constructor(){super("div")}render(){return L.compile({errorCode:"Error 404",errorTitle:"Not found"})}}).start();const K=new Event("changeLocalStorage"),tt=localStorage.setItem,et=localStorage.removeItem;localStorage.removeItem=function(){et.apply(this,arguments),document.dispatchEvent(K)},localStorage.setItem=function(){console.log("do"),tt.apply(this,arguments),document.dispatchEvent(K),console.log("posle")};document.addEventListener("changeLocalStorage",(function(){if(!localStorage.getItem("login"))return i.go("#/signin"),void(i.isProtect=!0);console.log("here"),i.isProtect=!1,i.go("#/")}),!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,